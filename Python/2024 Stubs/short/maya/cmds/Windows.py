from typing import Union, Optional, List, Tuple, Any

def annotate(*args, p: Optional[Union[Tuple[float, float, float], bool]] = ..., tx: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    This command is used to create an annotation to be attached to the
    specified objects at the specified point.

    Args:
        p: (create) - Specifies the point about which the annotation text is to be centered.
        tx: (create) - Specifies the annotation text.
    """
    ...


def appHome(*args, iv: bool = ..., i: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., tv: bool = ..., urf: bool = ..., v: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Used for displaying and hiding application home.

    Args:
        iv: (create, edit, query) - Query or set application home icon visibility preference.  Note: Icon visibility cannot be modified if the MAYA_NO_HOME_ICON environment variable is defined.
        i: (create) - Instrument the app home command with the given string.
        t: (create, edit) - Navigate app home to the specified tab.  Available tabs are: Recent GettingStarted Learning WhatsNew Community
        tv: (create, edit) - Toggle application home widget visibility.
        urf: (create, edit) - Update the recent file list data.
        v: (create, edit, query) - Query or set application home widget visibility.
    """
    ...


def artBuildPaintMenu(*args) -> Any:
    r"""
    ??

    Args:
    """
    ...


def attrColorSliderGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., alp: Optional[Union[float, bool]] = ..., ann: Optional[Union[str, bool]] = ..., attrNavDecision: Optional[Union[Tuple[str, str], bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hsv: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rgb: Optional[Union[Tuple[float, float, float], bool]] = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sb: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    Create a color slider group consisting of a label, a color canvas,
    a slider and a button.  Clicking on the canvas will bring up the
    color editor.  If the button is visible, it will allow you to map
    a texture to the attribute.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        alp: (create, edit, query) - Alpha (transparency) of the color. Will show the alpha UI. Alpha will be set only if RGB or HSV is also set at the same time.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        attrNavDecision: (create, edit, query) - The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.
        at: (create, edit, query) - The name of a unique attribute of type 3double.  This newly created field will be attached to the attribute, so that modifications to one will change the other.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hsv: (create, edit, query) - Specifies the color in hsv style.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rgb: (create, edit, query) - Specifies the color in rgb style.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sb: (create, edit, query) - Control the display of the texture link button. True by default (show it).
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def attrControlGrp(*args, ann: Optional[Union[str, bool]] = ..., a: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., en: bool = ..., ex: bool = ..., ha: Optional[Union[str, bool]] = ..., hmb: bool = ..., l: Optional[Union[str, bool]] = ..., po: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control of the type most appropriate for the specified
    attribute, and associates the control with the attribute. Any change to the
    control will cause a change in the attribute value, and any change to the
    attribute value will be reflected in the control. Not all attribute types are
    supported.

    Args:
        ann: (create, edit, query) - Sets or queries the annotation value of the control group.
        a: (create, edit, query) - Sets or queries the attribute the control represents. The name of the attribute must be fully specified, including the name of the node. Some types of attributes are not supported, but most commonly used attribute types are.
        cc: (create, edit, query) - Sets or queries the change command of the control group. The change command will be executed when the control is used to change the value of the attribute.
        en: (create, edit, query) - Sets or queries the enable state of the control group. The control is dimmed if the enable state is set to false.
        ex: (create, edit, query) - Returns whether the specified object exists or not. Other flags are ignored.
        ha: (edit, query) - Returns true or false as to whether this command can create a control for the specified attribute. 			In query mode, this flag needs a value.
        hmb: (create, edit, query) - Force the map button to remain hidden for this control.
        l: (create, edit, query) - Sets or queries the label of the control group.
        po: (create, edit, query) - Sets or queries the prevent adjustment state of the control group. If true, the RMB menu for the control will not allow adjustments to be made.
    """
    ...


def attrEnumOptionMenu(*args, ann: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ei: Optional[Union[Tuple[int, str], bool]] = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates an enumerated attribute control. It is
    usually an option menu.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        at: (create, edit) - Attribute that the menu controls.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - The command string is executed when the value of the option menu changes.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ei: (create, multiuse) - Enumerated item and the corresponding string.  If this flag is not supplied when the control is created, then the command will try to read the values from the attribute.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The label text.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def attrEnumOptionMenuGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ei: Optional[Union[Tuple[int, str], bool]] = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label and option
    menu button associated with an attribute of a node. The attribute
    should be an integer, and this control allows a UI association of
    strings to the integers of the attribute. When a new menu item is
    choosen the corresponding integer will be assigned to the
    attribute. 
    
    This control will automatically read the enumeration values from
    the attribute if none are provided.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        at: (create, edit) - The name of an attribute.  The button will be attached to the attribute so the button can be kept in synch with the attribute.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ei: (create, multiuse) - Enumerated item and the corresponding string. If this flag is not supplied when the control is created, then the command will try to read the values from the attribute.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Text for the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def attrFieldGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., eb: bool = ..., ebc: Optional[Union[str, bool]] = ..., ebi: Optional[Union[str, bool]] = ..., el: Optional[Union[str, bool]] = ..., fmb: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hmb: bool = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., nf: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label text, plus two to
    four float fields.  These fields will be attached to the
    specified vector attribute, so that changes in either will be reflected
    in the other.
    
    The fields created here are expression fields -- while normally operating
    as a float field, the user can type in any expression starting with
    the character "-".
    
    The field also has an automatic menu brought up by the right mouse
    button.  The contents of this menu change depending on the state of
    the attribute being watched by the field.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        at: (create, edit, query) - The name of a unique attribute of type vector.  This newly created field will be attached to the attribute, so that modifications to one will change the other.  A "vector" attribute is any compound attribute whose children consist of two to four double-valued attributes.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - The command string is executed when the value of any of the floatFields change.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        eb: (create) - Add an extra icon button to the end of this control (before extra label).
        ebc: (create, edit) - The command string is executed when the extra button is clicked.
        ebi: (create, edit, query) - The icon file name of the extra button.
        el: (create, edit, query) - set an optional string that will be positioned to the right of all the fields.
        fmb: (create) - Force adding a map button to this control. If this option is true, option hideMapButton is suppressed.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hmb: (create) - Force the map button to remain hidden for this control.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever the user wants.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Sets the maximum value for all fields.
        min: (create, edit, query) - Sets the minimum value for all fields.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nf: (create) - sets the number of fields.  Only allowed values are 2 to 4.  If not specified, defaults to 3.  NOTE: if the -at flag is used when this widget is created, the number of children in the attribute will determine the number of fields.  Also note:  after creation, the number of fields cannot be changed with the -e flag.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit) - Sets the precision for all fields
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Sets the increment for all fields
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def attrFieldSliderGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., eb: bool = ..., ebc: Optional[Union[str, bool]] = ..., ebi: Optional[Union[str, bool]] = ..., fmx: Optional[Union[float, bool]] = ..., fmn: Optional[Union[float, bool]] = ..., fs: Optional[Union[float, bool]] = ..., fmb: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hmb: bool = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., smx: Optional[Union[float, bool]] = ..., smn: Optional[Union[float, bool]] = ..., ss: Optional[Union[float, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vr: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label text, float
    field and float slider (for values with a min or max specified)
    The group
    also supports the notion of a larger secondary range of possible
    field values.
    
    If an attribute is specified for this object, then it will use any
    min and max values defined in the attribute.  The user-specified
    values can reduce the min and max, but cannot expand them.
    
    The field created here
    is an expression field -- while normally operating
    as a float field, the user can type in any expression starting with
    the character "=".  This will expand the field to occupy the space
    previously taken by the slider.
    
    The field also has
    an automatic menu brought up by the right mouse button.
    The contents of this menu change depending on the state of
    the attribute being watched by the field.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        at: (create, edit, query) - The name of a unique attribute of type double or int. This newly created field will be attached to the attribute, so that modifications to one will change the other.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - The command string is executed when the value of the slider or floatField changes.  It will be executed only once after a drag of the slider.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        eb: (create) - Add an extra icon button to the end of this control.
        ebc: (create, edit) - The command string is executed when the extra button is clicked.
        ebi: (create, edit, query) - The icon file name of the extra button.
        fmx: (create, edit, query) - Set the maximum value for the field.  This flag allows you to specify a maximum bound for the field higher than that of the slider.   (See note above about max and min values.)
        fmn: (create, edit, query) - Set the minimum value for the field.  This flag allows you to specify a minimum bound for the field lower than that of the slider.  (See note above about max and min values.)
        fs: (create, edit, query) - Sets the increment for the float field.
        fmb: (create) - Force adding a map button to this control. If this option is true, option hideMapButton is suppressed.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hmb: (create) - Force the map button to remain hidden for this control.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - By default, the label of this field will be the name of the attribute.  This flag can be used to override that name with whatever string you want.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Sets the maximum value for both the slider and the field. (See note above about min and max values)
        min: (create, edit, query) - Sets the minimum value for both the slider and the field. (by default max and min are set according to what is in the attribute, if anything.  If no max and min are specified, or if only one of the two are specified, then no slider is created.)
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit) - Sets the number of digits to the right of the decimal. (If attached to an int attribute, this is automatically set to 0 and cannot be overridden.)
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        smx: (create, edit, query) - Set the maximum value for the slider.  The slider max will be clipped to the field max.
        smn: (create, edit, query) - Set the minimum value for the slider.  The slider min will be clipped to the field min.
        ss: (create, edit, query) - On Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Sets the increment for both the slider and float field.
        ut: (create) - Forces the command to use a command template other than the current one.
        vr: (create, query) - Whether the orientation of the controls in this group are horizontal (default) or vertical.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def attributeMenu(*args, beg: bool = ..., edt: Optional[Union[str, bool]] = ..., fsh: bool = ..., inp: bool = ..., p: Optional[Union[str, bool]] = ..., rpm: Optional[Union[str, bool]] = ..., upm: Optional[Union[int, bool]] = ...) -> Any:
    r"""
    Action to generate popup connection menus for Hypershade. This command is
    used internally by the Hypershade panel.

    Args:
        beg: (create) - If true the menu will be used to start a connection edit so it will list all available attributes for either inputs or outputs.  If false the menu will be used to complete a connection so it will list only the attributes compatible with the attribute at the other end of the connection.  A plug must be supplied in this case.
        edt: (create) - Name of the Hypergraph, Hypershade or Visor editor for which this menu is being built.  This argument is no longer mandatory. If it is omitted, the inputs flag and the node must be used to specify the search targets. This allows attributeMenu to be used in the absence of a hypershade editor.
        fsh: (create) - finishes the menu
        inp: (create) - If true only attributes which can be used as inputs will be listed.  If false only attributes which can be used as outputs will be listed
        p: (create) - If inputs is false then we are completing a connection and the name of the plug at the other end of the connection must be supplied.
        rpm: (create) - This flag will register a callback that allows the user to define their own popup menu for a specific node type for use in the Hypershade and Hypergraph editor. The command signature should look like this:  global proc int proc_name>(string $editorName, string $nodeName, string $plug, string $mode, string $menuType)  The method should return 0 if it does not recognize the node type and the default attributeMenu popup menu will be displayed. If the callback returns one then the menu is considered built and no other menuItems will be added to the popup. The return value from this flag will be the ID to use for the -unregPulldownMenuCommand flag.
        upm: (create) - This flag will unregister a callback procedure that was registered with the -regPulldownMenuCommand flag. The argument should be the integer identifier returned from the -regPulldownMenuCommand flag.
    """
    ...


def attrNavigationControlGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., attrNavDecision: Optional[Union[Tuple[str, str], bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cad: Optional[Union[str, bool]] = ..., cnd: Optional[Union[str, bool]] = ..., ce: Optional[Union[str, bool]] = ..., cn: Optional[Union[str, bool]] = ..., dtv: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., delete: Optional[Union[str, bool]] = ..., d: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., eb: bool = ..., ebc: Optional[Union[str, bool]] = ..., ebi: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., ins: bool = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., nim: bool = ..., nkm: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., ren: Optional[Union[str, bool]] = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., u: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged label
    navigation button.
    
    The group is used to help the user manage connections to
    a particular attribute.
    
    When creating the control you have the opportunity to attach
    scripts to the control that are executed on various
    UI events.  You can define what happens when the navigation
    button is pressed, and when a node is dragged and dropped
    onto this attribute.
    
    The navigation button can traverse to the connected node
    or can bring up UI to create new connections to the attribute.
    The button also can show you state information: if there
    already exists a connection/if the connection is ignored.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        attrNavDecision: (create, edit, query) - The first argument is the name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.  The second argument is the navigatorDecisionString that can guide the behaviour that the navigator implements.
        at: (create, edit, query) - The name of an attribute. The button will be attached to the attribute so the button can be kept in synch with the attribute.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        cad: (create, edit, query) - The script to execute when a node is dragged and dropped onto an attribute (multilister dnd attribute editor). Your script should take in two arguments: the source node and destination attribute respectively.
        cnd: (create, edit, query) - The script to execute when a node is dragged and dropped onto a node (the multilister issues this).  Your script should take in two arguments: the source node and destination node respectively.
        ce: (create, edit, query) - The script to execute when a connection should be made to an existing node.
        cn: (create, edit, query) - The script to execute when a new "connection" is requested.
        dtv: (create, edit, query) - The script to execute to find out the name of the default traversal node.  The script you attach should be able to take in one argument (the attribute) and return the name of the node that is the default traversal node.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        delete: (create, edit, query) - The script to execute when the connection (and the node connected to) should be deleted.
        d: (create, edit, query) - The script to execute when a "disconnection" is requested.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        eb: (create) - Add an extra icon button to the last of this control.
        ebc: (create, edit) - The command string is executed when the extra button is clicked.
        ebi: (create, edit, query) - The icon file name of the extra button.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i: (create, edit, query) - The script to execute when the connection should be ignored.
        ins: () - Obsolete flag; has no effect.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Text for the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nim: (create, edit) - Not show ignorable related popup menu when right click the label.
        nkm: (create, edit) - Not show keyable related popup menu when right click the label.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ren: (create, edit, query) - The script to execute to find out what the related nodes are.  The script you attach should be able to take in one argument (the attribute) and return a list of strings that are the name of the nodes that are related.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        u: (create, edit, query) - The script to execute when the connection should be unignored.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def autoPlace(*args, um: bool = ...) -> Any:
    r"""
    This command takes a point in the centre of the current
    modeling pane and projects it onto the live surface.
    This produces a point in 3 space which is returned.
    If the um/useMouse flag is set the current mouse position
    is used rather than the centre of the modeling pane.

    Args:
        um: (create) - Use the current mouse position rather than the centre of the active view.
    """
    ...


def button(*args, aop: bool = ..., ais: bool = ..., al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., c: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rs: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a button control capable of displaying a textual label and
    executing a command when selected by the user.

    Args:
        aop: (create, edit, query) - If true then the command specified by the command flag will be executed when a mouse button is pressed.  If false then that command will be executed after the mouse button is released. The default value is false.
        ais: (create, edit, query) - This flag is obsolete and should no longer be used.
        al: (create, edit, query) - This flag is obsolete and should no longer be used. The button label will always be center-aligned.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        c: (create, edit, query) - Command executed when the control is pressed.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The label text.  The default label is the name of the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rs: (create, edit, query) - If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def buttonManip(*args, i: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    This creates a button manipulator. This manipulator has a position in
    space and a triad manip for positioning. When you click on the top
    part of the manip, the command defined by the first argument is
    executed. The command is associated with the manipulator when it is
    created.
    
    If a dag object is included on the command line, the manip will be
    parented to the object. This means moving the object will move the
    manip. You can move the manip independently of the object using its
    triad.
    
    Note that a buttonManip may not be parented to more than one object.

    Args:
        i: (create) - Specify an icon to represent the manipulator.
    """
    ...


def callbacks(*args, ac: Optional[Union[str, bool]] = ..., cac: bool = ..., cc: bool = ..., dh: bool = ..., dc: bool = ..., ec: bool = ..., h: Optional[Union[str, bool]] = ..., lc: bool = ..., o: Optional[Union[str, bool]] = ..., rc: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    This command allows you to add callbacks at key times during UI creation so
    that the Maya UI can be extended.
    The list of standard Maya hooks, as well as the arguments which will be passed
    to the callback based on the context are enumerated in the describeHooks
    section below.
    Custom hooks can also be added if third parties want to add UI extensibility to
    their plugins.

    Args:
        ac: (create) - Add a callback for the specified hook. The owner must also be specified when adding callbacks.
        cac: (create) - Clear all the callbacks for all hooks and owners. This is generally only used during plugin development and testing as it affects all callbacks registered by Maya and other third parties.
        cc: (create) - Clear all the callbacks for the specified owner. If a hook is specified, only the callbacks for that hook and owner will be cleared.
        dh: (create) - List the standard Maya hooks. Below is a list of the hooks and their associated arguments and return values. Custom hooks added by third parties are not listed.   hyperShadePanelBuildCreateMenu  This hook is called to add content to the Hypershade panel create menu. It will be called after the standard Maya node entries have been created.  This callback does not have any arguments or return values. In order to preserve the desired look in the Maya UI, these callbacks should add a menu item divider just before returning using: menuItem -divider true.  hyperShadePanelBuildCreateSubMenu  This hook is called to get a classification string for the custom renderer shading nodes, to prevent them from being listed with the standard Maya nodes.  This callback does not have any arguments.  returns: a classification string, such as rendernode/myrenderer   hyperShadePanelPluginChange  This hook is called when a plugin change event (loading / unloading) has occurred to inform Maya whether the Hypershade panel needs to be rebuilt.  classification (string): classification string belonging to a plugin node,     possibly from another plugin changeType (string): either loadPlugin or unloadPlugin returns: (int) non-zero if your plugin is responsible for nodes of this classification,     and a Hypershade rebuild is required   createRenderNodeSelectNodeCategories  This hook is called when the Create Render Node dialog is being constructed, and allows a third party to have their nodes selected by default. A flag of the form -allWithMyRendererUp is the standard form, and the selection can be set up in the tree lister in the callback.  There is no return value for this callback.  flag (string): flag passed to the Create Render Node dialog command with the leading minus (-) removed treeLister (string): the tree lister widget which should be affected   For example, your callback might look like:   global proc myRendererCreateRenderNodeSelectNodeCategoriesCallback(string $flag, string $treeLister){     if($flag == "allWithMyRendererUp") {         treeLister -e -selectPath "myrenderer" $treeLister;     } }   createRenderNodePluginChange  This hook is called when a plugin change event has occurred to decide if the Create Render Node dialog needs to be closed.  classification (string): classification string belonging to a plugin node,     possibly from another plugin returns: (int) non-zero if your plugin is responsible for nodes of this classification,     and the Create Render Node dialog needs to be closed   renderNodeClassification  This hook is called to get a classification string for the custom renderer shading nodes.  This is used to determine if a given node type belongs to a plugin renderer.  This callback does not have any arguments.  returns: a classification string, such as rendernode/myrenderer   createRenderNodeCommand  This hook is called to give plugin renderers the chance to register their own command for creating their nodes from the render node treeLister and Node Editor. The callback should determine from the classification of the node type in question if it is theirs, and if so, return the appropriate command for creating new nodes of that type.   postCommand (string): command to be run after the create command type (string): nodeType returns: (string) MEL create command   buildRenderNodeTreeListerContent  This hook is called to give plugin renderers the chance to add their content to the render node tree lister.   renderNodeTreeLister (string): the render node tree lister postCommand (string): command to be run post-creation filterString (string): a space delimited list of filters   AETemplateCustomContent  This hook is called to give plugins a chance to add content to the Attribute Editor for nodes which source AEdependNodeTemplate.   nodeName (string): the name of the node for which the Attribute Editor is being constructed   firstConnectedShader  This hook is called to determine the primary custom shader connected to the given Shading Engine.   nodeName (string): the name of the Shading Engine returns (string): the name of the custom shader if applicable   allConnectedShaders  This hook is called to determine all the shaders connected to the given Shading Engine.   nodeName (string): the name of the Shading Engine returns (string): a colon separated list of the connected custom shaders (shader1:shader2:shader3)   renderLayerPresetMenu  This hook is called to give plugins a chance to add presets to a renderLayer node.   nodeName (string): the name of the renderLayer node   addBakingMenuItems  This hook is called to give plugins a chance to add baking menu items to the global Render - Lighting/Shading menu.   menuItemAnchor (string): the name of the menuItem which the new baking menu items should be inserted after.    addVertexBakingMenuItems  This hook is called to give plugins a chance to add baking menu items to the global Polygon - Color menu.   addPrelightMenuItems  This hook is called to give plugins a chance to add pre-lighting menu items to the global Polygon - Color Set Editor menu.   addRMBBakingMenuItems  This hook is called to give plugins a chance to add baking menu items to the RMB menu.   objectName (string): the name of the object the right mouse button event occured on.   addMayaRenderingPreferences  This hook is called to give plugins a chance to add custom preferences to the Maya's Rendering Preferences section.   updateMayaRenderingPreferences  This hook is called to give plugins a chance to update custom preferences of the Maya's Rendering Preferences section.   addMayaMuscleMenuItems  This hook is called to give plugins a chance to add menu items to the Maya muscle Displace menu.   menuItemAnchor (string): the name of the menuItem which the new Maya muscle menu items should be inserted after.    addMayaMuscleShelfButtons  This hook is called to give plugins a chance to add items to the Maya muscle shelves.   addBackburnerRendererMenuItems  This hook is called to give plugins a chance to add items to Maya's Backburner list of available renderers. Note: The menuItem added must be named with the short name equivalent of the renderer. eg: The Maya software renderer adds a menuItem named 'sw'.   provideAETemplateForNodeType  This hook is called to give plugins a chance to provide a UI template for nodes which do not have a corresponding AE'nodeType'Template procedure.   nodeType (string): the type of the node for which the AE is being constructed.  returns (string): the name of a MEL command or procedure to use as the AETemplate for the requested node type.    AEnewMultiHandler  This hook is called to give plugins a chance to provide a UI creation handler for multi attributes.   nodeName (string): the name of the node for which the AE is being constructed.  atributeName (string): the name of the multi attribute. uiName (string): the UI name of the attribute. changedCommand (string): the MEL command or procedure to be executed when the value of the multi attribute is changed. elementIndexString (string): a colon separated list of indices at which the elements of the multi attribute live. returns (string): if the callback handled the attribute then it should return the full name of the topmost UI element that it created, otherwise it should return an empty string.   AEreplaceMultiHandler  This hook is called to give plugins a chance to provide an update handler for multi attributes.   layoutName (string): the well defined name of the Maya UI component which represents the multi attribute (. nodeName (string): the name of the node for which the AE is being constructed.  atributeName (string): the name of the multi attribute. changedCommand (string): the MEL command or procedure to be executed when the value of the multi attribute is changed. elementIndexString (string): a colon separated list of indices at which the elements of the multi attribute live. returns (int): Return 1 if the callback handled the multi attribute, Return 0 if Maya should provide its default handling.   AEnewAttributeHandler  This hook is called to give plugins a chance to provide a UI creation handler for attributes.   nodeName (string): the name of the node for which the AE is being constructed.  atributeName (string): the name of the attribute. uiName (string): the UI name of the attribute. changedCommand (string): the MEL command or procedure to be executed when the value of the attribute is changed. returns (string): if the callback handled the attribute then it should return the full name of the topmost UI element that it created, otherwise it should return an empty string.   AEreplaceAttributeHandler  This hook is called to give plugins a chance to provide an update handler for attributes.   nodeName (string): the name of the node for which the AE is being constructed.  atributeName (string): the name of the attribute. changedCommand (string): the MEL command or procedure to be executed when the value of the attribute is changed. returns (int): Return 1 if the callback handled the attribute, Return 0 if Maya should provide its default handling.   provideClassificationStrings  This hook must be supplied by all third parties that add nodes to the 'shader/surface' classification namespace.   returns (string): a colon separated list representing the different plugin node classifications.   provideClassificationExclusionStrings  This hook is called to give plugins a chance to provide a list of classifications which should be filtered out from a nodeTreeLister category. For example a plugin might want to filter out nodes classified as both 'material' and 'legacy' out of the 'material' category.   classification (string): the classification the nodeTreeBuilder is inquiring about. returns (string): a colon separated list representing the different classifications that should be excluded from the classification the nodeTreeBuilder is inquiring about.   provideClassificationStringsForFilteredTreeLister  This hook is called by 'createAssignNewMaterialTreeLister' and gives plugins a chance to append to the classification filter passed to the Tree Lister builder. It must return a string where each new classification is separated by a white space.   currentFilterString (string): a white-space-separated string representing the current classifications.   nodeCanBeUsedAsMaterial  The hook is used by the RMB 'Assign Favorite Material' menu to determine which shading nodes can be used as materials. It must return 1 if the node can be used as a material node and 0 otherwise.   nodeId (string): the node Id of the shading node being queried. nodeOwner (string): the name of the plugin the node belongs to.   addHeaderContentToMayaLambertianShadersAE  This hook is called to give plugins a chance to add content to the header of the Attribute Editor of Maya's Lambertian-​derived shaders.   nodeName (string): the name of the node for which the Attribute Editor is being constructed.   provideNodeToAttrConnection  This hook is called to give plugins a chance to provide which output attribute should be used when a node is connected to an input attribute. If an input attribute type is given an output attribute of matching type should be returned. If no attribute type is specified (empty string) a preferred output attribute of any type can be returned. If no output attribute of matching type is available an empty string should be returned.   nodeType (string): the node type of the node queried. attributeType (string): the data type of the input attribute. returns (string): the name of the output attribute to use.   provideNodeToNodeConnection  This hook is called to give plugins a chance to provide which attributes should be connected when a node to node connection is made. Both the source and destination attributes should be returned in a colon separated list, e.g. "src1:dst1:src2:dst2:src3:dst3"   srcType (string): the node type of the source node. dstType (string): the node type of the destination node. returns (string): A colon separated list of source and destination attribute names.   provideOutputAttributeNameForTextureNode  This hook is called to give plugins a chance to provide a different output attribute name for Texture nodes. If this hook isn't provided 'outColor' is used.   nodeName (string): the name of the texture node queried. returns (string): the output attribute name of the Texture node.   addItemsToHypergraphNodePopupMenu  This hook is called to give plugins a chance to add items to the Hypergraph node popup menu. Plugins should add a menu item divider (using: menuItem -divider true) before adding any more items to the popup menu.   nodeName (string): the name of the node for which the Hypergraph node menu is being constructed.   addItemsToOutlinerNodePopupMenu  This hook is called to give plugins a chance to add items to the Outliner node popup menu. Plugins should add a menu item divider (using: menuItem -divider true) before adding any more items to the popup menu.   nodeName (string): the name of the node or Ufe path string for which the Outliner node menu is being constructed.   addItemsToRenderLayerEditorPopupMenu  This hook is called to give plugins a chance to add items to the Render Layer Editor popup menu. Plugins should add a menu item divider (using: menuItem -divider true) before adding any more items to the popup menu.   layerName (string): the name of the render layer for which the popup menu is being constructed.   preventMaterialDeletionFromCleanUpSceneCommand  This hook is called by the cleanUpScene command and gives the plugin a chance to communicate that a material node is still in use and shouldn't be deleted. The hook is called once per plug/connection pair of each shader instance.   shader (string): the name of the shader node being deleted. plug (string): the name of the plug queried. connection (string): the name of the connection queried.   connectNodeToNodeOverrideCallback  This hook is called to give plugins a chance to redefine the behavior of drag and drop.   srcNode (string): the name of the source node (the dragged node). dstNode (string): the name of the destination node (the dropped-on node). returns (int): Return 1 if Maya should perform the operation that would normally result from this connection. Return 0 to override and provide custom behavior.   prepareRenderChanged  This hook is called after an edit on a traversal set with the prepareRender command.   enableRenderPassMenuOfRenderView  This hook is called to give plugins a chance to tell Maya it should enable the render pass menu of the render view (under File->Load Render Pass). 'addRenderPassMenuItemsToRenderView' can be used to add items to this menu.   returns (int): Return 1 if the plugin wants the render pass menu of the render view to be enabled. Return 0 otherwise.   addItemsToRenderPassMenuOfRenderView  This hook is called to give plugins a chance to add menu items to the 'render pass' menu of the render view (under File->Load Render Pass). 'enableRenderPassMenuOfRenderView' can be used to enable the render pass menu of the render view.   addItemsToRMBMenuOfTreeLister  This hook is called to give plugins a chance to populate the RMB menu of nodes listed in a tree lister. Plugins should add a menu item divider (using: menuItem -divider true) before adding any more items to the RMB menu.   nodeType (string): The node type of the tree lister node for which the RMB menu is being built. scriptCommand (string): The script command associated with the tree lister node for which the RMB menu is being built. returns (int): Return 0 if Maya should append its own items to the menu of the current node type. This should be the return value for all node types a plugin isn't explicitly interested in. Return 1 if Maya shouldn't add any of its items to the menu of the current node type. Note: All menu items related to managing the 'Favorites' section of the tree lister will always be added to the RMB menu regardless of the return value (those are treated as special cases).   saveCustomNodePresetAttributes  This hook is called to give plugins a chance to store extra commands in the node preset file being saved.   presetNodeToSave (string): The name of the preset node being saved. returns (string): The custom procedure to use to generate the mel script to be appended to the nodePreset -custom flag of the current presetNode save event (see the documentation of the nodePreset command for more information on the format of the -custom flag).   addItemToFileMenu  This hook is called to give plugins a chance to add menu items to the main File menu.   addItemToCreateLightMenu  This hook is called to give plugins a chance to add menu items to the create light menu.  textureReload  This hook is called to give plugins a chance to update all nodes that reference the texture file.   file (string): the file path of the texture to reload.   renderSettingsBuilt  This hook is called after the render settings window has been built.  rendererAddOneTabToGlobalsWindowCreateProc  This hook is called to allow renderers the opportunity to add renderer specific tabs to the unified render globals window (render settings window).   createProc (string): the name of the procedure used to create the content of the tab.    shouldEarlyReturnFromUpdateMultiCameraBufferNamingMenu  This hook is called to allow users to early return from the updateMultiCameraBufferNamingMenu() function by returning "true" in the callback handler.   returns (string): Returns "true" if the caller wishes to early return from the updateMultiCameraBufferNamingMenu() function.   shouldEarlyReturnFromUpdateMayaSoftwareImageFormatControl  This hook is called to allow users to early return from the updateMayaSoftwareImageFormatControl() function by returning "true" in the callback handler.   returns (string): Returns "true" if the caller wishes to early return from the updateMayaSoftwareImageFormatControl() function.   shouldEarlyReturnFromUpdateDefaultTraversalSetMenu  This hook is called to allow users to early return from the updateDefaultTraversalSetMenu() function by returning "true" in the callback handler.   returns (string): Returns "true" if the caller wishes to early return from the updateDefaultTraversalSetMenu() function.   shouldEarlyReturnFromShouldAppearInNodeCreateUI  This hook is called to allow users to early return from the shouldAppearInNodeCreateUI() function by returning "true" in the callback handler.   returns (string): Returns "true" if the caller wishes to early return from the shouldAppearInNodeCreateUI() function.   updateAE  This hook is called at the end of the updateAE() function.
        dc: (create) - Gives a list of all the registered callbacks for all hooks and owners. Can be useful for debugging.
        ec: (create) - Execute the callbacks for the specified hook, passing the extra arguments to each callback when it is executed.  Returns an array (MEL) or list (Python) containing the return values from each callback that was executed. If a callback returns no value, the array will contain an empty string (MEL) or None (Python).
        h: (create) - The name of the hook for which the callback should be registered.
        lc: (create) - Get the list of callbacks for the specified hook name. If the owner is specified, only callbacks for the specified hook and owner will be listed.
        o: (create) - The name of the owner registering the callback. This is typically a plugin name.
        rc: (create) - Remove an existing callback for the specified hook name. The owner must also be specified when removing a callback.
    """
    ...


def canCreateCaddyManip(*args) -> Any:
    r"""
    This command returns true if there can be a manipulator made for
    the specified selection, false otherwise.

    Args:
    """
    ...


def canvas(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hsv: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pc: Optional[Union[str, bool]] = ..., po: bool = ..., rgb: Optional[Union[Tuple[float, float, float], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Creates a control capable of displaying a color swatch. This control can
    also accept a command to be called when the colour swatch is pressed by
    the user.
    
    Note: The -dgc/dragCallback and -dpc/dropCallback are not available
    for this control.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hsv: (create, edit, query) - Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0 to 360.0 and the saturation and value components range from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pc: (create, edit) - Command to be executed when there is a mouse press.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rgb: (create, edit, query) - Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def channelBox(*args, ann: Optional[Union[str, bool]] = ..., bc: Optional[Union[Tuple[float, float, float], bool]] = ..., ac: Optional[Union[Tuple[float, float, float], bool]] = ..., af: Optional[Union[str, bool]] = ..., ar: Optional[Union[str, bool]] = ..., aem: bool = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cat: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., els: bool = ..., exe: Tuple[str, bool] = ..., ex: bool = ..., fw: Optional[Union[int, bool]] = ..., fal: Optional[Union[List[str], bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hol: bool = ..., hyp: bool = ..., inputs: bool = ..., io: bool = ..., lw: Optional[Union[int, bool]] = ..., ln: bool = ..., mlc: Optional[Union[str, bool]] = ..., mol: bool = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., nn: bool = ..., nbg: bool = ..., nr: Optional[Union[str, bool]] = ..., npm: bool = ..., ool: bool = ..., out: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rbc: Optional[Union[str, bool]] = ..., s: str = ..., sha: bool = ..., sma: bool = ..., soa: bool = ..., ssa: bool = ..., sol: bool = ..., shp: bool = ..., sn: bool = ..., st: bool = ..., spd: Optional[Union[float, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., tf: bool = ..., ual: Optional[Union[Tuple[str, List[str]], bool]] = ..., u: bool = ..., mnp: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a channel box, which is sensitive to the active
    list.  It displays certain attributes (channels) of the last node on
    the active list, and provides a two-way connection to keep the widget
    up to date.
    
    Note: when setting the color of attribute names, that color is only valid
    for its current Maya session; each subsequent session will display the default
    color for the attribute name(s) listed in the Channel Box. Any subsequent
    attributes that are added to the Channel Box will be affected by prior
    regular expressions in their current Maya session.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bc: (create, edit, query) - Controls the background text color of specific attribute names. As with the foreground option, this text coloring also depends on the node name choice for the nodeRegex flag. Arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of "*" for a regular expression. The same idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed will have their node name coloring be affected in the channel box.
        ac: (create, edit, query) - Controls the foreground text color of specific attribute names. This text coloring also depends on the node name choice for the nodeRegex flag. Arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. If attrRegex is unspecified then it will assume a value of "*" for a regular expression. The same idea simultaneously applies to the flag nodeRegex. Note: nodes that are renamed will have their node name coloring be affected in the channel box.
        af: (edit, query) - Specifies the name of an itemFilter object to be placed on the channel box. This filters the attributes displayed. A filter of "0" can be used to reset the filter.
        ar: (create, edit, query) - Specifies a valid regular expression to specify which attribute names should be selected for foreground text coloring. If attrRegex is unspecified then it will assume a value of "*" for a regular expression. The same idea simultaneously applies to the flag nodeRegex. The attrColor flag is required to be specified. Note: this regular expression will be treated as though it were case-insensitve
        aem: (edit, query) - Modifies what appears in the channel box for use in the attribute editor. Default is false. Queried, returns a boolean.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cat: (edit, query) - This flag can be used to specify whether or not the container is drawn at the top of the channel box when a node in the container is selected.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        els: (edit, query) - Enables the selection of attributes in the channelBox when used in conjunction with -attributeEditorMode. Default is false.  Queried, returns a boolean.
        exe: (edit) - Immediately executes the command string once for every cell (or every selected cell, if the boolean argument is TRUE) in the channel box, for every matching selected object (ie, for every object would be affected if you changed a cell value.)  Before the command is executed, "#A" is substituted with the name of the attribute, and "#N" with the name of the node, and "#P" with the full path name of the node.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fw: (edit, query) - An optional flag which is used to modify the width assigned to fields appearing in the channelBox.
        fal: (create, edit, query) - Forces the channel box to only display attributes with the specified names, in the order they are specified.  If an empty list is specified, then the channel box will revert to its default behaviour of listing all keyable attributes.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hol: (query) - Returns a list of strings, the names of every INPUT node associated with an object on the main object list that is of the same type as the node displayed in the INPUT section of the channel box.
        hyp: (create, edit, query) - Determines whether or not the distance that the mouse has been dragged should be interpreted as a linear or hyperbolic function.  The default is set to hyperbolic being false.
        inputs: (query) - Returns the items shown under the 'INPUTS' heading in the channel box.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        lw: (edit, query) - An optional flag which is used to modify the width assigned to labels appearing in the channelBox.
        ln: (edit, query) - Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object which the editor will use as its source of content.  The channel box will only display the (last) item contained in the selectionConnection object. If a NULL string ("") is specified, then the channel box will revert to its default behaviour of working on the active list.
        mol: (query) - Returns a list of strings, the names of every object on the active list that is the same type as the object displayed in the top (main) section of the channel box.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (edit, query) - An optional flag which is used to limit the height of the channelBox.
        mw: (edit, query) - An optional flag which is used to limit the width of the channelBox.
        nn: (edit, query) - Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nr: (create, edit, query) - Specifies a valid regular expression to specify which node names should (potentially) have their attributes selected for foreground text coloring. If nodeRegex is unspecified then it will assume a value of "*' for a regular expression. The same idea simultaneously applies to the flag attrRegex. The attrColor flag is required to be specified. Note: this regular expression will be treated as though it were case-insensitve Note: nodes in namespaces have regular expressions applied as though those nodes weren't in namespaces
        npm: (query) - Return the number of popup menus attached to this control.
        ool: (query) - Returns a list of strings, the names of every OUTPUT node associated an object on the main object list that is of the same type as the node displayed in the OUTPUT section of the channel box.
        out: (query) - Returns the items shown under the 'OUTPUTS' heading in the channel box.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (edit, query) - Controls the number of digits to the right of the decimal point that will be displayed for float-valued channels. Default is 3.  Queried, returns an int.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rbc: (create, edit, query) - Command that gets executed when the channel box is rebuilt, e.g. when a new object is selected.
        s: (edit, multiuse) - Allows programmatic selection of items (nodes or plugs) in the channel box. Selection is equivalent to clicking the item with the mouse; therefore only items currently shown in the channel box can be selected this way.
        sha: (query) - Returns a list of strings, the names of all the selected attributes in the INPUT section of the channel box.
        sma: (query) - Returns a list of strings, the names of all the selected attributes in the top section of the channel box.
        soa: (query) - Returns a list of strings, the names of all the selected attributes in the OUTPUT section of the channel box.
        ssa: (query) - Returns a list of strings, the names of all the selected attributes in the middle (shape) section of the channel box.
        sol: (query) - Returns a list of strings, the names of every shape associated with an object on the main object list that is of the same type as the object displayed in the middle (shape) section of the channel box.
        shp: (query) - Returns the items shown under the 'SHAPES' heading in the channel box.
        sn: (create, edit, query) - Controls whether or not the namespace of an object is displayed if the object is not in the root namespace.
        st: (edit, query) - Controls whether this control will display transform attributes only, or all other attributes. False by default. Queried, returns a boolean.
        spd: (create, edit, query) - Controls the speed at which the attributes are changed based on the distance the mouse has been dragged.  Common settings for slow/medium/fast are 0.1/1.0/10.0 respectively.  The default is 1.0.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        tf: (edit) - causes the channel box to take over the keyboard focus, if it can.
        ual: (create, edit, query) - Forces the channel box to only display attributes for the given UFE runtime with the specified names, in the order they are specified. The attribute list accepts wildcard ('?' for one char, '*' for many) and will use pattern matching for finding attributes to display. If an empty list is specified, then the channel box will display no attributes for the given UFE runtime (since there is no keyable attribute concept in UFE).       In query mode, this flag can accept a value.
        u: (edit) - This flag can be used to force an update of the channel box display, for example after changing a display preference.
        mnp: (create, edit, query) - When you click on a field or label in the channel box, the tool switches to a manipulator that can change that value if you drag in the 3d view.  This flag controls the kind of manips.  Allowed values are "none" (self-explanatory), "invisible" (you won't see anything, but dragging in the window will adjust any of the selected attributes), and "standard" (the same as invisible, except for scale, rotate, and translate, which will be represented by their usual manips.)
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def checkBox(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., ofc: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rs: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a check box.  A check box is a simple control
    containing a text label and a state of either on or off.  Commands
    can be attached to any or all of the following events:  when the
    check box is turned on, turned off, or simply when it's state is
    changed.

    Args:
        al: (create, edit, query) - This flag is obsolete and should no longer be used. The check box label will always be left-aligned.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit, query) - Command executed when the check box's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the check box from inside the callback, or use onCommand and offCommand as separate callbacks.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the check box.  By default, this flag is set to true and the check box value may be changed by clicking on it.  If false then the check box is 'read only' and can not be clicked on. The value of the check box can always be changed with the -v/value flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The label text. The default label is the name of the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ofc: (create, edit, query) - Command executed when the check box is turned off.
        onc: (create, edit, query) - Command executed when the check box is turned on.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rs: (create, edit, query) - If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - State of the check box.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def checkBoxGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cc1: Optional[Union[str, bool]] = ..., cc2: Optional[Union[str, bool]] = ..., cc3: Optional[Union[str, bool]] = ..., cc4: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., en1: bool = ..., en2: bool = ..., en3: bool = ..., en4: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., l1: Optional[Union[str, bool]] = ..., l2: Optional[Union[str, bool]] = ..., l3: Optional[Union[str, bool]] = ..., l4: Optional[Union[str, bool]] = ..., la2: Optional[Union[Tuple[str, str], bool]] = ..., la3: Optional[Union[Tuple[str, str, str], bool]] = ..., la4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., m: bool = ..., nbg: bool = ..., ncb: Optional[Union[int, bool]] = ..., npm: bool = ..., ofc: Optional[Union[str, bool]] = ..., of1: Optional[Union[str, bool]] = ..., of2: Optional[Union[str, bool]] = ..., of3: Optional[Union[str, bool]] = ..., of4: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., on1: Optional[Union[str, bool]] = ..., on2: Optional[Union[str, bool]] = ..., on3: Optional[Union[str, bool]] = ..., on4: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v1: bool = ..., v2: bool = ..., v3: bool = ..., v4: bool = ..., va2: Optional[Union[Tuple[bool, bool], bool]] = ..., va3: Optional[Union[Tuple[bool, bool, bool], bool]] = ..., va4: Optional[Union[Tuple[bool, bool, bool, bool], bool]] = ..., vr: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates from one to four check boxes in a single row.
    They can have an optional text label.
    
    TelfBaseGrpCmd.cpp

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the group changes state. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of a check box from inside the callback, or use onCommand and offCommand as separate callbacks.
        cc1: (create, edit) - 
        cc2: (create, edit) - 
        cc3: (create, edit) - 
        cc4: (create, edit) - Specify a changed state command for each respective check box.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the group.  By default, this flag is set to true and the check box values may be changed by clicking on them.  If false then the check boxes are 'read only' and can not be clicked on. The value of the check boxes can always be changed with the -v/value flags regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        en1: (create, edit, query) - 
        en2: (create, edit, query) - 
        en3: (create, edit, query) - 
        en4: (create, edit, query) - Enable state of the individual check boxes.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - When present on creation an optional text label will be built with the group.  The string specifes the label text.
        l1: (create, edit, query) - 
        l2: (create, edit, query) - 
        l3: (create, edit, query) - 
        l4: (create, edit, query) - Specify label strings for the respective check boxes in the group.
        la2: (create, edit, query) - 
        la3: (create, edit, query) - 
        la4: (create, edit, query) - Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        ncb: (create) - Number of check boxes in the group (1 - 4).
        npm: (query) - Return the number of popup menus attached to this control.
        ofc: (create, edit) - Command executed when any check box turns off.
        of1: (create, edit) - 
        of2: (create, edit) - 
        of3: (create, edit) - 
        of4: (create, edit) - Off command for each respective check box.
        onc: (create, edit) - Command executed when any check box turns on.
        on1: (create, edit) - 
        on2: (create, edit) - 
        on3: (create, edit) - 
        on4: (create, edit) - On command for each respective check box.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v1: (create, edit, query) - 
        v2: (create, edit, query) - 
        v3: (create, edit, query) - 
        v4: (create, edit, query) - Values for the respective check boxes in the group.
        va2: (create, edit, query) - 
        va3: (create, edit, query) - 
        va4: (create, edit, query) - Specifies multiple values in a single flag.  These flags are ignored if the number of check boxes doesn't match.
        vr: (create, query) - Whether the orientation of the checkbox controls in this group are horizontal (default) or vertical.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def cmdScrollFieldExecuter(*args, ann: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., acb: bool = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., clr: bool = ..., cco: bool = ..., cp: bool = ..., cl: Optional[Union[int, bool]] = ..., ct: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., exc: bool = ..., exa: bool = ..., ex: bool = ..., fcc: Optional[Union[str, bool]] = ..., fn: bool = ..., fkp: Optional[Union[str, bool]] = ..., fpn: bool = ..., hf: bool = ..., hsl: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., it: Optional[Union[str, bool]] = ..., io: bool = ..., ld: bool = ..., ldc: Optional[Union[str, bool]] = ..., ldf: Optional[Union[str, bool]] = ..., m: bool = ..., mcc: Optional[Union[str, bool]] = ..., mod: bool = ..., nbg: bool = ..., nl: Optional[Union[int, bool]] = ..., npm: bool = ..., opc: bool = ..., p: Optional[Union[str, bool]] = ..., pst: bool = ..., pma: bool = ..., po: bool = ..., rd: bool = ..., rsc: Optional[Union[str, bool]] = ..., rpa: Optional[Union[Tuple[str, str], bool]] = ..., svf: Optional[Union[str, bool]] = ..., sv: Optional[Union[str, bool]] = ..., svs: bool = ..., sas: bool = ..., sd: bool = ..., smc: bool = ..., ss: Optional[Union[str, bool]] = ..., sw: bool = ..., sl: Optional[Union[Tuple[int, int], bool]] = ..., sla: bool = ..., slt: bool = ..., sln: bool = ..., sts: bool = ..., sth: bool = ..., src: bool = ..., st: Optional[Union[str, bool]] = ..., spt: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., stc: Optional[Union[str, bool]] = ..., tfi: bool = ..., t: Optional[Union[str, bool]] = ..., tl: bool = ..., ud: bool = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    A script editor executer control used to issue script commands to
    Maya.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        at: (create, edit) - Appends text to the end of this field.
        acb: (create, edit, query) - Specifies whether a closing brace should automatically be added when hitting enter after an opening brace. (default on)
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        clr: (create, edit) - Clears the field.
        cco: (create, edit, query) - Enable/disable command completion
        cp: (create, edit) - Copies the current selection from this field.
        cl: (create, edit, query) - Sets/returns the current line which the cursor is on.
        ct: (create, edit) - Cuts the current selection from this field.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        exc: (create, edit) - Executes the current selection.  If there is no selection, all text is executed.
        exa: (create, edit) - Executes all text.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fcc: (create, edit) - Only valid when this field contains a file. Sets a script which will be called whenever the file is externally modified, renamed or removed from disk. In MEL, the function should have the following signature:  proc fileChanged(string $file)
        fn: (query) - Returns the full path + filename of the script which was either loaded or saved. If there isn't one returns an empty string.
        fkp: (create, edit, query) - Sets a script which will be called to handle key-press events. The function should have the following signature:  proc int filterKeyPress(int $modifiers, string $key)  modifiers: a bit mask where Shift is bit 1, Ctrl is bit 3, Alt is bit 4, and bit 5 is the 'Windows' key on Windows keyboards and the Command key on Mac keyboards.  key: Specifies what key was pressed. The key is either a single ascii character or one of the keyword strings for the special keyboard characters. For example: Up, Down, Right, Left, Home, End, Page_Up, Page_Down, Insert Return, Space F1 to F12  The function should return 1 to indicate that they key event has been handled, and 0 to indicate that it has not been handled.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        hf: (query) - Whether this control is currently in focus.
        hsl: (query) - Whether this control currently has a selection or not.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        it: (create, edit) - Inserts the specified text into the position under the cursor, replacing any currently selected text. The selection and cursor position can be set using the select flag. Appends text to the end of this field.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        ld: (create, edit) - Prompts the user for a script to load into this field.  The loaded filename becomes associated with this executer field and saving will save directly to the file.
        ldc: (create, edit) - Loads the contents of the specified filename into this field.  The path and extension for this filename is provided internally.  This command is only intended for loading the contents of this executer field from a previous instance of this executer field.
        ldf: (create, edit) - If the provided string is a fully specified file path, then attempts to load the file contents into this field.  If the string is empty or not valid then prompts the user for a script to load into this field.  In both cases the filename becomes associated with this executer field and saving will save directly to the file.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mcc: (create, edit) - Sets a script which will be called whenever the content of this field changes in a way that affects the modification state. In MEL, the function should have the following signature:  proc modificationChanged(int $m)  If $m is true, the field has been modified; otherwise it is false.
        mod: (edit, query) - Sets or returns whether the field has been modified.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nl: (query) - Returns the total number of lines in the document.
        npm: (query) - Return the number of popup menus attached to this control.
        opc: (create, edit, query) - Enable/disable path completion
        p: (create, query) - The parent layout for this control.
        pst: (create, edit) - Pastes text into this field at the current caret position.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rd: (create, edit) - Redo the last operation.
        rsc: (create, edit) - Removes the stored contents of this field with the specified filename.  The path and extension for the file is provided internally.  This command is only intended for removing previously stored contents of this executer field.
        rpa: (create, edit) - Replaces all instances of the first string in the field text with the second string.  The case sensitivity of this operation is set with the -searchMatchCase flag.
        svf: (create, edit) - Saves the entire script contents of this field directly to the specified file path.
        sv: (create, edit) - Prompts to save the current selection to a file.  The default filename prompt will be prepended with the given string.
        svs: (create, edit) - Prompts to save the current selection to an item in the shelf.
        sas: (query) - Searches for (and selects) the specified search string using the specified search options.
        sd: (create, edit, query) - Specifies whether to search from the cursor down, or up.
        smc: (create, edit, query) - Specifies whether the search is to be case sensitive or not.
        ss: (create, edit, query) - Specifies the string to search for.
        sw: (create, edit, query) - Specifies whether the search should wrap around.
        sl: (create, edit) - Selects text within a specified range.
        sla: (create, edit) - Selects all text.
        slt: (query) - The text in the current selection range.
        sln: (create, edit, query) - Shows/hides the line numbes column.
        sts: (create, edit, query) - Visually show tab and space indicators. (default off)
        sth: (create, edit, query) - Enable/disable tooltips in the command execution window
        src: (create, edit) - Prompts the user for a script to source (execute without loading).
        st: (create, query) - Sets the source type for this command executer field. Valid values are "mel" (enabled by default) and "python".
        spt: (create, edit, query) - Specifies the number of spaces equivalent to one tab stop. (default 4)
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        stc: (create, edit) - If the provided string is a fully specified file path, then attempts to store the contents of this field to that path. Otherwise, uses the provided string as a filename only and uses an internally generated path and extension for the file, as used by the -loadContents and -removeStoredContents flags. In both cases, a new unique filename will be generated if the specified name exists. Returns the filename of the file saved upon completion, and an empty string otherwise.
        tfi: (create, edit, query) - Specifies whether tab characters should be inserted when indenting. (default on)
        t: (create, edit, query) - Replaces the field text with the given string.
        tl: (query) - The number of characters in this text field.
        ud: (create, edit) - Undo the last operation.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def cmdScrollFieldReporter(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., clr: bool = ..., cp: bool = ..., ct: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., eac: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fst: Optional[Union[str, bool]] = ..., fpn: bool = ..., hf: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., ln: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pst: bool = ..., pma: bool = ..., po: bool = ..., rfc: Optional[Union[str, bool]] = ..., sv: Optional[Union[str, bool]] = ..., svs: bool = ..., sl: Optional[Union[Tuple[int, int], bool]] = ..., sla: bool = ..., st: bool = ..., sbm: Optional[Union[str, bool]] = ..., se: bool = ..., si: bool = ..., sr: bool = ..., sst: bool = ..., sw: bool = ..., t: Optional[Union[str, bool]] = ..., tl: bool = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    A script editor reporter control used to receive and display the history of processed commmands.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        clr: (create, edit) - Clears the field.
        cp: (create, edit) - Copies the current selection from this field.
        ct: (create, edit) - Cuts the current selection from this field.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        eac: (create, edit, query) - Echo all commands.    (Global parameter, affects all command reporters)
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fst: (create, edit, query) - Filters the specified source type from showing in this command reporter. Currently supports either "mel", "python", or "" (default). Setting the filter to the empty string ("") will remove all filtering and show both "mel" and "python" results.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        hf: (query) - Whether this control is currently in focus.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        ln: (create, edit, query) - Show line numbers (in Error/Warning messages).    (Global parameter, affects all command reporters)
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pst: (create, edit) - Pastes text into this field at the current caret position.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rfc: (create, edit) - Command executed when the field receives focus.
        sv: (create, edit) - Prompts to save the current selection to a file. The default filename prompt will be prepended with the given string.
        svs: (create, edit) - Prompts to save the current selection to an item in the shelf.
        sl: (create, edit) - Selects text within a specified range.
        sla: (create, edit) - Selects all text.
        st: (create, edit, query) - Show stack trace.    (Global parameter, affects all command reporters)
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        se: (create, edit, query) - Suppress errors.
        si: (create, edit, query) - Suppress info.
        sr: (create, edit, query) - Suppress results.
        sst: (create, edit, query) - Suppress stack trace.
        sw: (create, edit, query) - Suppress warnings.
        t: (create, edit, query) - Replaces the field text with the given string.
        tl: (query) - The number of characters in this text field.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def cmdShell(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cl: bool = ..., c: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., nhl: Optional[Union[int, bool]] = ..., npm: bool = ..., nsl: Optional[Union[int, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., pr: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a scrolling field that behaves similar to
    a unix shell for entering user input.  You may specify the number
    of lines that will be remembered by the field with
    the -nsl/numberOfSavedLines flag.  The default number of lines saved
    is 100.  The shellField also maintains a command history buffer.
    You can specify the number of input lines that will be saved with
    the -hlc/historyLineCount flag.  The default size of this buffer is 10.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cl: (create) - Erases all visible text, and also deletes any text that had scrolled of the top of the field.  After clearing the field it will be blank, and you will not be able to scroll up to see previous lines.  This flag does not affect the command history buffer, however.
        c: (create, edit, query) - Command executed when the contents change.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nhl: (create, edit, query) - The number of input lines to be saved in the command history buffer.  You can cycle through this buffer by pressing the up and down arrow keys.  Valid values are 0 through 32767.  Any value less than 0 will be handled as if 0 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.
        npm: (query) - Return the number of popup menus attached to this control.
        nsl: (create, edit, query) - The total number of lines (the scrolled lines and currently visible lines) that will be remembered by the field. Any lines beyond this number will be lost, and the user will not be able to review them by scrolling.  Valid values are 1 through 32767.  Any value less than 1 will be handled as if 1 was specified.  Similarly, any value greater than 32767 will be handled as if 32767 was specified.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        pr: (create, edit, query) - The text that is used as a prompt.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def colorEditor(*args, a: Optional[Union[float, bool]] = ..., hsv: Optional[Union[Tuple[float, float, float], bool]] = ..., m: bool = ..., p: Optional[Union[str, bool]] = ..., pos: Optional[Union[Tuple[int, int], bool]] = ..., r: bool = ..., rgb: Optional[Union[Tuple[float, float, float], bool]] = ..., query: bool = ...) -> Any:
    r"""
    The colorEditor command displays a modal dialog that may be used
    to specify colors in RGB or HSV. The default behaviour
    when no arguments are specified is to provide an initial color of
    black (rgb 0.0 0.0 0.0).
    
    The command will return the user's color component values along with a
    boolean to indicate whether the dialog was dismissed by pressing
    the "OK" button.  As an alternative to responding to
    the colorEditor command's return string you can now query
    the -rgb/rgbValue, -hsv/hsvValue, and -r/result
    flags to get the same information.

    Args:
        a: (create, query) - Float values corresponding to the alpha transparency component, , which ranges from 0.0 to 1.0.  Use this flag to specify the initial alpha value of the Color Editor, or query this flag to determine the alpha value set in the editor.
        hsv: (create, query) - Three float values corresponding to the hue, saturation, and value color components, where the hue value ranges from 0.0 to 360.0 and the saturation and value components range from 0.0 to 1.0.  Use this flag to specify the initial color of the Color Editor, or query this flag to determine the color set in the editor.
        m: (create) - Enable the mini color editor mode.
        p: (create) - Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
        pos: (create) - Specify the window position for the dialog.
        r: (query) - This query only flag returns true if the dialog's "OK" button was pressed, false otherwise.  If you query this flag immediately after showing the Color Editor then it will return the same value as the boolean value returned in the colorEditor command's return string.
        rgb: (create, query) - Three float values corresponding to the red, green, and blue color components, all of which range from 0.0 to 1.0.  Use this flag to specify the initial color of the Color Editor, or query this flag to determine the color set in the editor.
    """
    ...


def colorIndexSliderGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., fdr: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., inv: Optional[Union[int, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., max: Optional[Union[int, bool]] = ..., min: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a color slider group consisting of a label, a
    color canvas and a slider. The value of the slider defines a color
    index into the a color table. The corresponding color is displayed
    in the canvas.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when the value changes by dragging the slider's value marker.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - Sets the string to be the text for the extra label.
        fdr: (create, edit, query) - If used then force refresh on drag
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        inv: (create, edit, query) - Set the invisible color index.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label text for the group.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Maximum color index.
        min: (create, edit, query) - Minimum color index.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Color index.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def colorInputWidgetGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., alp: Optional[Union[float, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fdr: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hsv: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rgb: Optional[Union[Tuple[float, float, float], bool]] = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    Create a color slider group consisting of a label, a color canvas,
    RGB and HSV sliders.  Clicking on the canvas will bring up the
    color editor.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        alp: (create, edit, query) - Alpha (transparency) of the color. Will show the alpha UI. Alpha will be set only if RGB or HSV is also set at the same time.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command string executed when slider value changes.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fdr: (create) - If used then force refresh on drag
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hsv: (create, edit, query) - Color in hue, saturation, and value format.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label text for the group.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rgb: (create, edit, query) - Color in red, green, and blue format.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def colorSliderButtonGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., alp: Optional[Union[float, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bc: Optional[Union[str, bool]] = ..., bl: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fdr: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hsv: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rgb: Optional[Union[Tuple[float, float, float], bool]] = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., sbc: Optional[Union[str, bool]] = ..., sbd: bool = ..., uds: bool = ..., ut: Optional[Union[str, bool]] = ..., vcp: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command object creates a new color slider group with a button and a
    symbol button. This control is primarily used in the rendering UI. In this
    context, the button brings up a dialog that allows the user to assign a
    texture map to this parameter. Once a texture map is available, a symbol
    button shows up. When this symbol button is pressed, the user is taken to
    another dialog to edit the texture map.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        alp: (create, edit, query) - Alpha (transparency) of the color. Will show the alpha UI. Alpha will be set only if RGB or HSV is also set at the same time.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bc: (create, edit) - Command string executed when the button is pressed.
        bl: (create, edit, query) - The button text.
        cc: (create, edit) - Command string executed when slider value changes.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command string executed when slider value marker is dragged.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fdr: (create, edit, query) - If used then force refresh on drag
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hsv: (create, edit, query) - Color in hue, saturation, and value format.
        i: (create, edit, query) - Image displayed on the symbol button.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label text for the group.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rgb: (create, edit, query) - Color in red, green, and blue format.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        sbc: (create, edit) - Command string executed when the symbol button is pressed.
        sbd: (create, edit, query) - Visibility of the symbol button.
        uds: (create, edit, query) - Set the command call to be done in display space. This sets the color picker to display space. Using the flag when setting or getting the color also converts it accordingly.
        ut: (create) - Forces the command to use a command template other than the current one.
        vcp: (create, edit) - Enabled to sample the 32bit float version from the viewport instead of the 8 bit integer that QT sees. Note that the viewport color picker does not allow to pick color on hud elements.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def colorSliderGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., alp: Optional[Union[float, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fdr: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hsv: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rgb: Optional[Union[Tuple[float, float, float], bool]] = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., uds: bool = ..., ut: Optional[Union[str, bool]] = ..., vcp: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a color Slider group consisting of a label, a
    color canvas and a slider.  Clicking on the canvas will bring up
    the color editor dialog.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        alp: (create, edit, query) - Alpha (transparency) of the color. Will show the alpha UI. Alpha will be set only if RGB or HSV is also set at the same time.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command string executed when slider value changes.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command string executed when slider value marker is dragged.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fdr: (create, edit, query) - If used then force refresh on drag
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hsv: (create, edit, query) - Color in hue, saturation, and value format.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label text for the group.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rgb: (create, edit, query) - Color in red, green, and blue format.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        uds: (create, edit, query) - Set the command call to be done in display space. This sets the color picker to display space. Using the flag when setting or getting the color also converts it accordingly.
        ut: (create) - Forces the command to use a command template other than the current one.
        vcp: (create, edit) - Enabled to sample the 32bit float version from the viewport instead of the 8 bit integer that QT sees. Note that the viewport color picker does not allow to pick color on hud elements.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def columnLayout(*args, adj: bool = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., cal: Optional[Union[str, bool]] = ..., cat: Optional[Union[Tuple[str, int], bool]] = ..., co: Optional[Union[Tuple[str, int], bool]] = ..., cw: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rs: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a layout that arranges its children in a
    single column.

    Args:
        adj: (create, edit) - Sets the children of the layout to be attached on both sides. They will stretch or shrink with the layout.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cal: (create, edit) - Sets the alignment of children containing text or pixmaps. Align values: "left" | "right" | "center".
        cat: (create, edit) - Sets the attachment and offsets for the children of the layout.  Side values: "left" | "right" | "both".  Left or both is recommended.
        co: (create, edit) - Sets the offsets for children of the layout. Side values: "left" | "right" | "both".
        cw: (create, edit, query) - Sets the width of the column.  Unless the children are attached to both sides of the column, the width cannot be enforced. Larger children will expand layout.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rs: (create, edit, query) - Sets the space between children.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def commandLine(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., c: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ec: Optional[Union[str, bool]] = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hf: bool = ..., ian: Optional[Union[str, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., nhl: Optional[Union[int, bool]] = ..., npm: bool = ..., oan: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., st: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a single line for command input/output.
    The left half is for input, the right half for output.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        c: (create, edit) - Command executed when the command line text changes.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ec: (create, edit) - Command executed when the keypad 'Enter' key is pressed.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hf: (create, edit, query) - Sets whether the command line should hold focus after exectuing a command.
        ian: (create, edit, query) - Annotate the input field with an extra string value.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nhl: (create, edit, query) - Sets the maximum number of commands saved to the command line history. Up to -nhl/numberOfHistoryLines previous commands will be available by pressing the up-arrow from within the input field. The default value is 50.
        npm: (query) - Return the number of popup menus attached to this control.
        oan: (create, edit, query) - Annotate the output field with an extra string value.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        st: (create, edit, query) - Sets the source type of this command line. Currently supports "mel" (enabled by default) and "python".
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def componentBox(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., exe: Tuple[str, bool] = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., lw: Optional[Union[int, bool]] = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rh: int = ..., sla: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a component box, which is sensitive to the active
    list.  It displays certain components of the last node on the active list,
    and provides a two-way connection to keep the widget up to date.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        exe: (edit) - Immediately executes the command string once for every cell (or every selected cell, if the boolean argument is TRUE) in the component box, for every matching selected object (ie, for every object would be affected if you changed a cell value.)  Before the command is executed, "#A" is substituted with the name of the attribute, and "#N" with the name of the node, and "#P" with the full path name of the node.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        lw: (edit, query) - An optional flag which is used to modify the width assigned to labels appearing in the componentBox.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (edit, query) - An optional flag which is used to limit the height of the componentBox.
        mw: (edit, query) - An optional flag which is used to limit the width of the componentBox.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (edit, query) - Controls the number of digits to the right of the decimal point that will be displayed for float-valued components. Default is 3.  Queried, returns an int.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rh: (edit) - An optional flag which is used to set the height of all rows in the componentBox.
        sla: (query) - Returns a list of names of all the attributes that are selected. This flag is ignored when not being queried.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def componentEditor(*args, ctl: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., ex: bool = ..., f: Optional[Union[str, bool]] = ..., ff: Optional[Union[str, bool]] = ..., fs: Optional[Union[str, bool]] = ..., fmc: Optional[Union[str, bool]] = ..., hpn: bool = ..., hzc: bool = ..., hlc: Optional[Union[str, bool]] = ..., jh: Optional[Union[int, bool]] = ..., li: bool = ..., lck: bool = ..., mlc: Optional[Union[str, bool]] = ..., nt: Optional[Union[Tuple[str, str, str], bool]] = ..., nw: int = ..., oc: bool = ..., ol: bool = ..., ot: Optional[Union[int, bool]] = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pre: Optional[Union[int, bool]] = ..., rt: str = ..., sl: bool = ..., slc: Optional[Union[str, bool]] = ..., sol: Tuple[int, str] = ..., sn: bool = ..., so: bool = ..., ss: bool = ..., sa: bool = ..., sts: bool = ..., up: bool = ..., ulk: bool = ..., upd: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a new component editor
    in the current layout.

    Args:
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the editor.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        ff: (create, edit, query) - assigns a float field that the component editor will use for editing groups of values.
        fs: (create, edit, query) - assigns a float slider that the component editor will use for editing groups of values.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        hpn: (create, edit, query) - Hides path name of displayed element.  By default this flag is set to false.
        hzc: (create, edit, query) - Hides columns whose elements are all zero.  By default this flag is set to false.
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        jh: (create, edit, query) - Set justification mode for headers of columns.  Possible values are 0 (right justify), or 1 (left justify). By default this flag is set to 0.
        li: (create, edit, query) - Prevents the editor from responding to changes in the active list. Independent of selection connection.
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        nt: (create, edit) - Creates a new tab, named by the first argument, based on an existing tab, given as the second argument using elements from a set, given in the third argument
        nw: (edit) - Specifies automatic normalization mode of skin clusters. Can be 0, meaning "None", or 1, meaning "Interactive", or 2, meaning "Post". It corresponds to the "normalizeWeights" attribute of skinCluster node.
        oc: (query) - returns the total number of operation types known to the component editor.
        ol: (query) - returns a string array containing the names for all operation types known to the editor.
        ot: (create, edit, query) - Tells the editor which of its known operation types it should be performing. This is a 0-based index.
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        pre: (create, edit, query) - Specifies the maximum number of digits displayed to the right of the decimal place.  Can be 0 to 20.
        rt: (edit) - Removes the tab based on the set provided
        sl: (query) - Returns a list of strings, containing the labels of the currently selected columns
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        sol: (edit) - uses the string as the new name for the existing operation type specified by the integer index. Note that there is no messaging system which allows UI to be informed of changes made by this flag.
        sn: (create, edit, query) - Show the namespaces for objects, if any.  By default this flag is set to true.
        so: (create) - Restricts the display to columns that are in the current active list.
        ss: (create, edit) - Restricts the display to those columns which are currently selected. By default this flag is set to false, so all columns are selected. The results from this flag obey the current -hideZeroColumns setting.
        sa: (create, edit, query) - Controls alphabetical (true), or hierarchical sorting of columns
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def confirmDialog(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., b: Optional[Union[str, bool]] = ..., cb: Optional[Union[str, bool]] = ..., db: Optional[Union[str, bool]] = ..., ds: Optional[Union[str, bool]] = ..., icn: Optional[Union[str, bool]] = ..., m: Optional[Union[str, bool]] = ..., ma: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    The confirmDialog command creates a modal dialog with a message to the
    user and a variable number of buttons to dismiss the dialog.  The
    dialog is dismissed when the user presses any button or chooses the
    close item from the window menu.  In the case where a button is
    pressed then the name of the button selected is returned.  If the
    dialog is dismissed via the close item then the string returned is
    specified by the dismissString flag.
    
    The default behaviour when no arguments are specified is to create an
    empty single button dialog.

    Args:
        ann: (create, multiuse) - set the annotation for the buttons
        bgc: (create) - The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)
        b: (create, multiuse) - Create a button with the given string as it's text.
        cb: (create) - The cancel button is activated by pressing the escape key. Note that this flag does not create a button, it simply indicates which button created via the button flag shall respond to the escape key.
        db: (create) - The default button is activated by pressing the enter key. Note that this flag does not create a button, it simply indicates which button created via the button flag shall respond to the enter key.
        ds: (create) - The string returned when the user selects the 'Close' item from the Window Manager menu.  If this flag is not set then the string "dismiss" is returned.
        icn: (create) - The user can specify one of the four standard icons -- "question", "information", "warning" and "critical".  The question icon indicates that the messsage is asking a question.  The information icon indicates that the message is nothing out of the ordinary.  The warning icon indicates that the message is a warning, but can be dealt with.  The critical icon indicates that the message represents a critical problem. When no icon flag is present, we assume the user does not want to include any icon in the confirm dialog.
        m: (create) - The message text appearing in the dialog.
        ma: (create) - Align the message left, center, or right.
        p: (create) - Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
        t: (create) - The dialog title.
    """
    ...


def contentBrowser(*args, acp: str = ..., ctx: Optional[Union[Tuple[str, List[str], List[str]], bool]] = ..., ctl: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., ex: bool = ..., f: Optional[Union[str, bool]] = ..., fmc: Optional[Union[str, bool]] = ..., hlc: Optional[Union[str, bool]] = ..., loc: str = ..., lck: bool = ..., mlc: Optional[Union[str, bool]] = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pv: bool = ..., rtv: bool = ..., rcp: str = ..., scc: bool = ..., slc: Optional[Union[str, bool]] = ..., sts: bool = ..., th: bool = ..., tr: bool = ..., up: bool = ..., ulk: bool = ..., upd: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command is used to edit and query a Content Browser. The Content Browser is
    a unique panel, so only one instance of it can exist at a given time.
    The optional argument is the name of the control.

    Args:
        acp: (edit) - Adds the given path(s) to the libraries displayed on the Examples tab. Also updates the corresponding MAYA_CONTENT_PATH environment variable.
        ctx: (edit, query) - Sets the default location for the given context. The two optional arguments (Python only) are the category (tab) and location. To clear the content use empty strings for category and location.  In query mode, it returns the context of the content browser in an array of 3 strings : the name of the context, the default category name, the default location.
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the editor.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        loc: (edit) - Switches to the Examples tab and selects the given library location.
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        pv: (edit) - Shows / hides the preview panel. Note: this flag will not affect the currently opened Content Browser, but only any subsequently opened ones.
        rtv: (edit) - Forces a refresh of the Examples tab tree view pane.
        rcp: (edit) - Removes the given path(s) from the libraries displayed on the Examples tab. Also updates the corresponding MAYA_CONTENT_PATH environment variable.
        scc: (edit) - Saves the context for the current Content Browser tab.
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        th: (edit) - Shows / hides the thumbnail panel. Note: this flag will not affect the currently opened Content Browser, but only any subsequently opened ones.
        tr: (edit) - Shows / hides the tree view panel. Note: this flag will not affect the currently opened Content Browser, but only any subsequently opened ones.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def control(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command allows you to edit or query the properties of any control.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def createEditor(*args, nc: bool = ..., qfd: bool = ...) -> Any:
    r"""
    This command creates a property sheet for any dependency node. The
    second argument is the name of the node, and the first is the name of
    a layout into which the property sheet controls should be placed.
    
    The property sheets created by this command can by user-customized
    using the editorTemplate command.

    Args:
        nc: (create) - If this flag is set then don't close the editor when the data is deleted
        qfd: (create) - The specified layout is put on a queue.  When the queue is full, layouts past the end of the queue are automatically deleted.  If the layout is already on the queue, it is moved to the front.  This allows us to dispose of editors when they are no longer being used.  This flag should only be used by the showEditor.mel script.
    """
    ...


def defaultNavigation(*args, ce: bool = ..., cn: bool = ..., da: bool = ..., dtv: bool = ..., dwn: bool = ..., delete: bool = ..., d: Optional[Union[str, bool]] = ..., dis: bool = ..., f: bool = ..., i: bool = ..., nds: Optional[Union[str, bool]] = ..., qt: bool = ..., ren: bool = ..., s: Optional[Union[str, bool]] = ..., u: bool = ...) -> Any:
    r"""
    The defaultNavigation command defines default behaviours when
    creating or manipulating connections between nodes and when
    navigating between nodes via those connections. This command is
    primarily used by attribute editors.

    Args:
        ce: (create) - Connect the destination (which is a node.attribute or simply node) to an existing source. If the source is specified (as node.attribute or simply as node), the command will proceed immediately. If the source is not specified, the user will be prompted to specify one. Once a source has been specified, a best guess will be made about what the user is trying to accomplish by connecting the two, based on the type of source and type of destination. The command will connect the nodes/attributes according to the best guess. The destination is specified using the destination flag and the source specified using the source flag.
        cn: (create) - Create a new node and connect it to the node.attribute specified using the destination flag.
        da: (create) - Returns the name of the attribute to which a connectNodeToNode would connect, given the source (attribute) and destination (node) flags. Returns a string.
        dtv: (create) - Returns the name of the node to which it would make the most sense to navigate to from the destination node.attribute specified. The destination is specified using the destination flag. Returns a string.
        dwn: (create) - Returns the name of the node which the user is most likely to want to work with if they are interested in the attributes of the destination node. The destination is specified using the destination flag. Returns a string.
        delete: (create) - Delete nodes with connections flowing into the node.attribute specified by the destination flag.
        d: (create) - Specifies an existing destination attribute for a createNew or connectToExisting.
        dis: (create) - If used then disconnect the destination if it exists.
        f: (create) - If set to true, then an attempt to connect a source attribute to a destination attribute which already has a source will cause the existing source to be disconnected and the new source to be connected in its place. Default value is true.
        i: (create) - Ignore any connections flowing into the node.attribute specified by the destination flag.
        nds: (create) - This is your opportunity to pass the navigator a string that can help it decide what behaviour to execute.
        qt: (create) - If set to true, then under no circumstances should the user be prompted for more information. Default value is false.
        ren: (create) - List nodes which are conceptually related to the node.attribute specified by the destination. Related nodes may include, but are not limited to, nodes which are directly or indirectly connected to the destination. The destination is specified using the destination flag. Returns an array of strings.
        s: (create) - Specifies an existing source attribute for a connectToExisting.
        u: (create) - Stop ignoring any connections flowing into the node.attribute specified by the destination flag.
    """
    ...


def disableIncorrectNameWarning(*args) -> Any:
    r"""
    Disable the warning dialog which complains about incorrect node names when opening
    Maya files.

    Args:
    """
    ...


def dockControl(*args, aa: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., a: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., con: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., ds: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., epo: bool = ..., ex: bool = ..., fh: bool = ..., fw: bool = ..., fcc: Optional[Union[str, bool]] = ..., fl: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., mov: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., r: bool = ..., ret: bool = ..., s: bool = ..., sl: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a dockable control, also known as tool palette or utility window.
    Dock controls are secondary windows placed in the dock area around the central control in a main window.
    Dock windows can be moved inside their current area, moved into new areas and floated (e.g. undocked).
    Dock control consists of a title bar and the content area. The titlebar displays the dock control window title, a float button and a close button.
    Depending on the state of the dock control, the float and close buttons may be either disabled or not shown at all.

    Args:
        aa: (create, edit, multiuse, query) - Areas where the dock control may be placed. Valid values are "top", "left", "bottom", "right" and "all".  The default is "all".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        a: (create, edit, query) - The initial dock area for this dock control. This is a required flag.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Script executed after the dock control is closed.
        con: (create, query) - The name of the control that is the content of this dock control.  This is a required flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        ds: (create) - The name of the control the window can be docked into. If this is not set it is assumed to be the main window.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        epo: (create, edit, query) - Whether or not the menu option for the dock control in the UI Elements popup menu is enabled.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fh: (create, edit, query) - Whether or not the dockControl height may be interactively resized.
        fw: (create, edit, query) - Whether or not the dockControl width may be interactively resized.
        fcc: (create, edit) - The script executed when the floating state of the dock widget changes.
        fl: (create, edit, query) - Whether the dock widget is floating. A floating dock widget is presented to the user as an independent window "on top" of main window, instead of being docked in the main window.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The label text.  The default label is the name of the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mov: (create, edit, query) - Control over whether or not the dockControl may be undocked/redocked.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        r: (edit, query) - Whether the dock widget is visible and either floating or at the top of its dock widget area.
        ret: (create, edit, query) - Control over whether or not the window and its contents are deleted when closed. The default is true.  The window and its contents are retained when closed unless this is set to false.
        s: (create, edit, query) - Whether or not the dockControl width may be interactively resized. Deprecated!!  Use the fixedWidth flag instead.
        sl: (create) - When two windows are added to a single docking area they are by default tabbed together. Setting a value for splitLayout will allow it to be placed next to another control in the same area. The flag's argument controls the orientation of the split. Valid values are "horizontal" or "vertical".
        st: (create, edit, query) - When queried this flag will return a string holding the dock control state information. This string is a hexadecimal representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to restore a dock control's state across sessions of Maya.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def editor(*args, ctl: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., ex: bool = ..., f: Optional[Union[str, bool]] = ..., fmc: Optional[Union[str, bool]] = ..., hlc: Optional[Union[str, bool]] = ..., lck: bool = ..., mlc: Optional[Union[str, bool]] = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., slc: Optional[Union[str, bool]] = ..., sts: bool = ..., up: bool = ..., ulk: bool = ..., upd: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Edit the characteristic of an editor

    Args:
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the editor.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def editorTemplate(*args, aac: bool = ..., acp: bool = ..., ac: Optional[Union[Tuple[str, str], bool]] = ..., adc: Optional[Union[Tuple[str, str], bool]] = ..., aec: bool = ..., addSeparator: bool = ..., afo: bool = ..., ann: Optional[Union[str, bool]] = ..., bl: Optional[Union[str, bool]] = ..., bn: bool = ..., bsl: bool = ..., ccu: Optional[Union[Tuple[str, str], bool]] = ..., cl: bool = ..., dbm: bool = ..., dc: Optional[Union[Tuple[str, str, bool], bool]] = ..., el: bool = ..., en: bool = ..., esl: bool = ..., ecl: Optional[Union[str, bool]] = ..., fr: bool = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., lea: Optional[Union[str, bool]] = ..., po: bool = ..., qc: Optional[Union[Tuple[str, str], bool]] = ..., ql: Optional[Union[Tuple[str, str], bool]] = ..., qn: Optional[Union[Tuple[str, str], bool]] = ..., s: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    The editorTemplate command allows the user to specify the
    conceptual layout of an attribute editor and leave the details
    of exactly which UI elements are used in the final result to the
    automatic dialog generation mechanism.

    Args:
        aac: (create) - Adds controls for dynamic attributes of adskMaterial nodes and organizes them in a layout according to the XML ui description specified in the asset library.
        acp: (create) - This flag will add a frameLayout with a channel box which will display any selected components for the object.
        ac: (create) - The first argument is the name of the attribute for which you wish to add a control. You can assume that when the editor is created from the template, an appropriate type of control will be used. The second string argument is optional, and can be used to specify a command (or script) to be executed when the attribute is changed.
        adc: (create) - As -addControl with the exception that the attribute for which the control is to be created/attached is dynamic. [Note: -addControl will also work for dynamic attributes, but will not preserve their order in the attribute editor].
        aec: (create) - By default, if there are attributes of a node which you do not -addControl or -suppress, then controls will be created automatically and appended to the end of editor created from the template. This flag allows you to specify a particular place in the template for such controls to be automatically inserted. If dynamic attributes have not already been addressed with -addControl, they will also be placed here.  A frameLayout will automatically be generated for you when you use this flag.
        addSeparator: (create) - Adds a separator to the template.
        afo: (create) - This flag can only be used with the -annotation flag.  By default, for any Attribute Editor controlGroups created by the -addControl flag, the -annotation flag displays its annotation string when the mouse hovers over any control that is part (the label, the value field, etc.) of the group.  Use this flag to limit display of the annotation to only the value field of the controlGroup.  This flag is ignored if the controlGroup has no value field (e.g., checkBoxGrp)
        ann: (create) - This flag can only be used with the -addControl or the -addDynamicControl flags. The string will be used as an annotation on the controls created in the attribute editor.
        bl: (create) - Begins a layout in the template with the title specified by the string argument. Items between this flag and    its corresponding -endLayout flag will be contained within the layout. You can assume that when the editor is created from the template, an appropriate type of layout will be used. (frameLayout).
        bn: (create) - Specifies that the layout of items between this flag and its corresponding -endNoOptimize flag is not to be optimized to minimize space.
        bsl: (create) - Begins a scrollLayout.  Items between this flag and its corresponding -endScrollLayout flag will be contained within the layout.
        ccu: (create) - Specifies that at this point in the template when building the dialog, the procedure specified by the first argument is to be called to create some UI objects when a new node type is edited. The procedure specified by the second argument is to be called if an attribute editor already exists and another node of the same type is now to be edited. The replacing procedure should connect any controls created by the creating procedure to the equivalent attributes in the new node. A list of zero or more attributes specifies the attributes which the two procedures will involve. The procedures should have the signature:  proc AEcustomNew(string attributeName1, string attributeName2)  The number of attributes specified in the call should correspond to the number of attributes in the procedure signature.
        cl: (create) - This flag is only valid when used in conjunction with a -bl/beginLayout flag.  It is used to specify the initial expand/collapse state of the layout.  A true value will cause the layout to be collapsed upon creation, while a false value will expand the layout.  The default is true (ie. collapsed).
        dbm: (create) - Set debugging mode for the template
        dc: (create) - This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is the node name and the second is the attribute whose control you wish to affect.  The third argument is a boolean which specifies whether to dim (true) or undim (false) the associated control.
        el: (create) - Ends a layout in the template started by -beginLayout.
        en: (create) - Ends a set of non-optimized items.
        esl: (create) - Ends a scrollLayout.
        ecl: (create) - By default the label is "Extra Attributes". Specify an alternate label or an empty string to hide the label. This flag must be used in conjuction with the -aec/addExtraControls flag.
        fr: (create) - Force a template to always destroy/create itself rather than use the replace feature.  Both the default replace behavior and force rebuild preserve the collapse/expand status of all the layout sections.
        io: (create) - Enforces a division between two sets of items whose layouts may be optimized.
        l: (create) - This flag can only be used with the -addControl or the -addDynamicControl flags.  And it must be specified FIRST. The string will override the name of the attribute that will be displayed in the attribute editor.
        lea: (create) - List extra attributes.This flag is only useful AFTER a control has already been created (using the -addControl flag). The first argument is the node name.
        po: (create) - If true, this flag disallows overriding the control's attribute via the control's right mouse button menu.
        qc: (create) - This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is the node name and the second is the attribute whose control you wish to query.  Note that in most cases, using this flag is identical to issuing a getAttr command, however, in the case of textFields (e.g. for message attributes), the text value currently being displayed will be returned, NOT the actual attribute value.
        ql: (create) - This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is the node name and the second is the attribute whose control label you wish to query.  In most cases this flag returns the same value as the attribute's nice name, but when a -label flag was present on the -addControl command that created the control, -queryLabel will return that value instead
        qn: (create) - This flag is only useful AFTER a control has already been created (using the -addControl flag).  The first argument is the node name and the second is the attribute whose control name you wish to query.
        s: (create) - Prevent a control for the attribute specified by the string argument from appearing in the editor created from the template.
    """
    ...


def falloffCurve(*args, acv: str = ..., ann: Optional[Union[str, bool]] = ..., asString: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: str = ..., ck: Optional[Union[int, bool]] = ..., ckv: Optional[Union[Tuple[float, float], bool]] = ..., ccw: bool = ..., dt: Optional[Union[str, bool]] = ..., dcv: int = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., ov: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., ro: bool = ..., stg: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control for editing a 2D control
    curve. The control attaches to an optionVar used to store and
    retrieve the encoded control points stored in a string.

    Args:
        acv: (edit) - Used to add a control vertex for the curve.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        asString: (edit, query) - Used to query and set the value of the curve as a string of comma separated values
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (edit) - Specifies a command to be executed whenever the value of this curve is modified. This option should not be used when specifying an optionVar.
        ck: (create, edit, query) - Returns the index of the currently selected key.
        ckv: (edit, query) - Get or set the value of the currently selected key.
        ccw: (create, edit, query) - Determines whether or not the curve widget is using a custom curve. When a custom curve is used, it is stored by a falloff curve in the brush tool settings, and the flag should be true.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dcv: (edit) - Used to delete a control vertex of the curve.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ov: (create, edit, query) - Specifies the name of the option var used to store and retrieve the string value capturing the curve.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ro: (create, edit, query) - Specifies if the curve is read only or not. If true, the curve can't be edited.
        stg: (create, edit, query) - Specifies whether or not curve control points snap to grid when they are being moved.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def falloffCurveAttr(*args, acv: str = ..., ann: Optional[Union[str, bool]] = ..., asString: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: str = ..., ck: Optional[Union[int, bool]] = ..., ckv: Optional[Union[Tuple[float, float], bool]] = ..., ccw: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dcv: int = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., ro: Optional[Union[int, bool]] = ..., spc: Optional[Union[str, bool]] = ..., svc: Optional[Union[str, bool]] = ..., stg: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control for editing a 2D control
    curve. This control attaches to a curve attribute, which must be a multi attribute where each entry is a compound
    composed of:
    
    A single float for control point position
    A single float for control point value
    
    The MEL command AEaddCurveControl
    should be used to attach this control to an attribute in the attribute
    editor templates.

    Args:
        acv: (edit) - Used to add a control vertex for the curve.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        asString: (edit, query) - Used to query and set the value of the curve as a string of comma separated values
        at: (create) - Specifies the name of the curve attribute to control.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (edit) - Specifies a command to be executed whenever the value of this curve is modified.
        ck: (create, edit, query) - Returns the index of the currently selected key.
        ckv: (edit, query) - Get or set the value of the currently selected key.
        ccw: (create, edit, query) - Determines whether or not the curve widget is using a custom curve. When a custom curve is used, it is stored by a falloff curve in the brush tool settings, and the flag should be non-zero.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dcv: (edit) - Used to delete a control vertex of the curve.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ro: (create, edit, query) - Specifies if the curve is read only or not. If true, the curve can't be edited.
        spc: (create, edit) - Specifies the name of a float slider to edit the selected key position.
        svc: (create, edit) - Specifies the name of a float slider to edit the selected key value.
        stg: (create, edit, query) - Specifies whether or not curve control points snap to grid when they are being moved.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def floatField(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ec: Optional[Union[str, bool]] = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rfc: Optional[Union[str, bool]] = ..., tze: bool = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[float, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a field control that accepts only float values and is bound by
    a minimum and maximum value.  An invisible slider is attached to the
    field and accessed by holding down the Ctrl modifier key while pressing
    one of the mouse buttons.  Dragging the invisible slider to the right
    with the middle mouse button increases the field value by the amount
    specified with the -s/step flag, while dragging to the left
    decreases the value by the same amount.  The left and right mouse
    buttons apply a factor of 0.1 and 10 to the step value.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the field changes.  This command is not invoked when the value changes via the -v/value flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when dragging in the field.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.  If false then the field can not be changed interactively.  However, you can change the field text with the -v/value flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ec: (create, edit) - Command executed when the keypad 'Enter' key is pressed.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Upper limit of the field.
        min: (create, edit, query) - Lower limit of the field.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit, query) - Number of digits to the right of the decimal place.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rfc: (create, edit) - Command executed when the field receives focus.
        tze: (create, edit, query) - Show trailing zeros or not
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Increment for the invisible slider.   The field value will change by this amount when the invisible slider is dragged.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the field.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def floatFieldGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., en1: bool = ..., en2: bool = ..., en3: bool = ..., en4: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., nf: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., tze: bool = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[Tuple[float, float, float, float], bool]] = ..., v1: Optional[Union[float, bool]] = ..., v2: Optional[Union[float, bool]] = ..., v3: Optional[Union[float, bool]] = ..., v4: Optional[Union[float, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label text and
    editable float fields.  The label text is optional and one to four
    float fields can be created.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command string executed when the value of any of the fields changes.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command string executed when dragging the invisible slider in any of the fields.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        en1: (create, edit, query) - 
        en2: (create, edit, query) - 
        en3: (create, edit, query) - 
        en4: (create, edit, query) - Enable state for the respective field.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nf: (create) - Set the number of fields on creation. One to four fields are available.  The default is one field.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit) - Set the number of digits to the right of the decimal.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        tze: (create, edit) - Show trailing zeros or not
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Set the delta of invisioSlider delta , the invisioSlider step is delta/10.0 in LMB , delta in MMB,delta*10.0 in RMB. Default is 10.0
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Values for all fields.
        v1: (create, edit, query) - 
        v2: (create, edit, query) - 
        v3: (create, edit, query) - 
        v4: (create, edit, query) - Value for the respective field.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def floatScrollBar(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hr: bool = ..., io: bool = ..., ls: Optional[Union[float, bool]] = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[float, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a scroll bar control that accepts only float values and is bound
    by a minimum and maximum value.  The scroll bar displays a marker
    indicating the current value of the scroll bar relative to its minimum
    and maximum values.  Click and drag the marker or on the scroll bar
    itself to change the current value.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when the value changes by dragging the scroll bar's value marker.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hr: (create, query) - Orientation of the slider.  This flag is true by default, which corresponds to a horizontally oriented slider.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        ls: (create, edit, query) - Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Upper limit of the scroll bar.
        min: (create, edit, query) - Lower limit of the scroll bar.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the scroll bar.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def floatSlider(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hr: bool = ..., io: bool = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[float, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a slider control that accepts only float values and is bound
    by a minimum and maximum value.  The slider displays a marker
    indicating the current value of the slider relative to its minimum
    and maximum values.  Click and drag the marker, or on the slider itself
    to change the current value.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when the value changes by dragging the slider's value marker.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hr: (create, query) - Orientation of the slider.  This flag is true by default, which corresponds to a horizontally oriented slider.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Upper limit of the slider.
        min: (create, edit, query) - Lower limit of the slider.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - The step value represents the amount the value will increase or decrease when you click either side of the slider.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the slider.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def floatSlider2(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc1: Optional[Union[str, bool]] = ..., cc2: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pol: Optional[Union[int, bool]] = ..., pma: bool = ..., pc1: Optional[Union[str, bool]] = ..., pc2: Optional[Union[str, bool]] = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v1: Optional[Union[float, bool]] = ..., v2: Optional[Union[float, bool]] = ..., vs: Optional[Union[Tuple[float, float], bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a float slider containing two handles.
    The two handles are arranged such that they cannot pass one
    another, thus handle 1 will always have a value less than
    or or equal to handle 2 when you adjust the values.
    Each handle may have a MEL command associated with it which is
    issued when the handle moves and thus can be used to update the
    values of plugs such as via a setAttr command. Each handle can
    also be associated with a float textfield to display the current
    value of the handle.
    
    Note: the floatSlider2 widget currently only supports vertical
    (columnLayout) orientation.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc1: (create, edit) - Command to be associated with handle 1 and issued whenever the value of the handle is changed (except when values are changed via the -hv/handleValue flag). An example command might be "setAttr nurbsSphere1.tx" and if handle 1 were to move to value 0.23 the slider would issue the command "setAttr nurbsSphere1.tx 0.23;".
        cc2: (create, edit) - Command to be associated with handle 2 and issued whenever the value of the handle is changed (except when values are changed via the -hv/handleValue flag). An example command might be "setAttr nurbsSphere1.tx" and if handle 2 were to move to value 0.23 the slider would issue the command "setAttr nurbsSphere1.tx 0.23;".
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Maximum limit of the slider. The default value is 10.0. The maximum value occurs at the top(right) end of the slider unless -polarity was specified. Note: you cannot set the maximum value greater than or equal to the current minimum.
        min: (create, edit, query) - Minimum limit of the slider. The default value is 0.0. The minimum value occurs at the bottom end of the slider unless -polarity was specified. Note: you cannot set the minimum value greater than or equal to the current maximum.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pol: (create, edit, query) - Specifies the polarity of the slider. If 0 (the default), the minimum value (specified by the -minimum flag) occurs at the bottom end of the slider and maximum at the top(right), with values increasing as the slider handles are moved towards the upper end of the slider. If the polarity is specified as 1, the reverse behaviour occurs, with the maximum occurring at the bottom end, the mimimum occuring at the top(right) end and values decreasing as the handles are moved towards the upper end.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pc1: (create, edit) - Set the name of the control (if any) which is associated with handle 1 of this slider. The control must be a "floatField". The control always displays the value of the handle, and is updated as the handle moves.
        pc2: (create, edit) - Set the name of the control (if any) which is associated with handle 2 of this slider. The control must be a "floatField". The control always displays the value of the handle, and is updated as the handle moves.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v1: (create, edit, query) - Value of handle 1. To ensure that handle 1 stays at or below handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.
        v2: (create, edit, query) - Value of handle 2. To ensure that handle 2 stays at or above handle 2, an error will occur if the value specified is too large. If you wish to set both handles simultaneously, use the -values flag.
        vs: (create, edit) - Sets the value for handles 1 and 2 simulteneously. The first argument is applied to handle 1 and must be less than or equal to the second (handle 2) argument or an error will be issued.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def floatSliderButtonGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bc: Optional[Union[str, bool]] = ..., bl: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., f: bool = ..., fmx: Optional[Union[float, bool]] = ..., fmn: Optional[Union[float, bool]] = ..., fs: Optional[Union[float, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., ss: Optional[Union[float, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., sbc: Optional[Union[str, bool]] = ..., sbd: bool = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[float, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a float slider component with optional button
    and symbol buttons.
    
    TelfFloatSliderGrpCmd.cpp

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bc: (create, edit) - Command string to be executed when the button is pressed.
        bl: (create, edit, query) - The button text.
        cc: (create, edit) - Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command string executed repeatedly during a drag of the slider.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.
        f: (create) - Indicates whether the group will have an editable float field present that reflects the value of the slider.
        fmx: (create, edit, query) - Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValue flag.  By default, it is equal to the -max/maxValue flag.
        fmn: (create, edit, query) - Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValue flag.  By default, it is equal to the -min/minValue flag.
        fs: (create, edit, query) - Increment for the field.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i: (create, edit, query) - Image displayed on the symbol button.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - If present on creation the group will have static text.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Maximum value for both the slider and the field.
        min: (create, edit, query) - Minimum value for both the slider and the field.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit) - Number of digits to the right of the decimal.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        ss: (create, edit, query) - The slider step value represents the amount the value will increase or decrease when you click either side of the slider.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Increment for both the slider and field.
        sbc: (create, edit) - Command string executed when the symbol button is pressed.
        sbd: (create, edit, query) - Visibility of the symbol button.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the group.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def floatSliderGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., f: bool = ..., fmx: Optional[Union[float, bool]] = ..., fmn: Optional[Union[float, bool]] = ..., fs: Optional[Union[float, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., ss: Optional[Union[float, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[float, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[float, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of controls containing a
    label text, an float field and a float slider. The text and field
    controls are optional.  Editing or querying the field range values has
    no effect if the -f/field flag was not specified when the group was
    created.
    
    This group also allows you to enter values into the field outside of the
    slider range which is limited by the -min/minValue
    and -max/maxValue flags.  To do this, use
    the -fmn/fieldMinValue and -fmx/fieldMaxValue flags to
    specify a greater range of values.
    
    Note that the command will not allow you to specify
    a -fmn/fieldMinValue greater than the -min/minValue value nor
    a -fmx/fieldMaxValue less than the -max/maxValue value.
    
    If you do supply a larger field range with the -fmn/fieldMinValue
    and -fmx/fieldMaxValue flags then you will notice that entering a
    value in the field that is outside of the slider range will result in
    extending the slider range as well.  For example, if you create a slider
    group with the following command:
    
    floatSliderGrp -min -10 -max 10 -fieldMinValue -100 -fieldMaxValue 100;
    
    Then you will be able to use the slider to select any value from -10 to 10.
    At the same time you will be able to enter into the field any value
    from -100 to 100.  If you enter a value, say 20, then the new slider
    range will grow such that this value is now accessible through the slider
    as well.  In fact, the new slider limit will become double of that what you
    entered.  Note that the slider limits will never grow beyond the field
    limits, in other words if you entered the value 80 then the slider will be
    clipped to the field limit of 100 and not doubled to 160.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command string executed repeatedly during a drag of the slider.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.
        f: (create) - Indicates whether the group will have an editable float field present that reflects the value of the slider.
        fmx: (create, edit, query) - Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValue flag.  By default, it is equal to the -max/maxValue flag.
        fmn: (create, edit, query) - Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValue flag.  By default, it is equal to the -min/minValue flag.
        fs: (create, edit, query) - Increment for the field.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - If present on creation the group will have static text.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Maximum value for both the slider and the field.
        min: (create, edit, query) - Minimum value for both the slider and the field.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit) - Number of digits to the right of the decimal.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        ss: (create, edit, query) - The slider step value represents the amount the value will increase or decrease when you click either side of the slider.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Increment for both the slider and field.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the group.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def flowLayout(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., cs: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hr: bool = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., wr: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a layout that arranges its children along a single line
    (either horizontal or vertical). Depending on the value of the -wrap boolean flag
    (default is false), if the layout's parent cannot fit all the children on one line, the
    children will either wrap onto the next line(s) or be truncated.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cs: (create, edit, query) - Sets the space between children.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hr: (create, edit, query) - Orientation of the layout. This flag is true by default, which corresponds to a horizontally laid out control.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, query) - This flag is obsolete. Please use the -hr/-horizontal flag instead.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        wr: (create, edit, query) - When set to true, if the layout's parent cannot fit all the children in a single line, the children will wrap onto the next line(s). Default setting is false.
    """
    ...


def fontDialog(*args, fl: bool = ..., sc: bool = ...) -> Any:
    r"""
    Displays a dialog of available fonts for the user to select from. The
    name of the selected font is returned, or an empty string if no font was selected.
    
    When the FontList flag is used, no dialog is displayed. Instead
    the command returns an array of the available fonts.

    Args:
        fl: (create) - Returns an array of all available font names. No dialog is displayed.
        sc: (create) - Limits the fonts returned or displayed to just those that are scalable.
    """
    ...


def formLayout(*args, ann: Optional[Union[str, bool]] = ..., ac: Optional[Union[Tuple[str, str, int, str], bool]] = ..., af: Optional[Union[Tuple[str, str, int], bool]] = ..., an: Optional[Union[Tuple[str, str], bool]] = ..., aoc: Optional[Union[Tuple[str, str, int, str], bool]] = ..., aof: Optional[Union[Tuple[str, str, int], bool]] = ..., ap: Optional[Union[Tuple[str, str, int, int], bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., nd: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a form layout control. A form layout allows
    absolute and relative positioning of the controls that are
    its immediate children.
    
    Controls have four edges: top, left, bottom and right.
    There are only two directions that children can be positioned in,
    right-left and up-down. The attach flags take the direction of
    an attachment from the argument that names the edge to attach
    (the second argument). Any or all edges of a child may be
    attached. There are six ways to attach them:
    
    
    Attach to Form - Attaches an edge to the relevant side
    of the form layout. Thus -attachForm button3 "left" will
    attach the left edge of the button to the left edge of the form.
    
    Attach to Opposite Side of Form - Attaches an edge relative to
    the furthest side of the form layout.
    
    Attach to Another Control - Attaches an edge to the closest
    edge of the other control named.
    
    Attach to Opposite Side of Another Control - Attaches an edge
    relative to the furthest side of another control.
    
    Attach to Position - Attaches an edge to a position
    on the form layout.  The position is given as a fixed fraction
    of the -nd/numDivisions value and as this value defaults to 100
    it is easiest to think of it as a percentage of the form's
    size.
    
    Attach to Nothing - Attaches an edge to nothing.
    The size of the child control will determine this edge's
    position.
    
    
    Each edge attachment may have an offset that acts to separate
    controls visually.
    
    There is no default positioning relationship so to have children
    appear in the form they must have at least one edge attached in
    each direction.
    
    Note: In the flag definitions the arguments follow these
    rules:
    
     control must
    be the name of an immediate child of the form layout.
    
     edge must be one of "top", "left", "bottom", or
    "right".
    
     position may range from 0 to the number of
    divisions as specified with the -nd/numberOfDivisions flag
    and gives the fraction of the width of the form as a measurement.
    This normally means 0-100 so  position may be thought
    of as a percentage.
    
     offset is an integer value in pixels.
    
    
    These are multi-use flags so any number of attachments
    may be made in a single command.
    
    Note: Avoid making control attachments that form a loop in
    control dependencies. For example:
    
    
    window;
    string $form = `formLayout`;
    string $btn1 = `button`;
    string $btn2 = `button`;
    string $btn3 = `button`;
    formLayout -edit    -attachControl $btn2 "top"   2 $btn1    -attachControl $btn3 "top"   2 $btn2    -attachControl $btn1 "right" 2 $btn3
    $form;
    showWindow;
    
    
    $btn2 is attached to $btn1, $btn3 is attached to $btn2, and $btn1 is
    attached to $btn3. Thus, the placement of $btn1 is dependent on the
    placement of $btn3, which is dependent on the placement of $btn2, which
    is dependent on the placement of $btn1. The last control attachment will
    have created a loop in the dependencies.
    
    To prevent runtime errors, Maya will ignore this attachment and instead
    issue a warning that a cyclical control attachment has been detected in
    the script.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        ac: (create, edit, multiuse) - Arguments are: control, edge, offset, control Valid edge values are: "top" | "bottom" | "left" | "right". Attach a control to another control.
        af: (create, edit, multiuse) - Arguments are: control, edge, offset. Valid edge values are: "top" | "bottom" | "left" | "right". Attach the specified control to the form, offset by the specified amount.
        an: (create, edit, multiuse) - Arguments are: control, edge Valid edge values are: "top" | "bottom" | "left" | "right". Attach a control to nothing.
        aoc: (create, edit, multiuse) - Arguments are: control, edge, offset, control Valid edge values are: "top" | "bottom" | "left" | "right". Attach a control to the opposite side of another control.
        aof: (create, edit, multiuse) - Arguments are: control, edge, offset. Valid edge values are: "top" | "bottom" | "left" | "right". Attach a control to the opposite side of the form.
        ap: (create, edit, multiuse) - Arguments are: control, edge, offset, position Valid edge values are: "top" | "bottom" | "left" | "right". Attach a control to a position in the form.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        nd: (create, edit, query) - Specify the number of horizontal and vertical divisions across the form. Value must be greater than 0.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def frameLayout(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bgs: bool = ..., bs: Optional[Union[str, bool]] = ..., bv: bool = ..., ca: bool = ..., cll: bool = ..., cl: bool = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., ec: Optional[Union[str, bool]] = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., la: Optional[Union[str, bool]] = ..., li: Optional[Union[int, bool]] = ..., lv: bool = ..., lw: Optional[Union[int, bool]] = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pcc: Optional[Union[str, bool]] = ..., pec: Optional[Union[str, bool]] = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates frame layout control. A frame layout may draw a
    border around its child controls as well as a display a title. Frame
    layouts may also be collapsable. Collapsing a frame layout will make
    the child of the frame layout invisible and shrink the frame layout
    size. The frame layout may then be expanded to make its child visible.
    Note that the frame layout may have only one child control.  If you
    wish to have more than one child inside a frame layout then you must
    use some other control layout as the immediate child of the frame
    layout.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bgs: (create, edit, query) - Controls whether the background of the frame layout draws with a shaded effect. It is turned off by default.
        bs: (create, edit, query) - This flag is obsolete. The border style is no longer supported. Using this flag will return a warning.
        bv: (create, edit, query) - Visibility of the border.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cll: (create, edit, query) - Collapsibility of the frame layout.
        cl: (create, edit, query) - Collapse state of the frame layout.
        cc: (create, edit) - Command executed after the frame is collapsed.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        ec: (create, edit) - Command executed after the frame is expanded.
        fn: (create, edit, query) - The font for the frame label.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label string for the frame layout.
        la: (create, edit, query) - How to align the label. Default is "top".
        li: (create, edit, query) - Indentation for the frame label.
        lv: (create, edit, query) - Visibility of the frame label.
        lw: (create, edit, query) - Width of the label.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (create, edit, query) - Vertical distance between the frame and its children.
        mw: (create, edit, query) - Horizontal distance between the frame and its children.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pcc: (create, edit) - Command executed just before the frame is collapsed.
        pec: (create, edit) - Command executed just before the frame is expanded.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def framelessDialog(*args, b: Optional[Union[str, bool]] = ..., m: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pat: Optional[Union[str, bool]] = ..., pr: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    The framelessDialog command creates a modal dialog with a message to the
    user and a variable number of buttons to dismiss the dialog.  The
    dialog is dismissed when the user presses any button or chooses the
    close item from the window menu.  In the case where a button is
    pressed then the name of the button selected is returned.

    Args:
        b: (create, multiuse) - Create a button with the given string as it's text.
        m: (create) - The message text appearing in the dialog.
        p: (create) - Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
        pat: (create) - An optional path appearing after the message.
        pr: (create, multiuse) - Set given buttons as primary.
        t: (create) - The dialog title.
    """
    ...


def getPanel(*args, ac: bool = ..., all: bool = ..., ast: bool = ..., at: bool = ..., ap: Optional[Union[Tuple[int, int], bool]] = ..., cwl: Optional[Union[str, bool]] = ..., c: Optional[Union[str, bool]] = ..., inv: bool = ..., sty: Optional[Union[str, bool]] = ..., typ: Optional[Union[str, bool]] = ..., to: Optional[Union[str, bool]] = ..., up: bool = ..., vis: bool = ..., wf: bool = ..., wl: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    This command returns panel and panel configuration information.

    Args:
        ac: (create) - Return the names of the all panel configuration in a string array.
        all: (create) - Return the names of all the panels in a string array.
        ast: (create) - Return the names of all types of scripted panels in a string array.
        at: (create) - Return the names of all types of panels, except scripted types in a string array.
        ap: (create) - Return the name of the panel which contains the specified screen coordinates. An empty string is returned if there is no panel at those coordinates.
        cwl: (create) - Return the name of the panel configuration with the specified label text.
        c: (create) - Return the name of the panel containing the specified control. An empty string is returned if the specified control is not in any panel.
        inv: (create) - Return the names of all the invisible panels in a string array.
        sty: (create) - Return the names of all scripted panels of the specified type in a string array.
        typ: (create) - Return the names of all panels of the specified type in a string array.
        to: (create) - Return the type of the specified panel.
        up: (create) - Return the name of the panel that the pointer is currently over. An empty string is returned if the pointer is not over any panel.
        vis: (create) - Return the names of all the visible panels in a string array.
        wf: (create) - Return the name of the panel that currently has focus.  If no panel has focus then the last panel that had focus is returned.
        wl: (create) - Return the name of the panel with the specified label text.
    """
    ...


def grabColor(*args, a: bool = ..., hsv: bool = ..., rgb: bool = ...) -> Any:
    r"""
    This command changes the cursor and enters a modal state which will be
    exited by pressing a mouse button.  The color component values of the
    pixel below the cursor at the time of the button press are returned.

    Args:
        a: (create) - Appends the alpha value to the results
        hsv: (create) - The 3 returned float values will specify the hue, saturation and value color components.
        rgb: (create) - Default : the 3 returned float values will specify the red, green and blue color components.
    """
    ...


def gradientControl(*args, adaptiveScaling: bool = ..., ann: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cla: bool = ..., dt: Optional[Union[str, bool]] = ..., dki: bool = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hlm: Optional[Union[str, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., nc: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., ro: bool = ..., ror: Optional[Union[int, bool]] = ..., scc: Optional[Union[str, bool]] = ..., sic: Optional[Union[str, bool]] = ..., spc: Optional[Union[str, bool]] = ..., snc: bool = ..., sp: bool = ..., sbm: Optional[Union[str, bool]] = ..., ulc: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vl: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control that displays
    the gradient attribute specified. The gradient attribute must be
    of the correct form and naming. It should be a multi attribute
    with each entry a compound composed of:
    
    Either a color compound or a float value (the control will
    automatically detect which and display a ramp or graph accordingly).
    A single float attribute for position.
    An enum for the interpolation types.
    
    Currently the routines to get the value of a ramp structure
    (with interpolation) are not available through MEL, which limits
    the use of this control by end users. The MEL command AEaddRampControl
    should be used to attach this control to an attribute from attribute
    editor templates.

    Args:
        adaptiveScaling: (create, edit, query) - Allow the ramp widget display to scale vertically to accommodate values greater than 1.0. True if adaptive scaling is enabled, false (the default) if not.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        at: (create, edit) - Specifies the name of the gradient attribute to control.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cla: (edit) - Removes the gradient attribute that controls the widget. A new attribute can be set again using the attribute flag
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dki: (create, edit, query) - Specifies if key position should be displayed in a tooltip when the user hovers over or drags a control point.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hlm: (create, edit, query) - Specifies when the ramp should be highlighted. Only applies to curves. Possible values are "off", "hover" and "always". Default is "off".
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nc: (query) - Returns the number of controls in the ramp widget
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ro: (create, edit, query) - Specifies if the ramp is read only or not. If true, the ramp can't be edited and control points will be hidden.
        ror: (create, edit, query) - Define how updates are dispatched during interactive editing of the ramp widget. True causes updates to only dispatch after releasing the mouse button after editing. False (the default) causes updates to dispatch interactively during editing (e.g. while moving ramp curve points). Note that the global update mode, if set to "on release" can disable the effect of this option.
        scc: (create, edit) - Specifies the name of a color control to edit the selected color.
        sic: (create, edit) - Specifies the name of an enum control to edit the selected interpolation.
        spc: (create, edit) - Specifies the name of a float slider to edit the selected position.
        snc: (create, edit, query) - When 'true', this flag disables the creation/deletion of ramp entries (control points) via ramp widget interaction. Default is false.
        sp: (create, edit, query) - When 'true', this flag disables the interactive modification of ramp entry positions. Default is false.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ulc: (create, edit, query) - Specify the name of a text control which is updated with the current upper display limit for the ramp. This option is only effective when adaptiveScaling is specified.
        ut: (create) - Forces the command to use a command template other than the current one.
        vl: (create, edit, query) - When 'true', this makes the control orient vertically rather than horizontally. The default is `false` or horizontal.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def gradientControlNoAttr(*args, ann: Optional[Union[str, bool]] = ..., asString: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: str = ..., ck: Optional[Union[int, bool]] = ..., ckc: str = ..., clv: Optional[Union[Tuple[float, float, float], bool]] = ..., cvv: bool = ..., civ: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dki: bool = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: str = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hlm: Optional[Union[str, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., ov: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rac: bool = ..., ro: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vap: Optional[Union[float, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control for editing a ramp (2D control
    curve). The control attaches to an optionVar used to store and
    retrieve the encoded gradient control points stored in a string.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        asString: (edit, query) - Used to query and set the value of the ramp as a string of comma separated values
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (edit) - Specifies a command to be executed whenever the value of this ramp is modified. This option should not be used when specifying an optionVar.
        ck: (create, edit, query) - Returns the index of the currently selected key.
        ckc: (edit) - Specifies a command to be executed whenever the selected key changes.
        clv: (edit, query) - Get or set the color of the currently selected key. Only useful if the ramp is set to be a color ramp.
        cvv: (edit, query) - Get or set the value of the currently selected key. Only useful if the ramp is set to be a curve ramp.
        civ: (edit, query) - Get or set the interpolation value for the current key.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dki: (create, edit, query) - Specifies if key position should be displayed in a tooltip when the user hovers over or drags a control point.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (edit) - Specifies a command to be executed while the ramp is being modified.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hlm: (create, edit, query) - Specifies when the ramp should be highlighted. Only applies to curves. Possible values are "off", "hover" and "always". Default is "off".
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ov: (create, edit, query) - Specifies the name of the option var used to store and retrieve the string value capturing the curve.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rac: (create, edit, query) - Sets whether the ramp should be viewed as a colour ramp or as a curve.  Default is as a curve.
        ro: (create, edit, query) - Specifies if the ramp is read only or not. If true, the ramp can't be edited and control points will be hidden.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vap: (query) - Used during query to specify the point at which to query the curve.       In query mode, this flag needs a value.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def gridLayout(*args, aec: bool = ..., ann: Optional[Union[str, bool]] = ..., ag: bool = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ch: Optional[Union[int, bool]] = ..., cw: Optional[Union[int, bool]] = ..., cwh: Optional[Union[Tuple[int, int], bool]] = ..., ca: bool = ..., cr: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., go: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., nc: Optional[Union[int, bool]] = ..., npm: bool = ..., nr: Optional[Union[int, bool]] = ..., nrc: Optional[Union[Tuple[int, int], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pos: Optional[Union[Tuple[str, int], bool]] = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This layout arranges children in a grid fashion where every
    cell in the grid is the same size.  You may specify the number
    of rows and columns as well as the width and height of the grid
    cells.

    Args:
        aec: (create, query) - Specify true if you want free positioning of the children in the layout and potentially leaving empty cells between children. Set to false if you want the children to always be packed together. The default is true.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        ag: (create, query) - Specify true if you want the grid layout size to grow as children are added.  For example, if the grid layout has 2 columns and 2 rows then adding a fifth child will cause the grid to expand to 3 rows if this flag is true, otherwise the grid will remain the same size and the new child will be hidden from view until you expand the size of the grid using the appropriate flags.  The default is true.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ch: (create, edit, query) - A positive non-zero integer value indicating the height of cells in the grid layout.
        cw: (create, edit, query) - A positive non-zero integer value indicating the width of cells in the grid layout.
        cwh: (create, edit) - Two positive non-zero integer values for indicating the width and height, respectively, of the cells in the grid layout.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cr: (create, query) - Specify true if you want the number of columns to adjust according to the width of the layout.  Set to false if you want the number of columns to remain fixed when the width of the layout is changed.  The default is false.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        go: (query) - As opposed to the childArray flag, the gridOrder flag returns the children of the grid Layout in the order they are diplayed in the window.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        nc: (create, edit, query) - A positive non-zero integer value indicating the number of columns in the grid layout.
        npm: (query) - Return the number of popup menus attached to this control.
        nr: (create, edit, query) - A positive non-zero integer value indicating the number of rows in the grid layout.
        nrc: (create, edit) - Two positive non-zero integer values for the number of rows and columns, respectively, in the grid layout.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pos: (create, edit, multiuse) - Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired position of the child.  Positions increase from left to right within a row and then wrap around to the next row increasing from top to bottom.  For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy the second.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def hardwareRenderPanel(*args, cam: Optional[Union[str, bool]] = ..., ctl: bool = ..., cp: str = ..., cs: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., es: bool = ..., ex: bool = ..., gre: bool = ..., init: bool = ..., iu: bool = ..., l: Optional[Union[str, bool]] = ..., mrl: bool = ..., mbv: bool = ..., ni: bool = ..., p: Optional[Union[str, bool]] = ..., pmp: Optional[Union[str, bool]] = ..., rp: str = ..., to: bool = ..., toc: Optional[Union[str, bool]] = ..., tor: bool = ..., up: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates, edit and queries hardware render panels which contain
    only a hardware render editor.

    Args:
        cam: (edit, query) - Query or edit the camera in a gl render panel.
        ctl: (query) - Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return "" if no control is present.
        cp: (edit) - Makes this panel a copy of the specified panel.  Both panels must be of the same type.
        cs: (edit) - Command string used to create a panel
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the Maya panel.
        es: (edit) - Command string used to edit a panel
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        gre: (query) - Query only. This flag returns the name of the gl render editor contained in the panel.
        init: (create, edit) - Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
        iu: (query) - Returns true if only one instance of this panel type is allowed.
        l: (edit, query) - Specifies the user readable label for the panel.
        mrl: (create, edit, query) - Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.
        mbv: (create, edit, query) - Controls whether the menu bar for the panel is displayed.
        ni: (edit, query) - (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.
        p: (create) - Specifies the parent layout for this panel.
        pmp: (edit, query) - Specifies the procedure called for building the panel's popup menu(s). The default value is "buildPanelPopupMenu".  The procedure should take one string argument which is the panel's name.
        rp: (edit) - Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
        to: (edit, query) - Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.
        toc: (create) - Will create this panel as a torn of copy of the specified source panel.
        tor: (create, edit) - Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOff flag which should only be used to tear off the panel.
        up: (edit) - Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def headsUpDisplay(*args, ad: bool = ..., ao: bool = ..., atr: bool = ..., ac: Optional[Union[str, bool]] = ..., b: Optional[Union[int, bool]] = ..., ba: Optional[Union[str, bool]] = ..., bs: Optional[Union[str, bool]] = ..., c: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., cf: Optional[Union[str, bool]] = ..., ct: Optional[Union[str, bool]] = ..., con: Optional[Union[str, bool]] = ..., da: Optional[Union[str, bool]] = ..., dfs: Optional[Union[str, bool]] = ..., dw: Optional[Union[int, bool]] = ..., dp: Optional[Union[int, bool]] = ..., di: bool = ..., ev: Optional[Union[str, bool]] = ..., ex: bool = ..., op: Optional[Union[str, bool]] = ..., gco: Optional[Union[int, bool]] = ..., l: Optional[Union[str, bool]] = ..., lfs: Optional[Union[str, bool]] = ..., lw: Optional[Union[int, bool]] = ..., lob: Optional[Union[int, bool]] = ..., lv: bool = ..., lc: bool = ..., le: bool = ..., lh: bool = ..., lnc: bool = ..., lp: bool = ..., n: str = ..., nfb: Optional[Union[int, bool]] = ..., nc: Optional[Union[str, bool]] = ..., p: Optional[Union[int, bool]] = ..., pre: Optional[Union[str, bool]] = ..., r: bool = ..., rem: bool = ..., rid: Optional[Union[int, bool]] = ..., rp: Optional[Union[Tuple[int, int], bool]] = ..., rnc: str = ..., sr: bool = ..., s: Optional[Union[int, bool]] = ..., so: Tuple[str, str] = ..., sg: bool = ..., vis: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a Heads-up Display (HUD) object which is placed in a 2D
    inactive overlay plane on the 3D viewport. It is to be used to provide hands-on
    information designated by a user script. The text string displayed on the viewport
    is formatted using the various flags of this command.
    
    The only mandatory flags, on creation are the section and block flags. Note if the preset
    OR command/trigger flags are not present, only a label will be drawn on the viewport.
    
    Upon creation of a HUD object, an ID number will be assigned to it. This can be used to
    remove the HUD object (-rid/removeID [int IDNumber]), if desired. Alternatively, HUD
    objects may be removed via their position (section and block), or their unique name.

    Args:
        ad: (create, edit) - This flag can only be used in conjunction with the -ac/attributeChange flag. If it is specified, and the HUD is attached to a compound or multi attribute, then the HUD command will run due to changes to the specified attribute as well as changes to its descendants.
        ao: (create, edit, query) - Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag description for more details).
        atr: (create, edit, query) - Attaches the command to the refresh process. The script is then run each time an idle refresh is run and updates directly following it.
        ac: (create, edit) - Runs the command when the named attribute changes value. The string must identify both the dependency node and the particular attribute. If the dependency node is deleted, this HUD is removed (even if the deletion is undoable).
        b: (create, edit, query) - Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column of blocks. The total number of blocks contained within each section is variable.  The number of blocks that will be visible within each section is dependent on the size of blocks contained in each section and the current size of the window. Blocks begin enumerating from 0 and flexibly increase based on need.  The resultant output string of each HUD is formatted within each block, using parameters defined by the formatting flags listed below (eg. justify, padding, labelWidth and dataWidth). The layout is shown in the following diagram:   __________________________________________ |     |     |        |         |     |     | |  P  |  J  |   LW   |   DWX   |  J  |  P  | |_____|_____|________|_________|_____|_____| P = Sub-block of width, padding J = Justification of the entire block LW = Sub-block of width, labelWidth DWX = X number of sub-blocks of width, dataWidth, for X data elements.   Block Layout  The above diagram shows the layout of each block. The widths: padding, labelWidth and dataWidth are defined by their respective flags. To elaborate on the layout of the blocks, First the padding of the block is calculated. Then the two main sub-blocks (LW and DWX) in the above diagram, are justified and positioned together between the left and right margins of the block. The widths of the main sub-blocks are not variable based on it's contents. The only sub-block in the above diagram which is unique is the DWX sub-block which actually represents X number of sub-blocks, where X is the number of data elements returned by the command.  Block Positioning  Blocks on the top section begin from the top edge of the main viewport, while the bottom section begins from the bottom edge. Blocks are dynamically removed from visibility from the midpoint of the viewport. So, a relatively large block number will not draw to the viewport.  Lastly, there can be at most one HUD occupying a block at any time. Trying to position a HUD in an occupied block will result in an error. Keep this in mind when positioning the HUD.
        ba: (create, edit, query) - Specifies the alignment of the block within its respective column. Available alignments are: "center", "left" and "right". The default alignment is "left".
        bs: (create, edit, query) - Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds to a 20, 35 or 50 pixel height, respectively.
        c: (create, edit, query) - Specifies the procedure or script to run, in order to obtain the desired information. This must return a value or an array of values. A warning will be displayed if the command does not return a value. This flag MUST always be accompanied by a trigger flag (eg. a condition flag, an event flag, an attachToRefresh flag, etc.).
        cc: (create, edit) - A trigger which runs the command (to sample the data), when the named condition changes. The named condition must be pre-defined or a user defined boolean. To get a list of what conditions exist, use the -lc/listConditions flag.
        cf: (create, edit) - A trigger which runs the command (to sample the data), when the named condition becomes false. The named condition must be pre-defined or a user defined boolean. To get a list of what conditions exist, use the -lc/listConditions flag.
        ct: (create, edit) - A trigger which runs the command (to sample the data), when the named condition becomes true. The named condition must be pre-defined or a user defined boolean. To get a list of what conditions exist, use the -lc/listConditions flag.
        con: (create, edit) - Runs the command when the named attribute changes its connectivity. The string must identify both the dependency node and the particular attribute. If the dependency node is deleted, this HUD is removed (even if the deletion is undoable).
        da: (create, edit, query) - Specifies the alignment of the data blocks and the data text, within a HUD block. Available alignments are: "left" and "right". The default alignment is "left".
        dfs: (create, edit, query) - Sets the font size of the returned data. Available sizes are: small and large.
        dw: (create, edit, query) - Specifies the pixel width of the virtual "textbox" which will hold a data value. For commands which return more than one value (ie. arrays), one of these "textboxes" will be created for each data element, each with this specified width. If the width of the data value exceeds the width of the "textbox", the data value will be truncated to fit within the dimensions of the "textbox." (To see a layout of a block, see the description of the -block flag.)
        dp: (create, edit, query) - Sets the decimal precision of any floating point value returned by the command. The valid range of precision values are 1 to 8.
        di: (create, edit) - This flag can only be used in conjunction with the -ac/attributeChange flag. If it is specified, and the HUD is attached to a multi (indexed) attribute, then the HUD command will run no matter which attribute in the multi changes.
        ev: (create, edit) - Runs the command when the named event occurs. The named event, must be a pre-defined Maya event. To get a list of what events exist, use the -le/listEvents flag.
        ex: (create, query) - This flag returns whether the given object exists in the Heads-Up Display layout. An object name must be supplied with this command. This flag cannot be combined with any other flag.
        op: (query) - This flag will return the value of the option specified by the string. See setOption for a list of options 			In query mode, this flag needs a value.
        gco: (create, edit, query) - This flag specifies a color for the grid lines using the inactive color palette. Specifying an index number between 1 to 23 will select the corresponding color in the palette.
        l: (create, edit, query) - Text string that appears to the left of the desired information.
        lfs: (create, edit, query) - Sets the font size of the label. Available sizes are: small and large.
        lw: (create, edit, query) - Specifies the pixel width of the virtual "textbox" which will hold the label. The contents of this "textbox" will be left justified. If the width of the actual label exceeds the width of the "textbox," the label will be truncated to fit within the dimensions of the "textbox." (To see a layout of a block, see the description of the -block flag.)
        lob: (create) - Returns the block number of the last occupied block in a given section.
        lv: (create, edit, query) - Sets the visibility of Heads-Up Display layout on and off. This does not modify individual visibilities of heads-up displays, but turns off the layout so that no heads-up displays will draw to screen. Personalized settings for the visibilities of HUDs are kept safe. This flag can only be used by itself, excepting edit and query.
        lc: (create, query) - This flag will return a string array containing all names of the available conditions.
        le: (create, query) - This flag will return a string array containing all names of the available events.
        lh: (create, query) - This flag will return a string array containing all names of existing HUDs.
        lnc: (create, query) - This flag will return a string array containing all names of the available node changes.
        lp: (create, query) - This flag will return a string array containing all names of the available preset HUDs.
        n: (edit) - This flag only permits the EDITING of the name of the Heads-Up Display.
        nfb: (create) - Returns the block number of the next free block in a given section.
        nc: (create, edit, multiuse, query) - Works only with selection based triggers (ie. "SelectionChanged" or "SomethingSelected"), otherwise this flag is ignored. This flag attaches the HUD script to execute on specific node changes of any selected node. This flag is used to set a nodeChange. In order to reset a nodeChange, use the -rnc/resetNodeChanges flag. To view a list of all available node changes, use the -lnc/listNodeChanges flag. The following is a list of available node changes and their function:  attributeChange:  The script will be sensitive to any attribute changes in the currently                   selected nodes.  connectionChange: The script will be sensitive to any connection changes in the currently                   selected nodes.  instanceChange:   The script will be sensitive to any changes to an instance in the                   currently selected nodes.   On query mode, this flag will return the values of all nodeChanges in pairs of values (the name of the nodeChange followed by its value).  WARNING: (Performance Warning)          Attaching a nodeChange trigger to a selection based trigger can cause a large          performance drop, if the node change that is being watched is caused by the          HUD script itself.           With this said, an attempt should be made to keep the HUD command/script                  simple and limited to retrieving data. Changing an attribute, creating or                  modifying a connection or instance will all result in a performance drop.
        p: (create, edit, query) - Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
        pre: (create, edit, query) - This setting is used to select certain pre-defined HUDs, some of which retrieve specific data, that is unobtainable through normal MEL commands or scripts. This flag is mutually exclusive from the command and trigger flag combination. However, presets can work with all other headsUpDisplay attribute flags (ie. block alignment, label, dataFontSize, etc.), unless otherwise specified below. To obtain a list of available presets, use the -lp/listPresets flag on this command.  The following is a list of available presets and a description of each:  cameraNames This will return the camera name that the view is looking through, in the data block, for each view that the HUD is drawing to. polyVerts This will return three values in the data block, regarding the number of vertices that are visible by the camera.  1st Value: Represents the number of camera visible vertices, both active and inactive. 2nd Value: Represents the number of camera visible vertices, on active objects only. 3rd Value: Represents the number of camera visible vertices, that are active.  polyEdges This will return three values in the data block, regarding the number of edges that are visible by the camera. The order of these three values are similar to the polyVerts preset. polyFaces This will return three values in the data block, regarding the number of faces that are visible by the camera. The order of these three values are similar to the polyVerts preset. polyUVs This will return three values in the data block, regarding the number of UVs that are visible by the camera. The order of these three values are similar to the polyVerts preset. polyTriangles This will return three values in the data block, regarding the number of triangles that are visible by the camera. The order of these three values are similar to the polyVerts preset. materialLoadingCount This will return the material loading count. It updates on each refresh. textureLoadingCount This will return the texture loading count. It updates on each refresh. frameRate This will return a single string carrying both the frame rate and the "fps" string in the data block. It updates on each refresh. viewAxis This will draw the orientation of the grid axes within the HUD. It updates on each refresh. While this preset can take in all attribute flags, the only one which will have an effect are block attribute related flags (ie. block alignment and block size). The block dimensions of this preset are: blockSize - "large" and blockWidth - "50", which results in a 50x50 pixel region. distanceFromCamera This will return in the data block the distance from the view's camera to the centre of the bounding box containing the selected objects in the view.
        r: (create) - This flag forces the given Heads-Up Display element to refresh, updating the value displayed.  This flag cannot be combined with any other flag.
        rem: (create, edit) - This command will remove a given HUD object, given a specified HUD name. This flag will override all other flags and is mutually exclusive from the other remove flags.
        rid: (create, edit) - This command will remove a given HUD object, given a specified HUD ID number assigned to it at creation time. This flag will override all other flags and is mutually exclusive from the other remove flags.
        rp: (create, edit) - This command will remove the contents of a specific block location in the HUD layout. This flag will override all other flags and is mutually exclusive from the other remove flags. Syntax for this flag is: -removePosition/rp [section] [block].
        rnc: (edit, multiuse) - This flag will reset a specificied nodeChange back to false. This flag only operates under the edit flag. See the description for the -nc/nodeChanges flag for further details.
        sr: (query) - This flag is only used in conjunction with the query flag. Calling a query on this flag returns the most recent result of the HUD.
        s: (create, edit, query) - Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.   ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |    |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  | |    |    |    |    |    | |____|____|____|____|____| Each section is denoted by a number from 0 to 9 as illustrated above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1  To prevent HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically compensates for this by removing the sections of least priority. These sections are made invisible and a warning is issued to inform the user of the removal. This continues until only the section of highest priority remains.  For each row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority, followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well. The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two sections are of lowest priority.  This means that as the viewport gradually decreases in width to the point where sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and finally section 4. A similar note is provided below for the block layout.
        so: (edit) - This flag will edit the option specified by the first string. Current options are: smpPolyCount - "cage" or "smp" - in smooth mesh preview, determines the poly count display
        sg: (create, edit, query) - This flag will toggle the display of the grid lines of the HUD layout.
        vis: (create, edit, query) - Sets the visibility of the Heads-Up Display on and off.
    """
    ...


def headsUpMessage(*args, ho: Optional[Union[int, bool]] = ..., o: Optional[Union[str, bool]] = ..., s: bool = ..., t: Optional[Union[float, bool]] = ..., uve: bool = ..., vo: Optional[Union[int, bool]] = ..., vp: bool = ...) -> Any:
    r"""
    This command draws a message in the 3d view.  The message
    is automatically erased at the next screen refresh.

    Args:
        ho: (create) - If this flag is specified, the message will appear the specified distance (in pixels) to the right of the point.  Otherwise, a default horizontal offset of 0 pixels is used.
        o: (create) - If an object is specified, then the message is drawn just above the object's bounding-box centre point. If this flag is not specified, or the object is not found, then the message is centred in the current view.
        s: (create) - If this flag is specified, the message will be centred among the currently selected objects.  This flag does nothing if the object flag is also specified.
        t: (create) - If this flag is specified, the message will be displayed for a minimum of the given amount of time (in seconds).  Otherwise a default time of 1.0 seconds is used.
        uve: (create) - Should the HUD be shown in the UV Texture Editor?
        vo: (create) - If this flag is specified, the message will appear the specified distance (in pixels) above the point. Otherwise, a default vertical offset of 0 pixels is used.
        vp: (create) - Should the HUD be shown in the viewport?
    """
    ...


def helpLine(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a help line where tool help/hints
    are shown.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def hotBox(*args, po: bool = ..., pt: bool = ..., ao: bool = ..., at: bool = ..., clo: bool = ..., clt: bool = ..., co: bool = ..., ct: bool = ..., cst: bool = ..., dco: bool = ..., dh: bool = ..., ds: bool = ..., dzo: bool = ..., do: bool = ..., dt: bool = ..., lo: bool = ..., lt: bool = ..., mso: Optional[Union[str, bool]] = ..., mst: Optional[Union[Tuple[str, bool], bool]] = ..., mdo: bool = ..., mdt: bool = ..., ncc: Optional[Union[str, bool]] = ..., ncd: Optional[Union[float, bool]] = ..., ncp: bool = ..., nkp: bool = ..., plo: bool = ..., plt: bool = ..., pos: Optional[Union[Tuple[int, int], bool]] = ..., rl: bool = ..., ro: bool = ..., rt: bool = ..., rgo: bool = ..., rgt: bool = ..., rmb: bool = ..., a: bool = ..., so: bool = ..., st: bool = ..., tr: Optional[Union[int, bool]] = ..., um: bool = ..., query: bool = ...) -> Any:
    r"""
    This command controls parameters related to the hotBox menubar palette.
    When the command is invoked with no flags, the hotBox is popped up.

    Args:
        po: (create) - Sets a row of menus to be the only visible row.
        pt: (create, query) - Sets the visibilty of a row of menus to on or off.
        ao: (create, query) - 
        at: (create, query) - 
        clo: (create, query) - 
        clt: (create, query) - 
        co: (create, query) - 
        ct: (create, query) - 
        cst: (create, query) - 
        dco: (create) - Three different display styles are defined for the hotBox. It can be fully displayed (dh), display only the marking menu zones (dzo) or no display (dco) which means that the entire screen can be used to access the marking menus defined in the center zone.
        dh: (create, query) - 
        ds: (query) - Returns a string that identifies the flag used to set the current display style. The results can be dh, dzo, or dco, depending on  which style the hotBox is using at the moment.
        dzo: (create, query) - 
        do: (create, query) - 
        dt: (create, query) - 
        lo: (create, query) - 
        lt: (create, query) - 
        mso: (create) - Show only the named menu set
        mst: (create) - Update the given menu sets with the paired toggle value
        mdo: (create, query) - 
        mdt: (create, query) - 
        ncc: (create) - The command to be executed if the hotBox is engaged and then disengaged within noClickDelay time units.
        ncd: (create) - If the hotBox is engaged and then disengaged within this time interval, then the noClickCommand is executed. The time interval is in seconds.  The default value is 0.1.
        ncp: (create) - If a -noClickCommand has been specified then this flag will cause the X and Y screen coordinates of the mouse pointer to be appended as arguments to that command. The coordinates used are those of the pointer at the time when the hotbox command was initiated.
        nkp: (create, query) - Normally the hotbox is popped by a pressing a keyboard key. Use the nkp flag to pop the hotbox from a device other than the keyboard (still use the rl flag to unpop the hotbox).
        plo: (create, query) - 
        plt: (create, query) - 
        pos: (create) - Specify the screen position the hotbox should be centered at next time it is displayed.  The default is the cursor position.
        rl: (create, query) - Action to be called on the release of the key which invoked the hotbox
        ro: (create, query) - 
        rt: (create, query) - 
        rgo: (create, query) - 
        rgt: (create, query) - 
        rmb: (create, query) - Enables/Disables a popup menu of the current function set. This popup menu appear when the right mouse button is pressed in the center zone of the hotbox.
        a: (create, query) - Sets the visibility of all menus to on or off. When queried, will only return true if all menu rows are visible.
        so: (create, query) - 
        st: (create, query) - 
        tr: (create, query) - The percentage of transparency, from 0 to 100. Currently, only the values 0, 25, 50, 75 and 100 are supported.  Any other values will be rounded off to the nearest supported value.
        um: (create) - Reloads the hotBox menus from the main menubar. This flag is used when the menus in the main menubar are modified, and the hotBox menus need to be refreshed.
    """
    ...


def hotkey(*args, alt: bool = ..., autoSave: bool = ..., cmd: bool = ..., ctl: bool = ..., cc: Optional[Union[str, bool]] = ..., dp: bool = ..., fs: bool = ..., mod: bool = ..., k: Optional[Union[str, bool]] = ..., n: Optional[Union[str, bool]] = ..., pcr: bool = ..., rcr: bool = ..., rn: Optional[Union[str, bool]] = ..., sht: bool = ..., suh: bool = ..., query: bool = ...) -> Any:
    r"""
    This command sets the single-key hotkeys for the entire application.

    Args:
        alt: (create, query) - 
        autoSave: (create) - If set to true then the hotkeys will always be saved when you quit.  If false then the hotkeys are not saved unless "savePrefs -hotkeys" is used.
        cmd: (create) - The Command key must be pressed to get the hotkey. This is only available on systems which have a separate command key. Note that if menu item accelerator keys are being used (menuItem -ke/keyEquivalent), then the accelerator key settings override the hotkey settings.
        ctl: (create, query) - The Ctrl key must be pressed to get the hotkey. Note that if menu item accelerator keys are being used (menuItem -ke/keyEquivalent), then the accelerator key settings override the hotkey settings.
        cc: (create, query) - Specifies the hotkey context. It is used together with the other flags to modify or query the hotkey for a certain hotkey context. If it is not specified, the global hotkey context will be taken into account. Check hotkeyCtx command to see how the hotkeys work with the hotkey contexts.
        dp: (create) - Specify true and the command may be executed during manipulator dragging, if the tool context also allows this. This flag is false by default.
        fs: (create) - Resets the hotkeys back to the initial defaults.
        mod: (create) - This flag is obsolete and should no longer be used.
        k: (create) - Specify what key is being set. The key must be either a single ascii character (capital and lowercase can be set independently) or one of the keyword strings for the special keyboard characters.  The valid keywords are: Up, Down, Right, Left, Home, End, Page_Up, Page_Down, Insert Return, Space F1 to F12 Tab (Will only work when modifiers are specified) Delete, Backspace (Will only work when modifiers are specified)
        n: (create, query) - The name of the namedCommand object that will be executed when the key is pressed.
        pcr: (create) - Specify true and the command may be repeated by executing the command repeatLast. This flag is false by default.
        rcr: (create) - Specify true and the command may be repeated by executing the command repeatLast. This flag is false by default.
        rn: (create, query) - The name of the namedCommand object that will be executed when the key is released.
        sht: (create, query) - The Shift key must be pressed to get the hotkey.
        suh: (create) - This flag is obsolete. Please use import flag from hotkeySet command to import the user hotkeys.
    """
    ...


def hotkeyCheck(*args, alt: bool = ..., cmd: bool = ..., ctl: bool = ..., ir: bool = ..., k: Optional[Union[str, bool]] = ..., kup: bool = ..., opt: bool = ...) -> Any:
    r"""
    This command checks if the given hotkey is mapped to a nameCommand
    object.  If so, the annotation of the nameCommand object is returned.
    Otherwise an empty string is returned.

    Args:
        alt: (create) - Specifies if the Alt key is pressed.
        cmd: (create) - Specifies if the command key is pressed.
        ctl: (create) - Specifies if the Ctrl key is pressed.
        ir: (create) - Specify this flag if the hotkey is repeatable.
        k: (create) - The key to check.
        kup: (create) - Specifies if the hotkey is on keyup or keydown (i.e. Release or Press).
        opt: (create) - Specifies if the option key is pressed.
    """
    ...


def hotkeyCtx(*args, ac: Optional[Union[str, bool]] = ..., ca: bool = ..., cc: Optional[Union[str, bool]] = ..., ita: Optional[Union[Tuple[str, str], bool]] = ..., rac: bool = ..., rc: Optional[Union[str, bool]] = ..., rt: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., ta: bool = ..., te: Optional[Union[str, bool]] = ..., query: bool = ...) -> Any:
    r"""
    This command sets the hotkey context for the entire application.

    Args:
        ac: (create, multiuse) - Associates a client to the given hotkey context type. This flag needs to be used with the flag "type" which specifies the context type.
        ca: (query) - Returns an array of the all context clients associated to the hotkey context type. This flag needs to be used with the flag "type" which specifies the context type.
        cc: (create, query) - Current client for the given hotkey context type. This flag needs to be used with the flag "type" which specifies the context type.
        ita: (create) - Inserts a new hotkey context type in the front of the given type. The first argument specifies an existing type. If it's empty, the new context type will be inserted before "Global" context type. The second argument specifies the name of new context type.
        rac: (create) - Removes all the clients associated to the hotkey context type. This flag needs to be used with the flag "type" which specifies the context type.
        rc: (create, multiuse) - Removes a client associated to the hotkey context type. This flag needs to be used with the flag "type" which specifies the context type.
        rt: (create) - Removes the given hotkey context type.
        t: (create, query) - Specifies the context type. It's used together with the other flags such as "currentClient", "addClient", "removeClient" and so on.
        ta: (query) - Returns a string array containing the names of all hotkey context types, ordered by priority.
        te: (query) - Returns true|false depending upon whether the specified hotkey context type exists.       In query mode, this flag needs a value.
    """
    ...


def hotkeyEditorPanel(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    A hotkeyEditor creates a new hotkey editor in the current layout.
    The hotkey editor lets you assign predefined commands, MEL scripts, or
    marking menus to keys and key combinations.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def hotkeySet(*args, cu: bool = ..., delete: bool = ..., ex: bool = ..., ep: str = ..., hsa: bool = ..., ip: str = ..., re: str = ..., src: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Manages hotkey sets in Maya. A hotkey set holds hotkey to command mapping information.
    Default hotkey sets are hotkey sets that are shipped together with Maya. They are locked and cannot be altered.
    
    A new hotkey set is always duplicated from an existing hotkey set. In create mode, users can choose to specify
    which hotkey set to duplicate by using the -source flag. A duplicated hotkey set is independent from the source
    hotkey set.

    Args:
        cu: (create, edit, query) - Sets the hotkey set as the current active hotkey set. In query mode, returns the name of the current hotkey set.
        delete: (edit) - Deletes the hotkey set if it exists. Other flags are ignored. Returns true|false depending on the delete operation.
        ex: (create) - Returns true|false depending upon whether the specified object exists. Other flags are ignored.
        ep: (edit) - Exports a hotkey set. The argument is used to specify a full path of the output file.
        hsa: (query) - Returns a string array of all existing hotkey set names.
        ip: (edit) - Imports a hotkey set. The argument is used to specify a full path of the hotkey set file to import.
        re: (edit) - Renames an existing hotkey set. All white spaces will be replaced with '_' during operation.
        src: (create) - Specifies the source hotkey set. If flag is not provided, the current active hotkey set is used.
    """
    ...


def hudButton(*args, ao: bool = ..., b: Optional[Union[int, bool]] = ..., ba: Optional[Union[str, bool]] = ..., bs: Optional[Union[str, bool]] = ..., bsh: Optional[Union[str, bool]] = ..., bw: Optional[Union[int, bool]] = ..., l: Optional[Union[str, bool]] = ..., lfs: Optional[Union[str, bool]] = ..., p: Optional[Union[int, bool]] = ..., pc: Optional[Union[str, bool]] = ..., rc: Optional[Union[str, bool]] = ..., s: Optional[Union[int, bool]] = ..., vis: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a Heads-up Display (HUD) button control which is placed in
    a 2D inactive overlay plane on the 3D viewport. It is to be used to provide hands-on
    interaction designated by a user script. The HUD button is derived from
    a generic HUD object and thus inherits a similar workflow.
    
    Although this command provides much of the same functionality as the headsUpDisplay
    command, it does not provide headsUpDisplay layout controls such as layoutVisibility,
    nextFreeBlock, lastOccupiedBlock, exists, remove, etc. To access that functionality,
    please use the headsUpDisplay command. This command is focused solely around the creation
    and management of HUD button controls. Similarly, all operations performed by
    this command are limited to HUDs that are button controls.
    
    The only mandatory flags, on creation are the section and block flags.
    
    Like the headsUpDisplay command, upon creation of a HUD button, an ID number
    will be assigned to it. This can be used to remove the HUD via the headsUpDisplay
    command (-rid/removeID [int IDNumber]), if desired. Alternatively, the headsUpDisplay
    command can remove HUD objects via their position (section and block),
    or their unique name.

    Args:
        ao: (create, edit, query) - Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag description for more details).
        b: (create, edit, query) - Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column of blocks. The total number of blocks contained within each section is variable.  The number of blocks that will be visible within each section is dependent on the size of blocks contained in each section and the current size of the window. Blocks begin enumerating from 0 and flexibly increase based on need.  For HUD buttons, the format differs from that of the standard HUD. The layout using parameters defined by the formatting flags listed below (eg. justify, padding, buttonWidth) is shown below:   __________________________________ |     |     |          |     |     | |  P  |  J  |  Button  |  J  |  P  | |_____|_____|__________|_____|_____| P = Sub-block of width, padding J = Justification of the entire block Button = Sub-block of width, buttonWidth   Block Positioning  Blocks on the top section begin from the top edge of the main viewport, while the bottom section begins from the bottom edge. Blocks are dynamically removed from visibility from the midpoint of the viewport. So, a relatively large block number will not draw to the viewport.  Lastly, there can be at most one HUD occupying a block at any time. Trying to position a HUD in an occupied block will result in an error. Keep this in mind when positioning the HUD.
        ba: (create, edit, query) - Specifies the alignment of the block within its respective column. Available alignments are: "center", "left" and "right". The default alignment is "left".
        bs: (create, edit, query) - Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds to a 20, 35 or 50 pixel height, respectively.
        bsh: (create, edit, query) - Specifies the shape of the button. Available button shapes are: "rectangle" and "roundRectangle". The first will draw a rectangular button, while the latter is a rectangle with rounded edges.
        bw: (create, edit, query) - Specifies the width of the button.
        l: (create, edit, query) - Text label of the HUD button.
        lfs: (create, edit, query) - Sets the font size of the label. Available sizes are: small and large.
        p: (create, edit, query) - Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
        pc: (create, edit, query) - Specifies the procedure or script to run during a mouse click event.
        rc: (create, edit, query) - Specifies the procedure or script to run during a mouse release event.
        s: (create, edit, query) - Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.   ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |    |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  | |    |    |    |    |    | |____|____|____|____|____| Each section is denoted by a number from 0 to 9 as illustrated above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1  To prevent HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically compensates for this by removing the sections of least priority. These sections are made invisible and a warning is issued to inform the user of the removal. This continues until only the section of highest priority remains.  For each row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority, followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well. The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two sections are of lowest priority.  This means that as the viewport gradually decreases in width to the point where sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and finally section 4. A similar note is provided below for the block layout.
        vis: (create, edit, query) - Sets the visibility of the Heads-Up Display on and off.
    """
    ...


def hudSlider(*args, ao: bool = ..., b: Optional[Union[int, bool]] = ..., ba: Optional[Union[str, bool]] = ..., bs: Optional[Union[str, bool]] = ..., dp: Optional[Union[int, bool]] = ..., dc: Optional[Union[str, bool]] = ..., ip: Optional[Union[int, bool]] = ..., l: Optional[Union[str, bool]] = ..., lfs: Optional[Union[str, bool]] = ..., lw: Optional[Union[int, bool]] = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., p: Optional[Union[int, bool]] = ..., pc: Optional[Union[str, bool]] = ..., rc: Optional[Union[str, bool]] = ..., s: Optional[Union[int, bool]] = ..., si: Optional[Union[float, bool]] = ..., sl: Optional[Union[int, bool]] = ..., t: Optional[Union[str, bool]] = ..., v: Optional[Union[float, bool]] = ..., va: Optional[Union[str, bool]] = ..., vfs: Optional[Union[str, bool]] = ..., vw: Optional[Union[int, bool]] = ..., vis: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a Heads-up Display (HUD) slider control which is placed in a 2D
    inactive overlay plane on the 3D viewport. It is to be used to provide hands-on
    interaction designated by a user script. The HUD slider is derived from
    a generic HUD object and thus inherits a similar workflow.
    
    Although this command provides much of the same functionality as the headsUpDisplay
    command, it does not provide headsUpDisplay layout controls such as layoutVisibility,
    nextFreeBlock, lastOccupiedBlock, exists, remove, etc. To access that functionality,
    please use the headsUpDisplay command. This command is focused solely around the creation
    and management of HUD sliders. Similarly, all operations performed by this command
    are limited to HUDs that are sliders.
    
    The only mandatory flags, on creation are the section and block flags.
    
    Like the headsUpDisplay command, upon creation of a HUD slider, an ID number will be
    assigned to it. This can be used to remove the HUD slider via the headsUpDisplay
    command (-rid/removeID [int IDNumber]), if desired. Alternatively, the headsUpDisplay
    command can remove HUD objects via their position (section and block),
    or their unique name.

    Args:
        ao: (create, edit, query) - Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag description for more details).
        b: (create, edit, query) - Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column of blocks. The total number of blocks contained within each section is variable.  The number of blocks that will be visible within each section is dependent on the size of blocks contained in each section and the current size of the window. Blocks begin enumerating from 0 and flexibly increase based on need.  For HUD sliders, the format differs from that of the standard HUD. The layout using parameters defined by the formatting flags listed below (eg. justify, padding, labelWidth, valueWidth) is shown below:   __________________________________________________________________ |     |     |        |            |      |             |     |     | |  P  |  J  |   LW   |   Slider   |  IP  | SliderValue |  J  |  P  | |_____|_____|________|____________|______|_____________|_____|_____| P = Sub-block of width, padding J = Justification of the entire block LW = Sub-block of width, labelWidth Slider = Length of the slider SliderValue = Sub-block of width, valueWidth IP = Internal padding   Block Positioning  Blocks on the top section begin from the top edge of the main viewport, while the bottom section begins from the bottom edge. Blocks are dynamically removed from visibility from the midpoint of the viewport. So, a relatively large block number will not draw to the viewport.  Lastly, there can be at most one HUD occupying a block at any time. Trying to position a HUD in an occupied block will result in an error. Keep this in mind when positioning the HUD.
        ba: (create, edit, query) - Specifies the alignment of the block within its respective column. Available alignments are: "center", "left" and "right". The default alignment is "left".
        bs: (create, edit, query) - Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds to a 20, 35 or 50 pixel height, respectively.
        dp: (create, edit, query) - Sets the decimal precision of any floating point value returned by the command. The valid range of precision values are 1 to 8.
        dc: (create, edit, query) - Specifies the procedure or script to run during a mouse drag event.
        ip: (create, edit, query) - Specifies the amount of padding between the internal elements of the HUD. For the hudSlider, this represents the padding between the slider bar and the slider value. The default padding is 10.
        l: (create, edit, query) - Text label of the HUD.
        lfs: (create, edit, query) - Sets the font size of the label. Available sizes are: small and large.
        lw: (create, edit, query) - Specifies the pixel width of the virtual "textbox" which will hold the label. The contents of this "textbox" will be left justified. If the width of the actual label exceeds the width of the "textbox," the label will be truncated to fit within the dimensions of the "textbox." (To see a layout of a block, see the description of the -block flag.)
        max: (create, edit, query) - Specify the maximum value of the slider. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        min: (create, edit, query) - Specify the minimum value of the slider. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        p: (create, edit, query) - Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
        pc: (create, edit, query) - Specifies the procedure or script to run during a mouse click event.
        rc: (create, edit, query) - Specifies the procedure or script to run during a mouse release event.
        s: (create, edit, query) - Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.   ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |    |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  | |    |    |    |    |    | |____|____|____|____|____| Each section is denoted by a number from 0 to 9 as illustrated above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1  To prevent HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically compensates for this by removing the sections of least priority. These sections are made invisible and a warning is issued to inform the user of the removal. This continues until only the section of highest priority remains.  For each row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority, followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well. The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two sections are of lowest priority.  This means that as the viewport gradually decreases in width to the point where sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and finally section 4. A similar note is provided below for the block layout.
        si: (create, edit, query) - Specify the number of increments along the slider. If not specified or set to 0 or less, the slider will be linearly even and continuous from minValue to maxValue. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        sl: (create, edit, query) - Specifies the length of the slider in pixels.
        t: (create, edit, query) - Specify the numeric type of the HUD. Available types are: "float" and "int".
        v: (create, edit, query) - Set/Return the slider value if the HUD is a valid HUD slider. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        va: (create, edit, query) - Specifies the alignment of the data blocks and the data text, within a HUD block. Available alignments are: "left" and "right". The default alignment is "left".
        vfs: (create, edit, query) - Sets the font size of the slider value. Available sizes are: small and large.
        vw: (create, edit, query) - Specifies the pixel width of the virtual "textbox" which will hold the slider value. (To see a layout of a block, see the description of the -block flag.)
        vis: (create, edit, query) - Sets the visibility of the Heads-Up Display on and off.
    """
    ...


def hudSliderButton(*args, ao: bool = ..., b: Optional[Union[int, bool]] = ..., ba: Optional[Union[str, bool]] = ..., bs: Optional[Union[str, bool]] = ..., bl: Optional[Union[str, bool]] = ..., bfs: Optional[Union[str, bool]] = ..., bpc: Optional[Union[str, bool]] = ..., brc: Optional[Union[str, bool]] = ..., bsh: Optional[Union[str, bool]] = ..., bw: Optional[Union[int, bool]] = ..., dp: Optional[Union[int, bool]] = ..., ip: Optional[Union[int, bool]] = ..., max: Optional[Union[float, bool]] = ..., min: Optional[Union[float, bool]] = ..., p: Optional[Union[int, bool]] = ..., s: Optional[Union[int, bool]] = ..., sdc: Optional[Union[str, bool]] = ..., si: Optional[Union[float, bool]] = ..., sl: Optional[Union[str, bool]] = ..., sfs: Optional[Union[str, bool]] = ..., slw: Optional[Union[int, bool]] = ..., sln: Optional[Union[int, bool]] = ..., spc: Optional[Union[str, bool]] = ..., src: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., v: Optional[Union[float, bool]] = ..., va: Optional[Union[str, bool]] = ..., vfs: Optional[Union[str, bool]] = ..., vw: Optional[Union[int, bool]] = ..., vis: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a Heads-up Display (HUD) slider button control which is placed in
    a 2D inactive overlay plane on the 3D viewport. It is to be used to provide hands-on
    interaction designated by a user script. The HUD slider button control is derived from
    a generic HUD object and thus inherits a similar workflow.
    
    Although this command provides much of the same functionality as the headsUpDisplay
    command, it does not provide headsUpDisplay layout controls such as layoutVisibility,
    nextFreeBlock, lastOccupiedBlock, exists, remove, etc. To access that functionality,
    please use the headsUpDisplay command. This command is focused solely around the creation
    and management of HUD slider button controls. Similarly, all operations performed by
    this command are limited to HUDs that are slider button controls.
    
    The only mandatory flags, on creation are the section and block flags.
    
    Like the headsUpDisplay command, upon creation of a HUD slider button, an ID number
    will be assigned to it. This can be used to remove the HUD slider via the headsUpDisplay
    command (-rid/removeID [int IDNumber]), if desired. Alternatively, the headsUpDisplay
    command can remove HUD objects via their position (section and block),
    or their unique name.

    Args:
        ao: (create, edit, query) - Sets the Heads-Up Display to be visible regardless of overlapping section widths/limitations (see -s/section flag description for more details).
        b: (create, edit, query) - Denotes the individual block that the HUD will reside in, within a section. Each section is composed of a single column of blocks. The total number of blocks contained within each section is variable.  The number of blocks that will be visible within each section is dependent on the size of blocks contained in each section and the current size of the window. Blocks begin enumerating from 0 and flexibly increase based on need.  For HUD sliders, the format differs from that of the standard HUD. The layout using parameters defined by the formatting flags listed below (eg. justify, padding, labelWidth, valueWidth) is shown below:  __________________________________________________________________________ |     |     |      |           |      |       |      |        |     |     | |  P  |  J  |  LW  |  Slider   |  IP  | Value |  IP  | Button |  J  |  P  | |_____|_____|______|___________|______|_______|______|________|_____|_____| P = Sub-block of width, padding J = Justification of the entire block LW = Sub-block of width, labelWidth Slider = Length of the slider SliderValue = Sub-block of width, valueWidth Button = Sub-block of width, buttonWidth IP = Internal Padding   Block Positioning  Blocks on the top section begin from the top edge of the main viewport, while the bottom section begins from the bottom edge. Blocks are dynamically removed from visibility from the midpoint of the viewport. So, a relatively large block number will not draw to the viewport.  Lastly, there can be at most one HUD occupying a block at any time. Trying to position a HUD in an occupied block will result in an error. Keep this in mind when positioning the HUD.
        ba: (create, edit, query) - Specifies the alignment of the block within its respective column. Available alignments are: "center", "left" and "right". The default alignment is "left".
        bs: (create, edit, query) - Sets the height of each block. Available heights are: small, medium and large. In pixel measurements, each corresponds to a 20, 35 or 50 pixel height, respectively.
        bl: (create, edit, query) - Text label of the HUD button.
        bfs: (create, edit, query) - Sets the font size of the button label. Available sizes are: small and large.
        bpc: (create, edit, query) - Specifies the procedure or script to run during a button mouse click event.
        brc: (create, edit, query) - Specifies the procedure or script to run during a button mouse release event.
        bsh: (create, edit, query) - Specifies the shape of the button. Available button shapes are: "rectangle" and "roundRectangle". The first will draw a rectangular button, while the latter is a rectangle with rounded edges.
        bw: (create, edit, query) - Specifies the width of the button.
        dp: (create, edit, query) - Sets the decimal precision of any floating point value returned by the command. The valid range of precision values are 1 to 8.
        ip: (create, edit, query) - Specifies the amount of padding between the internal elements of the HUD. For the hudSlider, this represents the padding between the slider bar and the slider value. The default padding is 10.
        max: (create, edit, query) - Specify the maximum value of the slider. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        min: (create, edit, query) - Specify the minimum value of the slider. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        p: (create, edit, query) - Specifies the width of both the left and right margins of a block. Default value is 15 pixels.
        s: (create, edit, query) - Defines the section the HUD will appear in. There are 10 sections divided across the screen. Five columns and two rows make up the ten element matrix which divide the main viewport. Here is a visual layout of the sections.   ________________________ |    |    |    |    |    | |    |    |    |    |    | | 0  | 1  | 2  | 3  | 4  | |    |    |    |    |    | |____|____|____|____|____| |    |    |    |    |    | |    |    |    |    |    | | 5  | 6  | 7  | 8  | 9  | |    |    |    |    |    | |____|____|____|____|____| Each section is denoted by a number from 0 to 9 as illustrated above. For example, if the second column of the top row was desired, the section would be defined as: -sec 1  To prevent HUD objects from displaying over each other and causing a clutter of letters, each row has a defined visibility precedence, where each section would have a visibility priority level. Depending on each priority level, when the screen space begins to shrink to a point where the section widths of a given row begin to collide, the HUD automatically compensates for this by removing the sections of least priority. These sections are made invisible and a warning is issued to inform the user of the removal. This continues until only the section of highest priority remains.  For each row, the priorities are defined as follows. Using the top row as an example: Section 0, has the highest priority, followed by Section 4, making the outermost sections of highest priority. Next in the list is Section 2, and lastly Sections 1 and 3 are of the equal and least priority. This priority structure can be applied to the bottom row as well. The two outermost sections have the highest priority, followed by the middle section, and finally the remaining two sections are of lowest priority.  This means that as the viewport gradually decreases in width to the point where sections in the top row begin to overlap, sections 1 and 3 will be removed from view first, followed by section 2, and finally section 4. A similar note is provided below for the block layout.
        sdc: (create, edit, query) - Specifies the procedure or script to run during a slider mouse drag event.
        si: (create, edit, query) - Specify the number of increments along the slider. If not specified or set to 0 or less, the slider will be linearly even and continuous from minValue to maxValue. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        sl: (create, edit, query) - Text label of the HUD slider.
        sfs: (create, edit, query) - Sets the font size of the slider label. Available sizes are: small and large.
        slw: (create, edit, query) - Specifies the pixel width of the virtual "textbox" which will hold the label. The contents of this "textbox" will be left justified. If the width of the actual label exceeds the width of the "textbox," the label will be truncated to fit within the dimensions of the "textbox." (To see a layout of a block, see the description of the -block flag.)
        sln: (create, edit, query) - Specifies the length of the slider in pixels.
        spc: (create, edit, query) - Specifies the procedure or script to run during a slider mouse click event.
        src: (create, edit, query) - Specifies the procedure or script to run during a slider mouse release event.
        t: (create, edit, query) - Specify the numeric type of the HUD. Available types are: "float" and "int".
        v: (create, edit, query) - Set/Return the slider value if the HUD is a valid HUD slider. Note: Although this flag takes in a FLOAT as an argument, if the HUD type is "int", the value will be automatically converted internally to an integer.
        va: (create, edit, query) - Specifies the alignment of the data blocks and the data text, within a HUD block. Available alignments are: "left" and "right". The default alignment is "left".
        vfs: (create, edit, query) - Sets the font size of the slider value. Available sizes are: small and large.
        vw: (create, edit, query) - Specifies the pixel width of the virtual "textbox" which will hold the slider value. (To see a layout of a block, see the description of the -block flag.)
        vis: (create, edit, query) - Sets the visibility of the Heads-Up Display on and off.
    """
    ...


def hyperGraph(*args, abk: bool = ..., adg: Optional[Union[str, bool]] = ..., adn: Optional[Union[str, bool]] = ..., atr: bool = ..., ae: Optional[Union[str, bool]] = ..., bak: bool = ..., bn: bool = ..., bco: Optional[Union[str, bool]] = ..., clr: bool = ..., cc: bool = ..., cds: Optional[Union[str, bool]] = ..., ctl: bool = ..., ced: Optional[Union[str, bool]] = ..., cno: Optional[Union[str, bool]] = ..., deb: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dbk: Optional[Union[str, bool]] = ..., dg: bool = ..., dn: Optional[Union[str, bool]] = ..., dp: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., do: bool = ..., ds: bool = ..., ddc: Optional[Union[str, bool]] = ..., dr: Optional[Union[str, bool]] = ..., drt: Optional[Union[str, bool]] = ..., edc: Optional[Union[str, bool]] = ..., edd: Optional[Union[str, bool]] = ..., edr: Optional[Union[str, bool]] = ..., ep: Optional[Union[str, bool]] = ..., er: Optional[Union[str, bool]] = ..., eal: bool = ..., ex: bool = ..., ec: bool = ..., fbg: Optional[Union[str, bool]] = ..., fbn: Optional[Union[str, bool]] = ..., f: Optional[Union[str, bool]] = ..., fd: Optional[Union[Tuple[str, bool], bool]] = ..., fih: bool = ..., fiw: bool = ..., fc: Optional[Union[str, bool]] = ..., fo: bool = ..., fmc: Optional[Union[str, bool]] = ..., frf: bool = ..., fow: bool = ..., fr: bool = ..., frb: bool = ..., fg: bool = ..., fgn: bool = ..., frh: bool = ..., fre: bool = ..., fat: Optional[Union[str, bool]] = ..., frn: Optional[Union[str, bool]] = ..., gnl: bool = ..., gnp: Optional[Union[str, bool]] = ..., gd: bool = ..., gls: Optional[Union[str, bool]] = ..., gt: Optional[Union[str, bool]] = ..., hmd: bool = ..., hlc: Optional[Union[str, bool]] = ..., ics: Optional[Union[str, bool]] = ..., img: Optional[Union[str, bool]] = ..., ime: bool = ..., ifc: bool = ..., imp: Optional[Union[Tuple[float, float], bool]] = ..., ims: Optional[Union[float, bool]] = ..., ini: Optional[Union[str, bool]] = ..., iht: bool = ..., lay: bool = ..., lsl: Optional[Union[str, bool]] = ..., lgt: Optional[Union[int, bool]] = ..., lck: bool = ..., loo: Optional[Union[Tuple[float, float], bool]] = ..., mlc: Optional[Union[str, bool]] = ..., mc: bool = ..., hom: bool = ..., nu: bool = ..., nin: Optional[Union[str, bool]] = ..., nou: Optional[Union[str, bool]] = ..., nvw: bool = ..., nco: Optional[Union[str, bool]] = ..., ndc: Optional[Union[str, bool]] = ..., ndr: Optional[Union[str, bool]] = ..., nm: Optional[Union[str, bool]] = ..., np: Optional[Union[str, bool]] = ..., nr: Optional[Union[str, bool]] = ..., opc: bool = ..., orientation: Optional[Union[str, bool]] = ..., pan: Optional[Union[Tuple[float, float], bool]] = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pms: Optional[Union[str, bool]] = ..., pvw: bool = ..., rg: Optional[Union[Tuple[float, float], bool]] = ..., rb: bool = ..., rmn: Optional[Union[str, bool]] = ..., rn: bool = ..., rf: bool = ..., rbk: Optional[Union[str, bool]] = ..., snz: bool = ..., slc: Optional[Union[str, bool]] = ..., snp: Optional[Union[Tuple[str, float, float], bool]] = ..., scc: bool = ..., scf: bool = ..., sct: bool = ..., scl: bool = ..., shc: bool = ..., shd: bool = ..., shx: bool = ..., shi: bool = ..., shr: bool = ..., shs: bool = ..., shu: bool = ..., sts: bool = ..., tat: Optional[Union[str, bool]] = ..., ton: Optional[Union[str, bool]] = ..., tfr: Optional[Union[int, bool]] = ..., up: bool = ..., uf: bool = ..., ua: bool = ..., uas: bool = ..., ufh: bool = ..., ulk: bool = ..., upd: bool = ..., una: bool = ..., us: bool = ..., ups: bool = ..., drc: bool = ..., ufl: bool = ..., ut: Optional[Union[str, bool]] = ..., vo: Optional[Union[str, bool]] = ..., vis: bool = ..., zm: Optional[Union[float, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    The following is an overview of the basic features of the hypergraph.
    A more detailed description is given in the user manuals.
    
    The hypergraph provides the user with the ability to view and edit
    the maya scene graph.  The hypergraph supports two types of graphs:
    the DAG or scene hierarchy and the dependency graph.
    
    The default view of the hypergraph editor is the DAG view.
    The user can show the dependency graph for a collection of nodes by
    first selecting the nodes and navigating to the dependency graph using one
    of the graph options.  The user can save any view by setting a
    bookmark to that view.  The user can also show previous views using
    the view options provided.
    
    The hypergraph supports a simple editing mechanism for editing hierarchy
    in the DAG view and connections in dependency graph view.
    In the DAG  view, the user can reparent or reorder nodes in the graph
    using drag-and-drop. In the dependency graph view, the user can select
    connections and delete them or make new connections by dragging and
    dropping nodes or existing connections.
    
    The hypergraph supports two layout modes in the DAG view: automatic and
    freeform.  In automatic mode, the graph nodes are automatically
    positioned according to the layout preferences.  In freeform mode, the
    user can position nodes manually.  The node position is saved in the scene.
    A background image can be placed behind DG or DAG in freeform mode.
    This can be used as a template for positioning nodes in a user-defined
    layout.
    
    Nodes in the DAG view can be expanded or collapsed.  The state is saved
    in the scene.  The performance of the graph drawing will increase
    as hierarchies are collapsed.
    
    In addition to hierachy relationships, the hypergraph can show
    expression, constraint and deformation relationships in the DAG.
    These can be enabled/disabled through the options provided.  There
    are also additional filters for showing shape nodes and invisible
    nodes.  The amount of detail show may affect the speed of the display
    of the graph.
    
    Most of the UI features of the hypergraph are addressable through the
    hypergraph command-line interface.  The available command-line
    options are described in the next section.

    Args:
        abk: (create, edit) - Create a bookmark for the current hypergraph view.
        adg: (create, edit) - Add a dependency graph starting at the named node to the view
        adn: (create, edit) - Add a dependency node to the dependency graph view
        atr: (create, edit, query) - Turns animate transitions off and on.
        ae: (create, edit) - Launches attribute editor on selected node.
        bak: (create, edit) - Navigate backward one step.
        bn: (query) - Returns the bookmark name for the most recently created bookmark.
        bco: (create, edit, query) - Specify the command to call when a connection is broken.
        clr: (create, edit) - Clears the current hypergraph view and deletes the graph UI. (see also -rebuild flag)
        cc: (create, edit) - Collapses containers selected in DG graph.
        cds: (create, edit) - Specify how connections between nodes should be drawn. Valid values are "center" (draws connection lines from the center of one node to the center of the other) and "side" (draws connection lines from the right side of the source node to the left side of the destination node). The default is "center". This flag does not apply to Hypershade graphs, which are always drawn with the "side" connection draw style.
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        ced: (edit, query) - Return the current edge name.
        cno: (edit, query) - Return the current node name.
        deb: (create, edit) - Run a debug method on the graph
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dbk: (create, edit) - Delete the bookmark with the corresponding node name.
        dg: (create, edit) - Displays dependency graph iterated from specified node.
        dn: (create, edit) - Displays dependency node in view.
        dp: (create, edit) - Specify a command to run when a directory is pressed.
        dtg: (create, edit, query) - Attaches a tag to the editor.
        do: (create, edit) - Navigate down to the dependency graph containing the current selection. Shows upstream and downstream connections.
        ds: (create, edit) - Show downstream dependency graph of selected node(s).
        ddc: (create, edit) - Mel proc called when a drag and drop onto a hyperGraph node has occurred. Proc signature is procName (string $editor, string $sourceNode, string $destinationNode).
        dr: (query) - Returns the name of the source node in a drag and drop connection, when called during processing of a drop.
        drt: (query) - Returns the name of the destination node in a drag and drop connection, when called during processing of a drop.
        edc: (create, edit) - Mel proc called when an edge is double clicked.  Proc signature is procName (string $editor, string $edge).
        edd: (create, edit) - Mel proc called when a dimmed edge is double clicked.  Proc signature is procName (string $editor, string $edge).
        edr: (create, edit) - Command to execute when an edge drop occurs.
        ep: (create, edit) - Command to execute when an edge press occurs.
        er: (create, edit) - Command to execute when an edge release occurs.
        eal: (create, edit) - Rebuild the graph if a node is added or removed from the graph via drag and drop or dg messages. Default is true.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        ec: (create, edit) - Expands containers selected in DG graph.
        fbg: (query) - Returns the name of the current gadget.
        fbn: (query) - Returns the name of the current feedback or highlight node.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        fd: (create, edit) - This flag is obsolete. Use the showConstraints, showExpressions, showDeformer, showInvisible, showShapes and showUnderworld flags instead.
        fih: (create) - Changes position and scale of background image, so its height fits current editor view.
        fiw: (create) - Changes position and scale of background image, so its width fits current editor view.
        fc: (create, edit) - Mel proc to be run when the mouse is clicked in the hyper graph. Primarily of use in setting the window focus.
        fo: (create, edit) - Folds (Collapses) selected object.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        frf: (create, edit) - Forces the hypergraph to refresh (redraw) its contents.
        fow: (create, edit) - Navigate forward one step.
        fr: (create, edit) - Frames the selected objects
        frb: (create, edit) - Frames the the branch from the selected node on downward.
        fg: (create, edit) - Frames the entire graph.
        fgn: (create, edit) - Specify that on zoom out the graph should not rebuild; for efficiency.
        frh: (create, edit) - Frames the hierarchy that contains the selected node.
        fre: (create, edit, query) - Enable freeform layout mode.
        fat: (query) - Returns the name of the source attribute in a drag and drop connection, when called during processing of a drop.
        frn: (query) - Returns the name of the source node in a drag and drop connection, when called during processing of a drop.
        gnl: (query) - Returns a string array that represents a list of all the nodes in the graph.
        gnp: (query) - Returns the position of a specified node in x,y graph coords. This flag and its argument must be passed to the command before the -q flag (see examples).       In query mode, this flag can accept a value.
        gd: (create, edit) - When used, return a description of the current graph.
        gls: (create, edit, query) - This flag is obsolete.  The only supported graph layout style is "hierarchicalLayout". Use of any other style will trigger a warning.
        gt: (query) - Returns the type name of the current graph in the view (either DAG or DG).
        hmd: (edit, query) - Specify whether the heat map should be shown or not.
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        ics: (create, edit, query) - Set or query the icon size for this hyper graph editor. The currently allowed icon sizes are "smallIcons", "mediumIcons", "largeIcons" and "superIcons".
        img: (create, edit, query) - Specify background image to be loaded from the project image directory.
        ime: (create, edit, query) - Enable display of a loaded background image (Freeform DAG view or DG view)
        ifc: (create, edit, query) - Specify that the following flags work on selected containers instead of the whole image: -imageScale,-imagePosition, fitImageToWidth, -fitImageToHeight, -image
        imp: (create, edit, query) - Position of the background image.
        ims: (create, edit, query) - Uniform scale of the background image.
        ini: (create, edit) - Script to call when the graph is initialized.
        iht: (query) - For internal use.
        lay: (create, edit) - Perform an automatic layout on the graph.
        lsl: (create, edit) - This flag is obsolete.  The only supported graph layout style is "hierarchicalLayout". Use of any other style will trigger a warning.
        lgt: (create, edit) - Limit the graph traversal to a certain number of levels.
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        loo: (create, edit) - Look at a coordinate in the graph view
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        mc: (create, edit, query) - Merge groups of connections into 'fat' connections.
        hom: (create, edit) - Navigate to the home (DAG) view.
        nu: (create, edit) - Navigate up to the dependency graph containing the current selection. Shows upstream and downstream connections.
        nin: (create, edit) - Specify a new connection, input side
        nou: (create, edit) - Specify a new connection, output side
        nvw: (create, edit) - Changes the view to the next DAG view.
        nco: (create, edit) - Command to call when a node is connected.
        ndc: (create, edit) - Command to call when a node is double-clicked.
        ndr: (create, edit) - Set the command to be called when a node is dropped in the hypergraph window.
        nm: (create, edit) - Command to call when a node menu is activated.
        np: (create, edit) - Set the command to be called when the user presses a mouse button while the cursor is over a node in the hypergraph window.
        nr: (create, edit) - Set the command to be called when the user releases a mouse button while the cursor is over a node in the hypergraph window.
        opc: (edit, query) - Sets expanded container background opacity.
        orientation: (create, edit, query) - Selects orientation style of graph: "horiz"|"vert"
        pan: (create, edit) - Pan the view to a new center.
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        pms: (create, edit) - Set the script to be called to register the popup menu with the control for this hypergraph. The script will be called with a string argument which gives the name of the hypergraph whose control the popup menu should be parented to.
        pvw: (create, edit) - Changes the view back to the previous DAG view.
        rg: (create, edit, query) - Limits the display of nodes to only those within the range. There are two float values expected, the first the lower threshold of the range and the second the upper threshold of the range. The values are absolute timing values, not percentages.
        rb: (create, edit) - Rebuilds graph
        rmn: (create, edit) - Removes the node identified by string from the graph.
        rn: (create, edit) - Pops up text field over selected object for renaming
        rf: (create, edit) - Resets freeform position on all nodes.
        rbk: (create, edit) - Restore the view corresponding to the bookmark.
        snz: (create, edit) - Specify if we want to be in the scroll along y only with no free zooming mode. By default, hyper graph editor allows user to pan left and right.
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        snp: (create, edit) - Sets the node identified by string to the (x,y) position in the window specified by the two floats. If the node is not in the graph than it will be added to the graph and then moved to the new position.
        scc: (create, edit) - Specify whether cached connections should be shown.
        scf: (create, edit, query) - Show the connects (constraints, expresions, and deformers - see showConstraints for example) leaving from selected nodes. This can be combined with showConnectionToSelected to show both arrive and leaving connects. If both flags are false then all the connections will be shown.
        sct: (create, edit, query) - Show the connects (constraints, expresions, and deformers - see showConstraints for example) arriving at selected nodes. This can be combined with showConnectionFromSelected to show both arrive and leaving connects. If both flags are false then all the connections will be shown.
        scl: (create, edit) - Specify whether constraint labels should be shown.
        shc: (create, edit, query) - Show constraint relationships in the DAG.
        shd: (create, edit, query) - Show deformer or geometry filter relationships in the DAG.
        shx: (create, edit, query) - Show expression relationships in the DAG.
        shi: (create, edit, query) - Show invisible nodes in the DAG.
        shr: (create, edit, query) - Show relationship (message) connections.
        shs: (create, edit, query) - Show shape nodes in the DAG.
        shu: (create, edit, query) - Show underworld graphs in the DAG.
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        tat: (query) - Returns the name of the destination attribute in a drag and drop connection, when called during processing of a drop.
        ton: (query) - Returns the name of the destination node in a drag and drop connection, when called during processing of a drop.
        tfr: (create, edit, query) - Specify te number of transition frames for animate transitions.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        uf: (create, edit) - Unfolds (expands) selected object.
        ua: (create, edit) - Unfolds everything under selected object.
        uas: (create, edit) - Unfolds all shapes.
        ufh: (create, edit) - Unfolds all hidden objects.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        una: (create, edit, query) - Update graph when a new node is added to the database
        us: (create, edit, query) - Update selection state in the graph when the selection state of database changes.
        ups: (create, edit) - Show upstream dependency graph of selected node(s).
        drc: (create, edit) - Specify whether or not to use draw override coloring.
        ufl: (create, edit, query) - Use feedback or highlight list as the target selection when processing other hypergraph command-line options.
        ut: (create) - Forces the command to use a command template other than the current one.
        vo: (create, edit, query) - Set or query the view option for this hyper graph editor. The currently allowed views are "asIcons" and "asList".
        vis: (create, edit) - Set the visible state of the selected node(s).
        zm: (create, edit) - Specify the zoom factor for animating transitions
    """
    ...


def hyperPanel(*args, ctl: bool = ..., cp: str = ..., cs: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., es: bool = ..., ex: bool = ..., he: bool = ..., init: bool = ..., iu: bool = ..., l: Optional[Union[str, bool]] = ..., mrl: bool = ..., mbv: bool = ..., ni: bool = ..., p: Optional[Union[str, bool]] = ..., pmp: Optional[Union[str, bool]] = ..., rp: str = ..., to: bool = ..., toc: Optional[Union[str, bool]] = ..., tor: bool = ..., up: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates, edit and queries hypergraph panels which contain only
    a hypergraph editor.

    Args:
        ctl: (query) - Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return "" if no control is present.
        cp: (edit) - Makes this panel a copy of the specified panel.  Both panels must be of the same type.
        cs: (edit) - Command string used to create a panel
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the Maya panel.
        es: (edit) - Command string used to edit a panel
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        he: (query) - This flag returns the name of the hypergraph editor contained by the panel.
        init: (create, edit) - Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
        iu: (query) - Returns true if only one instance of this panel type is allowed.
        l: (edit, query) - Specifies the user readable label for the panel.
        mrl: (create, edit, query) - Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.
        mbv: (create, edit, query) - Controls whether the menu bar for the panel is displayed.
        ni: (edit, query) - (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.
        p: (create) - Specifies the parent layout for this panel.
        pmp: (edit, query) - Specifies the procedure called for building the panel's popup menu(s). The default value is "buildPanelPopupMenu".  The procedure should take one string argument which is the panel's name.
        rp: (edit) - Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
        to: (edit, query) - Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.
        toc: (create) - Will create this panel as a torn of copy of the specified source panel.
        tor: (create, edit) - Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOff flag which should only be used to tear off the panel.
        up: (edit) - Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def hyperShade(*args, a: Optional[Union[str, bool]] = ..., cwa: bool = ..., clp: Optional[Union[str, bool]] = ..., rcn: Optional[Union[str, bool]] = ..., dg: bool = ..., ds: bool = ..., dup: bool = ..., fix: bool = ..., geo: Optional[Union[str, bool]] = ..., inc: bool = ..., ldn: Optional[Union[str, bool]] = ..., lds: Optional[Union[str, bool]] = ..., lgm: Optional[Union[str, bool]] = ..., lmn: bool = ..., lun: Optional[Union[str, bool]] = ..., n: Optional[Union[str, bool]] = ..., net: bool = ..., nsg: bool = ..., ns: bool = ..., nt: bool = ..., o: Optional[Union[str, bool]] = ..., rcd: Optional[Union[str, bool]] = ..., rst: bool = ..., rsg: bool = ..., rss: bool = ..., sar: bool = ..., swa: Optional[Union[str, bool]] = ..., sn: Optional[Union[str, bool]] = ..., sns: bool = ..., smn: bool = ..., snp: bool = ..., ucl: Optional[Union[str, bool]] = ..., ups: bool = ..., umt: bool = ..., udl: bool = ..., waa: Optional[Union[str, bool]] = ..., wad: Optional[Union[str, bool]] = ..., was: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    Commands for shader editing in the hypergraph

    Args:
        a: (create) - Assign the specified shader node to renderable objects on the active list or the geometries in the -geometries option when specified. The node can either be a shading group or the shader node attached to the shading group.
        cwa: (create) - Push the current work area on to the stack and create a clear work area
        clp: (create) - Hide the upstream nodes from the specified node.
        rcn: (create) - Create a node of the specified type.  This is called when a new rendering node is created using drag and drop from the image browser or from the RMB context sensitive menu on nodes in the Visor Create folders.
        dg: (create) - When setting a work area, and the work area doesn't already exist this flag inicates a new graph should be created that is either a depend graph or a folder view.
        ds: (create) - Show nodes downstream from the specified node
        dup: (create) - Duplicate upstream nodes.  If the node is a shader make sure duplicate include the shading group if there is one
        fix: (create) - If set to true dont rerender swatches when they change size as the user zooms
        geo: (create, multiuse) - When used in conjunction with the -assign option the shaders will be assigned to geometries specified here. When used in conjunction with the -listMaterialNodes option the material nodes used by the geometries specified here will be listed.
        inc: (create) - Enable or disable incremental layout when making new nodes or connections
        ldn: (create) - List all the downstream render nodes from the specified nodes.
        lds: (create) - List all the downstream shader nodes from the specified nodes.
        lgm: (create) - List the geoemtries which are attached to the specified shader node. The shader node can be either the shading group or the shader attached to the shading group.  When this flag's argument is the empty string, we will use the currently selected shader node as the input.
        lmn: (create) - List all the materials nodes for the geometries in the -geometries option or, if not specified, the currently selected objects.
        lun: (create) - List all the upstream render nodes from the specified nodes.
        n: (create) - Name for the work area created by this command
        net: (create) - Do an incremental layout on all of the nodes in the current selection list and that are in the current work area.
        nsg: (create) - Display only shapes that are connected to nodes in the network other than a shading group.
        ns: (create) - Display no shapes when graphing networks.
        nt: (create) - Display no transforms when graphing networks.
        o: (create) - Select the objects which are attached to the specified shader node. The shader node can be either the shading group or the shader attached to the shading group.  When this flag's argument is the empty string, we will use the currently selected shder node as the input.
        rcd: (create) - Create a render node of the specified type and put user into drag and drop mode to place or connect it.
        rst: (create) - Reset the Hypershade panel to its initial state.  In particular delete all the work areas.
        rsg: (create) - Reset the current graph.  Typically called prior to rebuilding a folder in a Hypershade view.
        rss: (create) - For all selected nodes remove user defined swatches if the node has one
        sar: (create) - For internal use only.
        swa: (create) - Set the work area to the existing named work area
        sn: (create) - Show the shader network for the specified material node.  If the materials shading group has a displacement or volume map these will be shown.  If not then the shading group will not be shown.
        sns: (create) - Show the shader network for all the objects on the selection list that have shaders.
        smn: (create) - Select the material nodes in the shader network for all the objects on the selection list that have shaders.
        snp: (create) - Put hypergraph in snapshot mode.  This is only for testing
        ucl: (create) - Unhide the upstream nodes from the specified node.
        ups: (create) - Show nodes upstream from the specified node
        umt: (create) - Specifies that a material will be assigned using the materialTemplate method.
        udl: (create) - Enable or disable remembrance of user defined layouts.  Default is disabled until this functionality is better tested.
        waa: (create) - Set the MEL procedure called when a new work area is added to HyperShade
        wad: (create) - Set the MEL procedure called when a work area is deleted in HyperShade
        was: (create) - Set the MEL procedure called when a work area is selected in HyperShade
    """
    ...


def iconTextButton(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., c: Optional[Union[str, bool]] = ..., rpt: bool = ..., dt: Optional[Union[str, bool]] = ..., di: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fla: bool = ..., fx: bool = ..., fy: bool = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., hnd: Optional[Union[str, bool]] = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hi: Optional[Union[str, bool]] = ..., i: Optional[Union[str, bool]] = ..., i1: Optional[Union[str, bool]] = ..., i2: Optional[Union[str, bool]] = ..., i3: Optional[Union[str, bool]] = ..., iol: Optional[Union[str, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., lec: Optional[Union[str, bool]] = ..., lo: Optional[Union[int, bool]] = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., olb: Optional[Union[Tuple[float, float, float, float], bool]] = ..., olc: Optional[Union[Tuple[float, float, float], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rot: Optional[Union[float, bool]] = ..., sic: bool = ..., si: Optional[Union[str, bool]] = ..., stp: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., ua: bool = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This control supports up to 3 icon images and 4 different display
    styles.  The icon image displayed is the one that best fits the
    current size of the control given its current style.
    
    This command creates an iconTextButton that can be displayed with different
    icons, with or without accompanying text label. When an argument is
    passed, it is used to give a name to the iconTextButton.

    Args:
        al: (create, edit, query) - The label alignment.  Alignment values are "left", "right", and "center". By default, the label is aligned "center". Currently only available when -st/style is set to "iconAndTextCentered".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        c: (create, edit, query) - Command executed when the control is pressed.
        rpt: (create, edit, query) - Set if the MEL command specified in the command flag should be repeatable or not.  The "g" key, by default, is the shortcut to repeat the last executed command.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        di: (create, edit, query) - Image used when the button is disabled. Image size must be the same as the image specified with the i/image flag. This is a Windows only flag.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit, query) - Command executed when the control is double clicked.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fla: (create, edit, query) - Sets whether the control will be a flat button (0 false, 1 true).
        fx: (create, edit, query) - Is the image flipped horizontally?
        fy: (create, edit, query) - Is the image flipped vertically?
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        hnd: (create, edit) - Specify a script callback which is called when a node is dropped on the control.  The name of the node being dropped will be passed to the function  (python callable) or appended to the end (script) to form the command to be executed.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hi: (create, edit, query) - Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        i: (create, edit, query) - If you are not providing images with different sizes then you may use this flag for the control's image. If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        i1: (create, edit, query) - First of three possible icons. The icon that best fits the current size of the control will be displayed.
        i2: (create, edit, query) - Second of three possible icons. The icon that best fits the current size of the control will be displayed.
        i3: (create, edit, query) - Third of three possible icons. The icon that best fits the current size of the control will be displayed.
        iol: (create, edit, query) - A short string, up to 6 characters, representing a label that will be displayed on top of the image.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The text that appears in the control.
        lec: (create, edit) - Specify a callback which is called after the user double clicks the label of the control to give it a new label. The new label string will be passed to the callback.
        lo: (create, edit, query) - The label offset. Default is 0. Currently only available when -st/style is set to "iconAndTextCentered".
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (create, edit, query) - The number of pixels above and below the control content. The default value is 1 pixel.
        mw: (create, edit, query) - The number of pixels on either side of the control content. The default value is 1 pixel.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        olb: (create, edit, query) - The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
        olc: (create, edit, query) - The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rot: (create, edit, query) - The rotation value of the image in radians.
        sic: (create, edit) - For "textOnly" and "iconOnly" style, this flag has no effect. For other styles, if the flag is specified, the icon will be scaled to the size of the control.
        si: (create, edit, query) - Image displayed while the control is selected. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        stp: (create, edit, query) - Sets the language type for the command script. Can only be used in conjunction with the c/command or dcc/doubleClickCommand flags. Valid values are "mel" (enabled by default), and "python".
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit, query) - The draw style of the control.  Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal", "iconAndTextVertical", and "iconAndTextCentered". (Note: "iconAndTextCentered" is only available on Windows). If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        ua: (create, edit, query) - Is the image using alpha channel?
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. "2013", "2014"). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def iconTextCheckBox(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., di: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fla: bool = ..., fx: bool = ..., fy: bool = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hi: Optional[Union[str, bool]] = ..., i: Optional[Union[str, bool]] = ..., i1: Optional[Union[str, bool]] = ..., i2: Optional[Union[str, bool]] = ..., i3: Optional[Union[str, bool]] = ..., iol: Optional[Union[str, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., lo: Optional[Union[int, bool]] = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., ofc: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., olb: Optional[Union[Tuple[float, float, float, float], bool]] = ..., olc: Optional[Union[Tuple[float, float, float], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rot: Optional[Union[float, bool]] = ..., shi: Optional[Union[str, bool]] = ..., si: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., ua: bool = ..., ut: Optional[Union[str, bool]] = ..., v: bool = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This control supports up to 3 icon images and 4 different display
    styles.  The icon image displayed is the one that best fits the
    current size of the control given its current style.
    
    This command creates an iconTextCheckBox.

    Args:
        al: (create, edit, query) - The label alignment.  Alignment values are "left", "right", and "center". By default, the label is aligned "center". Currently only available when -st/style is set to "iconAndTextCentered".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit, query) - Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        di: (create, edit, query) - Image used when the button is disabled. Image size must be the same as the image specified with the i/image flag. This is a Windows only flag.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fla: (create, edit, query) - Sets whether the control will be a flat button (0 false, 1 true).
        fx: (create, edit, query) - Is the image flipped horizontally?
        fy: (create, edit, query) - Is the image flipped vertically?
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hi: (create, edit, query) - Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        i: (create, edit, query) - If you are not providing images with different sizes then you may use this flag for the control's image. If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        i1: (create, edit, query) - First of three possible icons. The icon that best fits the current size of the control will be displayed.
        i2: (create, edit, query) - Second of three possible icons. The icon that best fits the current size of the control will be displayed.
        i3: (create, edit, query) - Third of three possible icons. The icon that best fits the current size of the control will be displayed.
        iol: (create, edit, query) - A short string, up to 6 characters, representing a label that will be displayed on top of the image.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The text that appears in the control.
        lo: (create, edit, query) - The label offset. Default is 0. Currently only available when -st/style is set to "iconAndTextCentered".
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (create, edit, query) - The number of pixels above and below the control content. The default value is 1 pixel.
        mw: (create, edit, query) - The number of pixels on either side of the control content. The default value is 1 pixel.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ofc: (create, edit, query) - Command executed when the control is turned off.
        onc: (create, edit, query) - Command executed when the control is turned on.
        olb: (create, edit, query) - The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
        olc: (create, edit, query) - The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rot: (create, edit, query) - The rotation value of the image in radians.
        shi: (create, edit, query) - Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        si: (create, edit, query) - Image displayed while the control is selected. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit, query) - The draw style of the control.  Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal", "iconAndTextVertical", and "iconAndTextCentered". (Note: "iconAndTextCentered" is only available on Windows). If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        ua: (create, edit, query) - Is the image using alpha channel?
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Sets or returns the state of the control.
        ver: (create, edit, query) - Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. "2013", "2014"). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def iconTextRadioButton(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cl: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., di: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fla: bool = ..., fx: bool = ..., fy: bool = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hi: Optional[Union[str, bool]] = ..., i: Optional[Union[str, bool]] = ..., i1: Optional[Union[str, bool]] = ..., i2: Optional[Union[str, bool]] = ..., i3: Optional[Union[str, bool]] = ..., iol: Optional[Union[str, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., lo: Optional[Union[int, bool]] = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., ofc: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., olb: Optional[Union[Tuple[float, float, float, float], bool]] = ..., olc: Optional[Union[Tuple[float, float, float], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rot: Optional[Union[float, bool]] = ..., sl: bool = ..., shi: Optional[Union[str, bool]] = ..., si: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., ua: bool = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This control supports up to 3 icon images and 4 different display
    styles.  The icon image displayed is the one that best fits the
    current size of the control given its current style.
    
    This command creates a iconTextRadioButton that is added to the most
    recently created iconTextRadioCollection unless the -cl/cluster flag is
    used.

    Args:
        al: (create, edit, query) - The label alignment.  Alignment values are "left", "right", and "center". By default, the label is aligned "center". Currently only available when -st/style is set to "iconAndTextCentered".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit, query) - Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.
        cl: (create) - To explicitly add the control to the specified collection.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        di: (create, edit, query) - Image used when the button is disabled. Image size must be the same as the image specified with the i/image flag. This is a Windows only flag.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fla: (create, edit, query) - Sets whether the control will be a flat button (0 false, 1 true).
        fx: (create, edit, query) - Is the image flipped horizontally?
        fy: (create, edit, query) - Is the image flipped vertically?
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hi: (create, edit, query) - Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        i: (create, edit, query) - If you are not providing images with different sizes then you may use this flag for the control's image. If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        i1: (create, edit, query) - First of three possible icons. The icon that best fits the current size of the control will be displayed.
        i2: (create, edit, query) - Second of three possible icons. The icon that best fits the current size of the control will be displayed.
        i3: (create, edit, query) - Third of three possible icons. The icon that best fits the current size of the control will be displayed.
        iol: (create, edit, query) - A short string, up to 6 characters, representing a label that will be displayed on top of the image.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The text that appears in the control.
        lo: (create, edit, query) - The label offset. Default is 0. Currently only available when -st/style is set to "iconAndTextCentered".
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (create, edit, query) - The number of pixels above and below the control content. The default value is 1 pixel.
        mw: (create, edit, query) - The number of pixels on either side of the control content. The default value is 1 pixel.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ofc: (create, edit, query) - Command executed when the control is turned off.
        onc: (create, edit, query) - Command executed when the control is turned on.
        olb: (create, edit, query) - The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
        olc: (create, edit, query) - The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rot: (create, edit, query) - The rotation value of the image in radians.
        sl: (create, edit, query) - Will set this button as the selected one.
        shi: (create, edit, query) - Image displayed while the control is selected and the cursor is over the control. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        si: (create, edit, query) - Image displayed while the control is selected. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit, query) - The draw style of the control.  Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal", "iconAndTextVertical", and "iconAndTextCentered". (Note: "iconAndTextCentered" is only available on Windows). If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        ua: (create, edit, query) - Is the image using alpha channel?
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. "2013", "2014"). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def iconTextRadioCollection(*args, cia: bool = ..., dt: Optional[Union[str, bool]] = ..., dcm: bool = ..., ex: bool = ..., gl: bool = ..., nci: bool = ..., p: Optional[Union[str, bool]] = ..., sl: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a cluster for iconTextRadioButtons.  Clusters
    will be parented to the current default layout if no parent is
    specified with the -p/parent flag. As children of the layout they will
    be deleted when the layout is deleted. Clusters may also span more
    than one window if the -g/global flag is used. In this case the
    cluster has no parent so must be explicitly deleted with
    the 'deleteUI' command.

    Args:
        cia: (query) - Returns a string list giving the long names of all the items in this collection.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dcm: (edit) - Allows a particular iconTextRadioButton in the collection to be selected without invoking the commands attached to the -cc/changeCommand, -onc/onCommand, or -ofc/offCommand flags. This flag is only meaningful when used in conjuction with the -edit and -select flags.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        gl: (create, query) - Set the collection to have no parent layout.  If the collection has a parent layout then it will be deleted with that layout, otherwise if it is specified to be global it must be explicitly deleted.
        nci: (query) - Returns the number of items that are in this collection.
        p: (create) - Set the specified layout to be the parent layout of the cluster.
        sl: (create, edit, query) - Select the specified collection item.  If queried will return the name of the currently selected collection item.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def iconTextScrollList(*args, ams: bool = ..., ann: Optional[Union[str, bool]] = ..., a: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., da: bool = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dfv: bool = ..., dpc: Optional[Union[str, bool]] = ..., drc: str = ..., ei: Optional[Union[int, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., ia: Optional[Union[Tuple[int, int], bool]] = ..., itc: Optional[Union[Tuple[int, float, float, float], bool]] = ..., m: bool = ..., nbg: bool = ..., nic: Optional[Union[int, bool]] = ..., npm: bool = ..., nr: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., ra: bool = ..., sc: Optional[Union[str, bool]] = ..., sii: Optional[Union[int, bool]] = ..., si: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., vra: Optional[Union[Tuple[int, int], bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries a text scrolling list. The
    list can be in single select mode where only one item at at time
    is selected, or in multi-select mode where many items may be
    selected.

    Args:
        ams: (create, edit, query) - Specify multi or single selection mode.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        a: (create, edit, multiuse) - Add an item to the end of the list.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Script to run when the list changes
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        da: (create, edit) - Deselect all items.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit) - Specify the command to be executed when an item is double clicked.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dfv: (create, edit) - Should the drag feedback be shown in the scrollbar?
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        drc: (edit) - Adds a callback that is called when a drag and drop operation is hovering above the drop site.  It returns the shape of the rectangle to be drawn to highlight the entry, if the control can receive the dropped data. The MEL version of the callback is of the form:  global proc int[] callbackName(string $dropControl, int $x, int $y)  The return value is an array of size 4, with the parameters, in order, being the left and top coordinates of the rectangle to be drawn, followed by the width and height. This functionality is currently only implemented in MEL.
        ei: (create, edit) - Index of the edited field
        ed: (create, edit) - Set the field to be editable or not
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        ia: (query) - Return the name of the item, if any, located at given point       In query mode, this flag needs a value.
        itc: (create, edit, multiuse) - Set the text color of the item at the given index. Arguments are: index, red, green, and blue. Indices are 1-based. Each color component ranges in value from 0.0 to 1.0.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nic: (query) - Number of icons.
        npm: (query) - Return the number of popup menus attached to this control.
        nr: (query) - Number of visible rows.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ra: (create, edit) - Remove all items.
        sc: (create, edit) - Specify the command to be executed when an item is selected.
        sii: (create, edit, multiuse, query) - Select the indexed item. Indices are 1-based.
        si: (create, edit, multiuse, query) - Select the item that contains the specified text.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        vra: (query) - Return the visual rectangle of the item, if any, located at given point. The result is a an array of 4 integers, in local coordinates, describing the rectangle, in the following order: left, top, width, height.       In query mode, this flag needs a value.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def iconTextStaticLabel(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., di: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fx: bool = ..., fy: bool = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., i1: Optional[Union[str, bool]] = ..., i2: Optional[Union[str, bool]] = ..., i3: Optional[Union[str, bool]] = ..., iol: Optional[Union[str, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., lo: Optional[Union[int, bool]] = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., olb: Optional[Union[Tuple[float, float, float, float], bool]] = ..., olc: Optional[Union[Tuple[float, float, float], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rot: Optional[Union[float, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., ua: bool = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This control supports up to 3 icon images and 4 different display
    styles.  The icon image displayed is the one that best fits the
    current size of the control given its current style.
    
    This command creates an iconTextStaticLabel.

    Args:
        al: (create, edit, query) - The label alignment.  Alignment values are "left", "right", and "center". By default, the label is aligned "center". Currently only available when -st/style is set to "iconAndTextCentered".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        di: (create, edit, query) - Image used when the button is disabled. Image size must be the same as the image specified with the i/image flag. This is a Windows only flag.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fx: (create, edit, query) - Is the image flipped horizontally?
        fy: (create, edit, query) - Is the image flipped vertically?
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i: (create, edit, query) - If you are not providing images with different sizes then you may use this flag for the control's image. If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        i1: (create, edit, query) - First of three possible icons. The icon that best fits the current size of the control will be displayed.
        i2: (create, edit, query) - Second of three possible icons. The icon that best fits the current size of the control will be displayed.
        i3: (create, edit, query) - Third of three possible icons. The icon that best fits the current size of the control will be displayed.
        iol: (create, edit, query) - A short string, up to 6 characters, representing a label that will be displayed on top of the image.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The text that appears in the control.
        lo: (create, edit, query) - The label offset. Default is 0. Currently only available when -st/style is set to "iconAndTextCentered".
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (create, edit, query) - The number of pixels above and below the control content. The default value is 1 pixel.
        mw: (create, edit, query) - The number of pixels on either side of the control content. The default value is 1 pixel.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        olb: (create, edit, query) - The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
        olc: (create, edit, query) - The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rot: (create, edit, query) - The rotation value of the image in radians.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit, query) - The draw style of the control.  Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal", "iconAndTextVertical", and "iconAndTextCentered". (Note: "iconAndTextCentered" is only available on Windows). If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        ua: (create, edit, query) - Is the image using alpha channel?
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. "2013", "2014"). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def image(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a static image for non-xpm files.
    Any image file format supported by the file texture node is supported by
    this command.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i: (create, edit, query) - Sets the image given the file name.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def intField(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ec: Optional[Union[str, bool]] = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., max: Optional[Union[int, bool]] = ..., min: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rfc: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[int, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a field control that accepts only integer values and is bound by
    a minimum and maximum value.  An invisible slider is attached to the
    field and accessed by holding down the Ctrl modifier key while pressing
    one of the mouse buttons.  Dragging the invisible slider to the right
    with the middle mouse button increases the field value by the amount
    specified with the -s/step flag, while dragging to the left
    decreases the value by the same amount.  The left and right mouse
    buttons apply a factor of 0.1 and 10 to the step value.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when the value changes by dragging the invisible slider.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The value of the field can always be changed with the -v/value flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ec: (create, edit) - Command executed when the keypad 'Enter' key is pressed.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Upper limit of the field.
        min: (create, edit, query) - Lower limit of the field.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rfc: (create, edit) - Command executed when the field receives focus.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Increment for the invisible slider.  The field value will change by this amount when the invisible slider is dragged.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the field.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def intFieldGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., en1: bool = ..., en2: bool = ..., en3: bool = ..., en4: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., nf: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[Tuple[int, int, int, int], bool]] = ..., v1: Optional[Union[int, bool]] = ..., v2: Optional[Union[int, bool]] = ..., v3: Optional[Union[int, bool]] = ..., v4: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label text and
    editable integer fields. The label text is optional and one to
    four fields can be created.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command string executed when the value of any of the fields changes.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command string executed when dragging the invisible slider in any of the fields.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        en1: (create, edit, query) - 
        en2: (create, edit, query) - 
        en3: (create, edit, query) - 
        en4: (create, edit, query) - Enable state for the respective field.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nf: (create) - Set the number of fields on creation.  One to four fields are available.  The default is one field.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Values for all fields.
        v1: (create, edit, query) - 
        v2: (create, edit, query) - 
        v3: (create, edit, query) - 
        v4: (create, edit, query) - Value for the respective field.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def intScrollBar(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hr: bool = ..., io: bool = ..., ls: Optional[Union[int, bool]] = ..., m: bool = ..., max: Optional[Union[int, bool]] = ..., min: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[int, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a scroll bar control that accepts only integer values and is
    bound by a minimum and maximum value.  The scroll bar displays a marker
    indicating the current value of the scroll bar relative to its minimum
    and maximum values.  Click and drag the marker or on the scroll bar
    itself to change the current value.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when the value changes by dragging the scroll bar's value marker.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hr: (create, query) - Orientation of the scroll bar.  This flag is true by default, which corresponds to a horizontally oriented scroll bar.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        ls: (create, edit, query) - Larger increment for the scroll bar, ie. the increment used when the press is between the arrow button and the thumb.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Upper limit of the scroll bar.
        min: (create, edit, query) - Lower limit of the scroll bar.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Smaller increment for the scroll bar, ie. the increment used when the arrow buttons are pressed.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the scroll bar.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def intSlider(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hr: bool = ..., io: bool = ..., m: bool = ..., max: Optional[Union[int, bool]] = ..., min: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[int, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a slider control that accepts only integer values and is bound
    by a minimum and maximum value.  The slider displays a marker
    indicating the current value of the slider relative to its minimum
    and maximum values.  Click and drag the marker or on the slider itself
    to change the current value.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the value changes.  This command is not invoked when the value changes via the -v/value flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when the value changes by dragging the slider's value marker.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hr: (create, query) - Orientation of the slider.  This flag is true by default, which corresponds to a horizontally oriented slider.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Upper limit of the slider.
        min: (create, edit, query) - Lower limit of the slider.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - The step value represents the amount the value will increase or decrease when you click either side of the slider.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the slider.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def intSliderGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., f: bool = ..., fmx: Optional[Union[int, bool]] = ..., fmn: Optional[Union[int, bool]] = ..., fs: Optional[Union[int, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., max: Optional[Union[int, bool]] = ..., min: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., ss: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[int, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of controls containing a
    label text, an integer field and an integer slider. The text and field
    controls are optional.  Editing or querying the field range values has
    no effect if the -f/field flag was not specified when the group was
    created.
    
    This group also allows you to enter values into the field outside of the
    slider range which is limited by the -min/minValue
    and -max/maxValue flags.  To do this, use
    the -fmn/fieldMinValue and -fmx/fieldMaxValue flags to
    specify a greater range of values.
    
    Note that the command will not allow you to specify
    a -fmn/fieldMinValue greater than the -min/minValue value nor
    a -fmx/fieldMaxValue less than the -max/maxValue value.
    
    If you do supply a larger field range with the -fmn/fieldMinValue
    and -fmx/fieldMaxValue flags then you will notice that entering a
    value in the field that is outside of the slider range will result in
    extending the slider range as well.  For example, if you create a slider
    group with the following command:
    
    intSliderGrp -min -10 -max 10 -fieldMinValue -100 -fieldMaxValue 100;
    
    Then you will be able to use the slider to select any value from -10 to 10.
    At the same time you will be able to enter into the field any value
    from -100 to 100.  If you enter a value, say 20, then the new slider
    range will grow such that this value is now accessible through the slider
    as well.  In fact, the new slider limit will become double of that what you
    entered.  Note that the slider limits will never grow beyond the field
    limits, in other words if you entered the value 80 then the slider will be
    clipped to the field limit of 100 and not doubled to 160.
    
    TelfBaseGrpCmd.cpp

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - The command string executed when the value of the slider changes.  It will be executed only once after a drag of the slider.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - The command string executed repeatedly during a drag of the slider.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - If present on creation this specifies that there will be an extra label appearing after the slider.  Sets the string to be the text for the extra label.
        f: (create) - If true on creation the group will have an editable int field present that reflects the value of the slider.
        fmx: (create, edit, query) - Maximum value that may be entered in the field.  This value may be set to any value greater than the -max/maxValue flag.  By default, it is equal to the -max/maxValue flag.
        fmn: (create, edit, query) - Minimum value that may be entered in the field.  This value may be set to any value less than the -min/minValue flag.  By default, it is equal to the -min/minValue flag.
        fs: (create, edit, query) - Increment for the field.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - If present on creation the group will have static text. Returns a string on query.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Sets the maximum value for both the slider and the field.
        min: (create, edit, query) - Sets the minimum value for both the slider and the field.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        ss: (create, edit, query) - On Linux the slider step value represents the amount the value will increase or decrease when you click either side of the slider.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Increment for both the slider and field.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the group.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def inViewEditor(*args, v: bool = ..., query: bool = ...) -> Any:
    r"""
    Mel access to the In-View Editor.
    In-View Editors display a customizable subset of a node's attributes,
    letting you adjust attributes directly in a scene instead of opening
    the Channel Box or Attribute Editor.

    Args:
        v: (create, query) - Shows/hides the In-View Editor outside the Show Manips context.
    """
    ...


def inViewMessage(*args, a: Optional[Union[float, bool]] = ..., amg: Optional[Union[str, bool]] = ..., bkc: Optional[Union[int, bool]] = ..., cl: Optional[Union[str, bool]] = ..., ck: bool = ..., dk: bool = ..., f: bool = ..., fit: Optional[Union[int, bool]] = ..., fot: Optional[Union[int, bool]] = ..., fst: Optional[Union[int, bool]] = ..., ft: Optional[Union[str, bool]] = ..., fts: Optional[Union[int, bool]] = ..., fof: Optional[Union[int, bool]] = ..., hd: bool = ..., msg: Optional[Union[str, bool]] = ..., min: bool = ..., pos: Optional[Union[str, bool]] = ..., res: bool = ..., sh: bool = ..., smg: Optional[Union[str, bool]] = ..., ta: Optional[Union[float, bool]] = ..., tof: Optional[Union[int, bool]] = ..., uv: bool = ...) -> Any:
    r"""
    Used for displaying in-view messages.
    
    Note: On Linux, the alpha and textAlpha flags for inViewMessage are
    only supported when running a window manager that supports compositing (transparency
    and opacity).  Otherwise, they are ignored.  In addition, the flags for message
    fading: -fade, -fadeInTime, -fadeStay and -fadeOutTime are supported,
    but the message will display without a fade effect if the window manager
    doesn't support compositing.

    Args:
        a: (create) - Sets the maximum alpha transparency for the message box.
        amg: (create) - The user assistance message to be displayed, can be html format.
        bkc: (create) - Sets the background color for the message using the format 0xAARRGGBB, alpha is not taken into account.
        cl: (create) - Use this flag to clear the message at a specified position. The supported positions are the same as for the -pos/position flag.
        ck: (create) - Use this flag if the message needs to be deleted on mouse click.
        dk: (create) - Use this flag if the message needs to be deleted on mouse drag.
        f: (create) - Whether the message will fade after a time interval or not.
        fit: (create) - Sets how long it takes for the image to fade in (milliseconds).
        fot: (create) - Sets how long it takes for the image to fade out (milliseconds).
        fst: (create) - Sets how long the image stays at max opacity  (milliseconds).
        ft: (create) - Sets the message to a font (eg. "Arial").
        fts: (create) - Sets the message font size.
        fof: (create) - Sets how far the message appears from the edge of the viewport in pixels.
        hd: (create) - Hides all messages.
        msg: (create) - The message to be displayed, can be html format. General message, inherited by -amg/assistMessage and -smg/statusMessage.
        min: (create) - Minimize all messages.
        pos: (create) - The position that the message will appear at relative to the active viewport. The supported positions are:  "topLeft" "topCenter" "topRight" "midLeft" "midCenter" "midCenterTop" "midCenterBot" "midRight" "botLeft" "botCenter" "botRight"
        res: (create) - Restore all messages.
        sh: (create) - Shows all messages.
        smg: (create) - The status info message to be displayed, can be html format.
        ta: (create) - Sets the maximum alpha transparency for the message text.
        tof: (create) - Sets how far the text appears from the edge of the message box in pixels.
        uv: (create) - Show the message in the active UV editor view.
    """
    ...


def layerButton(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cl: Optional[Union[Tuple[float, float, float], bool]] = ..., c: Optional[Union[str, bool]] = ..., cr: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hpc: Optional[Union[str, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., id: Optional[Union[int, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., lw: bool = ..., hp: bool = ..., ls: Optional[Union[str, bool]] = ..., lv: bool = ..., m: bool = ..., n: Optional[Union[str, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rc: Optional[Union[str, bool]] = ..., s: bool = ..., sbm: Optional[Union[str, bool]] = ..., t: bool = ..., tc: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., vc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Creates a layer bar button widget.  This widget contains both the name of
    the layer to which it refers and a color swatch indicating it's color
    assignment.  It is used primarily in the construction of the layerBar
    and layer Editor window, being the widget used for each layer in the
    respective lists.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Set the command to call on a change of any kind.
        cl: (create, edit) - Layer color, specified with normalized real numbers in R, G, B space.
        c: (create, edit) - Set the command to call on a single click.
        cr: (create, edit) - Set this button to display as the current layer.  The current layer is the one which the user has the option of adding all newly created objects into.  NB: Setting the layer button to this state has no effect on the actual current layer.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit) - Set the command to call on a double click.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hpc: (create, edit) - Command that is called when the hide on playback indicator of the layer button is pressed.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        id: (create, edit, query) - This is the integer identification number associated with the layer.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label text for the button.
        lw: (query) - Query the width of the label part so as to determine if button clicks are in the label part or the colour swatch part.
        hp: (create, edit, query) - Indicates whether the layer is visible or invisible during the playback.
        ls: (create, edit, query) - Describes the state of the layer.  This may be one of normal, template, or reference.
        lv: (create, edit, query) - Indicates whether the layer is visible or invisible.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        n: (create, query) - Name of the layer.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rc: (create, edit) - Set the command to call when the layer gets renamed. The string '#1' will be substituted with the control's name and '#2' will be replaced with the layer's new name.
        s: (create, edit, query) - Set this button to display as a selected layer.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        t: (create, edit, query) - Indicate whether the layer color is visible or transparent.
        tc: (create, edit) - Command that is called when the type indicator of the layer button is pressed.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        vc: (create, edit) - Command that is called when the visibility indicator of the layer button is pressed.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def layout(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command allows you to edit or query the properties of any
    layout. The argument is the name of the layout.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def layoutDialog(*args, bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dis: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., ui: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    The layoutDialog command creates a modal dialog containing a formLayout
    with 100 divisions. The formLayout can be populated with arbitrary UI
    elements through use of the '-ui/-uiScript' flag.
    
    NOTE:
    A layoutDialog is not a window and certain UI elements will not function
    properly within it. In particular menuBars and panels containing menuBars
    should not be used with the layoutDialog.

    Args:
        bgc: (create) - The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)
        dis: (create) - Dismiss the current layoutDialog. The specified string will be set as the result of the initial layoutDialog command.
        p: (create) - Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
        t: (create) - The dialog title.
        ui: (create) - The specified MEL procedure name will be invoked to build the UI of the layoutDialog. This flag is required when creating a layoutDialog. The top-level control of a layoutDialog is a formLayout with 100 divisions. It can be accessed by calling 'setParent -q' at the beginning of the specified MEL procedure.
    """
    ...


def linearPrecision(*args, query: bool = ...) -> Any:
    r"""
    This command controls the display of linear strings in the interface.
    (See the linearField command). Setting this affects any linear strings
    displayed afterwards, formatting them so they will show at most the
    specified number of digits after the decimal point. Allowed values are
    0 through 6.

    Args:
    """
    ...


def loadPrefObjects(*args) -> Any:
    r"""
    This command loads preference dependency nodes from "userPrefObjects.ma", if it
    exists, from the user preference directory.

    Args:
    """
    ...


def loadUI(*args, lt: bool = ..., f: Optional[Union[str, bool]] = ..., s: Optional[Union[str, bool]] = ..., v: bool = ..., wd: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    loadUI lets you generate a Maya user interface from a Qt user interface (.ui) file.
    While creating the interface, if a Qt widget’s class is recognized, and a Maya-equivalent exists,
    the Maya-equivalent widget will be used.
    Any dynamic widget properties starting with a ‘-’ will be treated as a MEL key/value pair.
    Widget properties starting with a ‘+’ will be treated as a Python key/value pair.
    Properties will be applied to the widget upon creation.
    For additional details about ui files, please refer to Qt docs.

    Args:
        lt: (create) - Returns the list of recognized UI types and their associated Maya command.
        f: (create) - Full path to a user interface file to load.
        s: (create) - Load UI from a formated string.
        v: (create) - Extra information about created controls will be printed.
        wd: (create) - Sets the working directory, the loader looks for resources such as icons and resouce files in paths relative to this directory.
    """
    ...


def mayaDpiSetting(*args, m: Optional[Union[int, bool]] = ..., rsv: bool = ..., sv: Optional[Union[float, bool]] = ..., sd: bool = ..., query: bool = ...) -> Any:
    r"""
    Provide Maya interface scaling based on system DPI or custom scale setting or no scaling. Please note that the change will only take effect after relaunching Maya.
    
    
    The mayaDpiSetting command is not available on macOS. System scaling should be used to change Maya UI scaling.

    Args:
        m: (create, query) - Specifies the interface scaling mode:  0 - System Dpi Based Scaling 1 - Custom Scaling (Must provide the custom scale value with flag "-scaleValue") 2 - No Scaling
        rsv: (query) - This is a query mode only flag which returns the real scale value depending on current scaling mode and defined scale value:  mode 0 - Return the current real scale value which is the ratio of current system dpi to default system dpi mode 1 - Return the current real scale value which is the product of the defined scale value and the ratio of current system dpi to default system dpi mode 2 - Always return 1.0 which indicates real scale is 100% when the scaling mode is no scaling.
        sv: (create, query) - Specifies the custom scale of the interface if scaling mode is 1. The allowed values are [1.0, 1.25, 1.5, 2.0]. In query mode, return the scale value depend on current scaling mode:  mode 0 - Always return 1.0 which indicates 100% scaling mode 1 - Return the custom scale value used mode 2 - Always return 1.0 which indicates no custom scaling
        sd: (query) - This is a query mode only flag which returns the current system dpi value.
    """
    ...


def menu(*args, aob: bool = ..., dt: Optional[Union[str, bool]] = ..., dai: bool = ..., dtg: Optional[Union[str, bool]] = ..., en: bool = ..., ex: bool = ..., fi: Optional[Union[str, bool]] = ..., hm: bool = ..., ia: bool = ..., l: Optional[Union[str, bool]] = ..., mn: Optional[Union[str, bool]] = ..., ni: bool = ..., p: Optional[Union[str, bool]] = ..., pmc: Optional[Union[str, bool]] = ..., pmo: bool = ..., srb: bool = ..., to: bool = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a new menu and adds it to the default window's
    menubar if no parent is specified.  The menu can be enabled/disabled.
    Note that this command may also be used on menu objects created using
    the command menuItem -sm/subMenu true.

    Args:
        aob: (create, query) - Deprecated. All menus now always allow option boxes. Indicate whether the menu will be able to support option box menu items.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dai: (create, edit) - Delete all the items in this menu.
        dtg: (create, edit, query) - Attaches a tag to the menu.
        en: (create, edit, query) - Enables/disables the menu.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fi: (create, edit, query) - The filename of the icon associated with the menu. This icon will be used if a menu item does not have an icon image defined.
        hm: (create, edit, query) - Indicates that this menu is the help menu and will be the right most menu in the menu bar. On Unix systems the help menu is also right justified in the menu bar.
        ia: (query) - Return string array of the menu item names.
        l: (create, edit, query) - The text that is displayed for the menu.  If no label is supplied then the menuName will be used.
        mn: (create, edit, query) - Set the Alt key to post that menu.  The character specified must match the case of its corresponding character in the menu item text, but selection from the keyboard is case insensitive.
        ni: (query) - Return number of items in the menu.
        p: (create) - Specify the window that the menu will appear in.
        pmc: (create, edit) - Specify a script to be executed when the menu is about to be shown.
        pmo: (create, edit, query) - Indicate the -pmc/postMenuCommand should only be invoked once.  Default value is false, ie. the -pmc/postMenuCommand is invoked every time the menu is shown.
        srb: (create, edit, query) - Make the popup menus support scrolling. Default value is false.
        to: (create) - Makes the menu tear-off-able.
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this menu feature was introduced. The argument should be given as a string of the version number (e.g. "2014", "2015"). Currently only accepts major version numbers (e.g. 2014.5 should be given as "2014").
        vis: (create, edit, query) - Shows/hides the menu.
    """
    ...


def menuBarLayout(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., ma: bool = ..., mbv: bool = ..., mi: Tuple[str, int] = ..., nbg: bool = ..., nch: bool = ..., nm: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a layout containing a menu bar.  The menu bar will appear and behave
    similar to any menu bar created with the 'window -menuBar true' command.
    Menus may be created with a menuBarLayout as their parent.  Child controls
    are simply positioned to fill the menuBarLayout area beneath the menu bar
    consequently, some other layout should be used as the immediate child.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        ma: (query) - Return a string array containing the names of the menus in the layout's menu bar.
        mbv: (create, edit, query) - Visibility of the menu bar.
        mi: (edit) - Sets the index of a specified menu.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        nm: (query) - Return the number of menus attached to the layout's menu bar.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def menuEditor(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ch: Optional[Union[int, bool]] = ..., cw: Optional[Union[int, bool]] = ..., cwh: Tuple[int, int] = ..., cbp: Optional[Union[Tuple[bool, str, int], bool]] = ..., cbs: Optional[Union[Tuple[bool, str, int], bool]] = ..., c: Optional[Union[Tuple[str, str, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., d: Tuple[str, int] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., imc: Optional[Union[str, bool]] = ..., i: Optional[Union[Tuple[str, str, int], bool]] = ..., io: bool = ..., l: Optional[Union[Tuple[str, str, int], bool]] = ..., m: bool = ..., mit: bool = ..., nbg: bool = ..., npm: bool = ..., obc: Optional[Union[Tuple[str, str, int], bool]] = ..., obp: Optional[Union[Tuple[bool, str, int], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rbp: Optional[Union[Tuple[bool, str, int], bool]] = ..., rbs: Optional[Union[Tuple[bool, str, int], bool]] = ..., sp: Optional[Union[Tuple[str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., sma: Tuple[str, int] = ..., sew: Optional[Union[str, bool]] = ..., seo: bool = ..., smo: Optional[Union[Tuple[str, str, int], bool]] = ..., tlm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    A menuEditor displays the contents of a popup menu and allows the
    menu's items to be edited. Menu items are represented by labelled
    icons which can be dragged around within the editor to change the
    menu's layout.  Various objects can be dragged and dropped into
    the menuEditor to create new menu items: toolButtons from the shelf
    or toolbox, shelfButtons from the shelf, iconTextButtons with attached
    commands, and scripts from the command window.
    
    When editing a Marking Menu, the radial menu items correspond to 8
    icons arranged in a circle within the menuEditor.  Overflow items in
    the Marking Menu (or linear items in a normal menu) are displayed in
    a column below the radial items.
    
    To edit a submenu of a popup menu, a new menuEditor instance must be
    created (typically within its own window) and attached to its parent
    menuEditor.
    
    Some flags require the position of a menu item to be passed in as an
    argument.  For these, positions are specified with a (string,int)
    pair, where the string corresponds to a radial position
    (possibily "None") and the int corresponds to a linear position
    (possibly equal to 0 for none).  Radial positions are specified by
    one of ("N",0), ("NE",0), ("E",0), ("SE",0), ("S",0), ("SW",0),
    ("W",0) or ("NW",0).  Overflow, or linear positions, are specified
    with ("None",i), where i is a 1-based index giving the position of
    the item within the overflow column.
    
    Note: This command is not meant to be called explicitly. It was
    created to support the Marking Menu editor. It is recommended that you
    use that editor to modify marking menus.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ch: (edit, query) - The height of the icons in the menuEditor.
        cw: (edit, query) - The width of the icons in the menuEditor.
        cwh: (edit) - The width and height of the icons in the menuEditor.
        cbp: (edit, query) - This controls whether a menu item has a check box or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        cbs: (edit, query) - The state of the check box associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a check box. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        c: (edit, query) - The command or script executed by a menu item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item or a separator item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        d: (edit) - Deletes the menu item at the given position, removing it from the menu.  If the menu item has a submenu, and a sub-menuEditor is open and attached to it, then the sub-menuEditor's window and all its child menuEditor windows will be closed recursively.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        imc: (create) - This is the name of a MEL callback procedure that is called to create the popup menus attached to icons in the menuEditor.  The callback is called once for each newly created icon, and once each time an icon is moved within the menuEditor.  Popup menus created by the callback should contain commands for editing the menu item associated with the icon.  Operations accessible through the menu should include deletion of the item, editing of the item's label/command/image/checkbox/optionbox, creation of a submenu, and popping up a sub-menuEditor.  The arguments to the callback must match this form:  callbackProc(string $menuEditorName, string $parentIconName, string $menuTitle, string $radialPosition, int $overflowRow);  The popup menu's parent should be $parentIconName.  Note that when a sub-menuEditor is created, this flag need not be re-specified as it adopts a default value equal to the value of its parent menuEditor's -imc/iconMenuCallback flag.
        i: (edit, query) - The filename of the icon associated with a menu item. This icon is displayed by the menuEditor to represent the menu item. The arguments are the icon filename, followed by the position of the menu item. If queried, an array of strings is returned containing all the icon filenames. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (edit, query) - The label of a menu item. The arguments are the label text, followed by the position of the menu item. If queried, an array of strings is returned containing all the labels. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mit: (query) - This is a query only flag.  Returns an array of strings indicating the type of contents in each cell of the menuEditor.  Cells can be "vacant", or may contain a regular menu "item", or a "separator", or a "submenu" item.  In each case, the corresponding string is returned. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        obc: (edit, query) - The command or script executed by a menu item's associated option box item. The arguments are the command string or script name, followed by the position of the menu item. This flag is ignored if the menu item does not have an associated option box item. If queried, an array of strings is returned containing all the commands. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        obp: (edit, query) - This controls whether a menu item has an associated option box item or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rbp: (edit, query) - This controls whether a menu item has a radio button or not. The arguments are a flag indicating presence, followed by the position of the menu item. This flag is ignored if the menu item is a submenu item. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        rbs: (edit, query) - The state of the radio button associated with a menu item. The arguments are a flag indicating state, followed by the position of the menu item. This flag is ignored if the menu item does not have a radio button. If queried, an array of booleans is returned containing all the flags. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        sp: (edit, query) - In edit mode this adds a separator to the menuEditor at the specified position. The parameters are the radialPosition and the overflowRow. If queried, an array of booleans is returned indicating if the item is a separator item. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (edit, query) - This is the style of icons within the menuEditor. Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal" and "iconAndTextVertical".
        sma: (edit) - Creates a submenu item at the given position.  A submenu item created within the radial portion of a menu will overwrite whatever item (if any) is currently at the given position. A submenu item created within the overflow (linear) portion of a menu will be inserted before the item currently at the given position.
        sew: (create) - The name of the window which contains a sub-menuEditor.  Only use when creatitg a sub-menuEditor. This window will automatically be closed if a parent menuEditor is closed or if a parent menu item is deleted.
        seo: (query) - This is a query only flag.  Returns an array of booleans, each of which indicates if a sub-menuEditor is open and attached to the menu item in a particular cell.  One boolean is returned for each cell in the menuEditor, even if the cell is vacant or contains a non-submenu item (false will be returned in both these cases).  Only when a cell contains a submenu item can true possibily be returned. The first 8 entries of the array correspond to radial items (in order, "N", "NE", ... "NW"), and all later entries correspond to overflow (or linear) menu items.
        smo: (create) - Attaches a sub-menuEditor to its parent menuEditor.  Only use when creatitg a sub-menuEditor. The arguments are the name of the parent menuEditor, followed by the position of a submenu item within the parent. A submenu item must already exist within the parent at the given position. A submenu item cannot have multiple sub-menuEditors attached to it.
        tlm: (edit, query) - The popup menu to attach to the editor.  All editing operations performed in the editor (i.e. inserting/deleting/moving an item) will be immediately reflected in this menu. This flag is ignored if the editor is a sub-menuEditor.  The editor will update gracefully if the value of the flag is changed from its initial value.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def menuItem(*args, aob: bool = ..., ann: Optional[Union[str, bool]] = ..., bld: bool = ..., cb: bool = ..., cl: Optional[Union[str, bool]] = ..., c: Optional[Union[str, bool]] = ..., da: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., d: bool = ..., dl: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., ddc: Optional[Union[str, bool]] = ..., dmc: Optional[Union[str, bool]] = ..., ec: bool = ..., en: bool = ..., ecr: bool = ..., ex: bool = ..., fi: Optional[Union[str, bool]] = ..., i: Optional[Union[str, bool]] = ..., iol: Optional[Union[str, bool]] = ..., ia: Optional[Union[str, bool]] = ..., icb: bool = ..., iob: bool = ..., irb: bool = ..., itl: bool = ..., l: Optional[Union[str, bool]] = ..., ld: bool = ..., ob: bool = ..., obi: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pmc: Optional[Union[str, bool]] = ..., pmo: bool = ..., rp: Optional[Union[str, bool]] = ..., rb: bool = ..., rtc: Optional[Union[str, bool]] = ..., stp: Optional[Union[str, bool]] = ..., sm: bool = ..., to: bool = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries menu items.

    Args:
        aob: (create, query) - Deprecated. All menus and menu items always allow option boxes. In the case of submenu items this flag specifies whether the submenu will be able to support option box menu items. Always returns true.
        ann: (create, edit, query) - Annotate the menu item with an extra string value.
        bld: (create, query) - Specify if text should be bold. Only supported in menus which use the marking menu implementation.  Default is false for Windows, and true for all other platforms.
        cb: (create, edit, query) - Creates a check box menu item.  Argument specifies the check box value.
        cl: (create, query) - To explicitly add a radio menu item to a radioMenuItemCollection.
        c: (create, edit, query) - Attaches a command/script that will be executed when the item is selected. Note this command is not executed when the menu item is in an optionMenu control.
        da: (create, edit, query) - Attaches a piece of user-defined data to the menu item.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        d: (create, query) - Creates a divider menu item.
        dl: (create, edit, query) - Adds a label to a divider menu item.
        dtg: (create, edit, query) - Attaches a tag to the menu item.
        ddc: (create, edit, query) - If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is double clicked.
        dmc: (create, edit, query) - If the menu item is put on the shelf then this command will be invoked when the corresponding shelf object is clicked.
        ec: (create, edit, query) - Specify whether the action attached with the c/command flag should echo to the command output areas when invoked. This flag is false by default and must be specified with the c/command flag.
        en: (create, edit, query) - Enable state for the menu item.  A disabled menu item is dimmed and unresponsive.  An enabled menu item is selectable and has normal appearance.
        ecr: (create, edit, query) - This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by executing the command repeatLast.  This flag is true by default for all items except for option box items.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fi: (query) - Get the filename of the family icon associated with the menu. The family icon will be used for the shelf unless an icon is specified with the image flag.
        i: (create, edit, query) - The filename of the icon associated with the menu item.  If the menu containing the menu item is being edited with a menuEditor widget, then the menuEditor will use this icon to represent the menu item. This icon will be displayed on the shelf when the menu item is placed there.
        iol: (create, edit, query) - Specify a short (5 character) text string to be overlayed on top of the icon associated with the menu item. This is primarily a mechanism for differentiating menu items that are using a Family icon due to the fact that an icon image had not been explicitly defined. The image overlay label will not be used if an icon image is defined for the menu item.
        ia: (create) - Specify After which item the new one will be placed. If this flag is not specified, item is added at the end of the menu. Use the empty string "" to insert before the first item of the menu.
        icb: (query) - Returns true if the item is a check box item.
        iob: (query) - Returns true if the item is an option box item.
        irb: (query) - Returns true if the item is a radio button item.
        itl: (create, query) - Specify if text should be italicized. Only supported in menus which use the marking menu implementation.  Default is false.
        l: (create, edit, query) - The text that appears in the item.
        ld: (create, edit, query) - Indicate whether the divider is long or short. Has no effect if divider label is set. Default is true.
        ob: (create, query) - Indicates that the menu item will be an option box item.  This item will appear to the right of the preceeding menu item.
        obi: (create, edit, query) - The filename of an icon to be used instead of the usual option box icon. The icon is searched for in the folder specified by the XBMLANGPATH environment variable. The icon can be any size, but will be resized to the standard 16x16 pixels when drawn.
        p: (create) - Specify the menu that the item will appear in.
        pmc: (create, edit, query) - Specify a script to be executed when the submenu is about to be shown.
        pmo: (create, edit, query) - Indicate the pmc/postMenuCommand should only be invoked once.  Default value is false, ie. the pmc/postMenuCommand is invoked everytime the sub menu is shown.
        rp: (create, edit, query) - The radial position of the menu item if it is in a Marking Menu.  Radial positions are given in the form of a cardinal direction, and may be "N", "NW", "W", "SW", "S", "SE", "E" or "NE".
        rb: (create, edit, query) - Creates a radio button menu item.  Argument specifies the radio button value.
        rtc: (create, edit) - A shortcut flag to link the menu item with a runTimeCommand. The value is the name of the runTimeCommand (unique). It copies the following fields from the runTimeCommand if those fields have not been provided to this command: label, annotation, image, command. Note: command will be set to the runTimeCommand itself.
        stp: (create, edit, query) - Set the language type for a command script. Can only be used in conjunction with a command flag.  Without this flag, commands are assumed to be the same language of the executing script.  In query mode, will return the language of the specified command. Valid values are "mel" and "python".
        sm: (create, query) - Indicates that the item will have a submenu. Subsequent menuItems will be added to the submenu until setParent -menu is called.  Note that a submenu item creates a menu object and consequently the menu command may be used on the submenu item.
        to: (create, query) - For the case where the menu item is a sub menu this flag will make the sub menu tear-off-able. Note that this flag has no effect on the other menu item types.
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this menu item feature was introduced. The argument should be given as a string of the version number (e.g. "2013", "2014"). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the menu item.  A menu item is created visible by default.  Note that a menu item's actual appearance is also dependent on the visible state of its parent layout(s).
    """
    ...


def menuSet(*args, am: Optional[Union[str, bool]] = ..., ams: bool = ..., cms: Optional[Union[str, bool]] = ..., ex: Optional[Union[str, bool]] = ..., hbv: bool = ..., im: Optional[Union[Tuple[str, int], bool]] = ..., l: Optional[Union[str, bool]] = ..., ma: Optional[Union[List[str], bool]] = ..., mm: Optional[Union[Tuple[str, int], bool]] = ..., mms: Optional[Union[Tuple[str, int], bool]] = ..., nms: bool = ..., nm: bool = ..., p: bool = ..., rm: Optional[Union[str, bool]] = ..., rms: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a menu set which is used to logically order menus for display
    in the main menu bar.  Such menu sets can be edited and reordered
    dynamically.

    Args:
        am: (create) - Appends a menu onto the end of the current menu set.
        ams: (query) - Returns an array of the all the menu set object names in use.  Query returns string array.
        cms: (create, query) - The currently active menu set under which all operations affect (append, insert, remove, etc.).  Query returns string.
        ex: (query) - Returns whether the specified menu set exists.  This query flag supports string arguments. ie. menuSet -q -exists animationMenuSet;       In query mode, this flag needs a value.
        hbv: (create, edit, query) - Whether this menu set should be displayed in the hotbox as well as in the main menubar.
        im: (create) - Inserts a menu into a specified index in the current menu set.
        l: (create, query) - The label of the current menu set.  Query returns string.
        ma: (create, query) - An array of menu names (strings) in the current menu set.  Query returns string array.
        mm: (create) - Moves a specified menu from the current menu set to a new position.
        mms: (create) - Moves a specified menu set to another index.
        nms: (query) - Number of menuSets in total.  Query returns int.
        nm: (query) - The mumber of menus in the current menu set.  Query returns int.
        p: (create, edit, query) - Whether this menu set can be removed.
        rm: (create) - Removes a specified menu from the current menu set.
        rms: (create) - Removes the specified menu set object from the list of all menu sets.
    """
    ...


def menuSetPref(*args, e: bool = ..., f: bool = ..., la: bool = ..., ra: bool = ..., sa: bool = ..., sb: bool = ..., v: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Provides the functionality to save and load menuSets between sessions of Maya.
    For Internal Use Only!

    Args:
        e: (query) - Returns whether the menuSet preferences file exists or not.
        f: (create, edit) - Forces a specified operation to continue even if errors are encountered (such as invalid preferences).
        la: (create) - Loads all the menuSets from the preferences file only if the preferences version matches, or the -force flag is enabled.  On successful load, of a prefs file, an empty string is returned, otherwise, a description of the problem encountered is returned.
        ra: (create) - Removes all the menuSets from the preferences file (removes the whole file).
        sa: (create) - Saves all the current menuSets into the preferences file.
        sb: (create) - Saves a backup of the current menu set preferences file if one exists.  This backup will be saved in the same location as the current preferences file.
        v: (query) - The base version string which is saved out to file. It is also checked upon loading in order to indicate changes in the default prefs since the prefs were last saved out.
    """
    ...


def messageLine(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a message line where tool feedback
    is shown.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def minimizeApp(*args) -> Any:
    r"""
    This command minimizes (iconifies) all of the application's windows
    into a single desktop icon.  To restore the application click on the
    desktop icon.

    Args:
    """
    ...


def modelEditor(*args, acx: bool = ..., ace: str = ..., acg: Optional[Union[str, bool]] = ..., acl: Optional[Union[str, bool]] = ..., aog: Optional[Union[str, bool]] = ..., acr: Optional[Union[str, bool]] = ..., ao: bool = ..., asg: Optional[Union[str, bool]] = ..., av: bool = ..., aob: str = ..., addSelected: bool = ..., aso: bool = ..., alo: bool = ..., bfc: bool = ..., bp: bool = ..., bm: Optional[Union[str, bool]] = ..., brz: Optional[Union[Tuple[int, int], bool]] = ..., cam: Optional[Union[str, bool]] = ..., cn: Optional[Union[str, bool]] = ..., cst: Optional[Union[str, bool]] = ..., cs: bool = ..., ca: bool = ..., cpt: Optional[Union[str, bool]] = ..., csn: Optional[Union[int, bool]] = ..., cg: bool = ..., cme: bool = ..., cm: bool = ..., crz: Optional[Union[Tuple[int, int], bool]] = ..., ctl: bool = ..., cv: bool = ..., cov: Optional[Union[str, bool]] = ..., d: bool = ..., dt: Optional[Union[str, bool]] = ..., df: bool = ..., dim: bool = ..., da: Optional[Union[str, bool]] = ..., dl: Optional[Union[str, bool]] = ..., dtx: bool = ..., dtg: Optional[Union[str, bool]] = ..., dc: bool = ..., dy: bool = ..., ec: Optional[Union[str, bool]] = ..., eom: Optional[Union[int, bool]] = ..., eop: Optional[Union[str, bool]] = ..., epl: Optional[Union[str, bool]] = ..., ex: bool = ..., exp: Optional[Union[float, bool]] = ..., f: Optional[Union[str, bool]] = ..., fol: bool = ..., fl: bool = ..., fcl: Optional[Union[Tuple[float, float, float, float], bool]] = ..., fdn: Optional[Union[float, bool]] = ..., fen: Optional[Union[float, bool]] = ..., fmd: Optional[Union[str, bool]] = ..., fsc: Optional[Union[str, bool]] = ..., fst: Optional[Union[float, bool]] = ..., fg: bool = ..., fo: bool = ..., fmc: Optional[Union[str, bool]] = ..., ga: Optional[Union[float, bool]] = ..., gp: bool = ..., gr: bool = ..., hs: bool = ..., ha: bool = ..., hud: bool = ..., h: bool = ..., hlc: Optional[Union[str, bool]] = ..., hu: bool = ..., ipz: bool = ..., ikh: bool = ..., imp: bool = ..., i: bool = ..., ibc: bool = ..., dis: bool = ..., isFiltered: bool = ..., jx: bool = ..., j: bool = ..., lt: bool = ..., lw: Optional[Union[float, bool]] = ..., lc: bool = ..., lck: bool = ..., lql: bool = ..., mlc: Optional[Union[str, bool]] = ..., m: bool = ..., mct: Optional[Union[float, bool]] = ..., mhl: bool = ..., mp: Optional[Union[str, bool]] = ..., mt: bool = ..., ncl: bool = ..., npa: bool = ..., nr: bool = ..., nud: bool = ..., nc: bool = ..., ns: bool = ..., obf: Optional[Union[str, bool]] = ..., ofl: Optional[Union[str, bool]] = ..., ofu: Optional[Union[str, bool]] = ..., ofs: bool = ..., obu: Optional[Union[str, bool]] = ..., ocl: bool = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pi: bool = ..., pv: bool = ..., pl: bool = ..., po: Tuple[str, bool] = ..., ps: bool = ..., pm: bool = ..., qpo: Optional[Union[str, bool]] = ..., rs: bool = ..., rdn: bool = ..., rls: bool = ..., rlu: bool = ..., rnm: Optional[Union[str, bool]] = ..., rol: bool = ..., rou: bool = ..., rom: Optional[Union[str, bool]] = ..., rcc: bool = ..., srf: Optional[Union[str, bool]] = ..., slc: Optional[Union[str, bool]] = ..., sel: bool = ..., ss: bool = ..., sml: Optional[Union[int, bool]] = ..., sdw: bool = ..., soc: bool = ..., sot: Optional[Union[float, bool]] = ..., swf: bool = ..., st: bool = ..., sts: bool = ..., sdm: bool = ..., str: bool = ..., sds: bool = ..., ta: bool = ..., tcp: bool = ..., td: Optional[Union[str, bool]] = ..., tem: bool = ..., th: bool = ..., tms: Optional[Union[int, bool]] = ..., tmu: bool = ..., ts: Optional[Union[int, bool]] = ..., tx: bool = ..., tge: bool = ..., tgg: bool = ..., tis: bool = ..., tal: Optional[Union[str, bool]] = ..., tsl: bool = ..., up: bool = ..., ulk: bool = ..., ucm: bool = ..., upd: bool = ..., ubr: bool = ..., uci: bool = ..., udm: bool = ..., ui: bool = ..., ip: bool = ..., urr: bool = ..., ut: Optional[Union[str, bool]] = ..., un: Optional[Union[str, bool]] = ..., vo: bool = ..., vs: bool = ..., vtn: Optional[Union[str, bool]] = ..., vt: bool = ..., w: bool = ..., wbs: bool = ..., wos: bool = ..., xr: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create, edit or query a model editor.
    
    Note that some of the flags of this command may have different settings
    for normal mode and for interactive/playback mode.  For example, a
    modelEditor can be set to use shaded mode normally, but to use wireframe
    during playback for greater speed.  Some flags also support having
    defaults set so that new model editors will be created with those settings.

    Args:
        acx: (edit, query) - Turns on or off Xray mode for active components.
        ace: (edit) - Specifies a path to an image file to be used as environment map. It is only enabled when a valid scene render filter is specified.
        acg: (edit, query) - Specifies an identifier for custom geometry to override the geometry to display. It is only enabled when a valid scene render filter is specified.
        acl: (edit, query) - Specifies an identifier for the light set to use with a scene render filter. It is only enabled when a valid scene render filter is specified.
        aog: (edit, query) - Specifies an identifier for an override on the custom geometry for a scene render filter.
        acr: (edit, query) - Specifies an identifier for custom renderer to use when a valid scene render filter is also specified.
        ao: (edit, query) - Sets whether only active objects should appear shaded in shaded display.
        asg: (edit, query) - Specifies the shading graph to use to override material display. Only enabled when a valid scene render filter is specified.
        av: (edit, query) - Sets this model editor to be the active view.  Returns true if successful.  On query this flag will return whether the view is the active view.
        aob: (edit) - This flag causes the objects contained within the selection connection to be added to the list of objects visible in the view (if viewSelected is true).
        addSelected: (edit) - This flag causes the currently active objects to be added to the list of objects visible in the view (if viewSelected is true).
        aso: (create) - If set then add the selected objects to the editor
        alo: (edit, query) - Turn on/off the display of all objects for the view of the model editor. This excludes NURBS, CVs, hulls, grids and manipulators.
        bfc: (edit, query) - Turns on or off backface culling for the whole view.  This setting overrides the culling settings of individual objects.  All objects draw in the view will be backface culled.  When backface culling is turned on, surfaces becomes invisible in areas where the normal is pointing away from the camera.
        bp: (create, edit, query) - Define whether the blue pencil should be added or not
        bm: (edit, query) - Deprecated: this is not supported in Viewport 2.0.  Sets the graphic buffer mode.  Possible values are "single" or "double".
        brz: (edit, query) - Set the resolution for "baked" bump map textures when using the hardware renderer. The default value is 512, 512 respectively.
        cam: (edit, query) - Change or query the name of the camera in model editor.
        cn: (create, edit) - Set the name of the panel's camera transform and shape. The shape name is computed by appending the string "Shape" to the transform name. This flag may not be queried.
        cst: (create, edit, query) - Name of the camera set
        cs: (query) - Based on the model editor name passed in will returns a string list containing camera setups. A camera setup can contain one or more cameras which are associated with each other. Camera setups are defined as pairs of consecutive strings in the list. Each pair is comprised of: a string which identifies an active camera, and a string which defines a script to set up a given active camera. As many pairs of strings can be returned as the number of active cameras. If nothing is returned then it is assumed that no set up is required to activate a given camera.
        ca: (edit, query) - Turn on/off the display of cameras for the view of the model editor.
        cpt: (edit, query) - Perform an one-time capture of the viewport to the named image file on disk.
        csn: (edit, query) - When a number greater or equal to 0 is specified each subsequent refresh will save an image file to disk if the capture flag has been enabled.  The naming of the file is:  {root name}.#.{extension}  if the name {root name}.{extension} is used for the capture flag argument.  The value of # starts at the number specified to for this argument and increments for each subsequent refresh.  Sequence capture can be disabled by specifying a number less than 0 or an empty file name for the capture flag.
        cg: (create, edit, query) - Define whether the clip ghosts should be added or not
        cme: (edit, query) - Turn on or off applying color management in the editor.  If set, the color management configuration set in the current editor is used.
        cm: (query) - Queries the color map style for the model panel. Possible values are "colorIndex" and "rgb".
        crz: (edit, query) - Set the resolution for "baked" color textures when using the hardware renderer. The default value is 256, 256 respectively.
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        cv: (edit, query) - Turn on/off the display of NURBS CVs for the view of the model editor.
        cov: (edit, query) - Set whether to override the culling attributes on objects when using the hardware renderer. The options are:  "none" : Use the culling object attributes per object. "doubleSided" : Force all objects to be double sided. "singleSided": Force all objects to be single sided.  The default value is "none".
        d: (edit, query) - Causes this command to modify the default value of this setting. Newly created model editors will inherit the values.  This flag may be used with the -interactive to set default interactive settings.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        df: (edit, query) - Turn on/off the display of deformer objects for the view of the model editor.
        dim: (edit, query) - Turn on/off the display of dimension objects for the view of the model editor.
        da: (edit, query) - Sets the display appearance of the model panel.  Possible values are "wireframe", "points", "boundingBox", "smoothShaded", "flatShaded".  This flag may be used with the -interactive and -default flags.  Note that only "wireframe", "points", and "boundingBox" are valid for the interactive mode.
        dl: (edit, query) - Sets the lighting for shaded mode.  Possible values are "selected", "active", "all", "default", "none".
        dtx: (edit, query) - Turns on or off display of textures in shaded mode
        dtg: (create, edit, query) - Attaches a tag to the editor.
        dc: (edit, query) - Turn on/off the display of dynamicConstraints for the view of the model editor.
        dy: (edit, query) - Turn on/off the display of dynamics objects for the view of the model editor.
        ec: (create, edit, query) - An optional script callback which is called when the editors options have changed.  This is useful in a situation where a scripted panel contains a modelEditor and wants to be notified when the contained editor changes its options.
        eom: (create, edit, query) - Set exclude object display settings for all individual objects at once using a integer mask.
        eop: (create, edit, query) - Set exclude object display settings for all individual objects at once using a named preset.
        epl: (create, edit, multiuse, query) - Set exclude object display settings for a plugin object.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        exp: (edit, query) - The exposure value used by the color management of the current editor.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        fol: (query) - For model editors with filtering on (either using an object filter, or isolate select), this flag returns a string list of the objects which are displayed in this editor. Note that this list does not take into account visibility (based on camera frustum or flags), it purely captures the objects which are considered when rendering the view.
        fl: (edit, query) - Turn on/off the display of fluids for the view of the model editor.
        fcl: (edit, query) - The color used for hardware fogging.
        fdn: (edit, query) - Determines the density of hardware fogging.
        fen: (edit, query) - The end location of hardware fogging.
        fmd: (edit, query) - This determines the drop-off mode for fog. The possibilities are:  "linear" : linear drop-off "exponent" : exponential drop-off "exponent2" : squared exponential drop-off
        fsc: (edit, query) - Set the type of fog algorithm to use. If the argument is "fragment" (default) then fog is computed per pixel. If the argument is "coordinate" then if the geometry has specified vertex fog coordinates, and the OpenGL extension for vertex fog is supported by the graphics system, then fog is computed per vertex.
        fst: (edit, query) - The start location of hardware fogging.
        fg: (edit, query) - Set whether hardware fogging is enabled or not.
        fo: (edit, query) - Turn on/off the display of follicles for the view of the model editor.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        ga: (edit, query) - The gamma value used by the color management of the current editor.
        gp: (create, edit, query) - Define whether the grease pencil marks should be added or not
        gr: (edit, query) - Turn on/off the display of the grid for the view of the model editor.
        hs: (edit, query) - Turn on/off the display of hairSystems for the view of the model editor.
        ha: (edit, query) - Turn on/off the display of select handles for the view of the model editor.
        hud: (edit, query) - Sets whether the model panel will draw any enabled heads up display	elements in this window (if true).  Currently this requires the HUD elements to be globally enabled.
        h: (query) - Return the height of the associated viewport in pixels
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        hu: (edit, query) - Turn on/off the display of NURBS hulls for the view of the model editor.
        ipz: (edit, query) - Sets whether the model panel will ignore the 2D pan/zoom value to give an overview of the scene.
        ikh: (edit, query) - Turn on/off the display of ik handles and end effectors for the view of the model editor.
        imp: (edit, query) - Turn on/off the display of image plane for the view
        i: (edit, query) - Causes this command to modify the interactive refresh settings of the view.  In this way it is possible to change the behavior of the model editor during playback for improved performance.
        ibc: (create, edit, query) - Define whether interactive backface culling should be on or not
        dis: (create, edit, query) - Define whether interactive shadows should be disabled or not
        isFiltered: (query) - Returns true for model editors with filtering applied to their view of the scene. This could either be an explicit object filter, or a display option such as isolate select which filters the objects that are displayed.
        jx: (edit, query) - Turns on or off Xray mode for joints.
        j: (edit, query) - Turn on/off the display of joints for the view of the model editor.
        lt: (edit, query) - Turn on/off the display of lights for the view of the model editor.
        lw: (edit, query) - Set width of lines for display
        lc: (edit, query) - Turn on/off the display of locator objects for the view of the model editor.
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        lql: (edit, query) - Set whether to use "low quality lighting" when using the hardware renderer. The default value is false.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        m: (edit, query) - Turn on/off the display of manipulator objects for the view of the model editor.
        mct: (edit, query) - Sets the maximum constant transparency.  Setting this value remaps constant transparency values from the range [0.0, 1.0] to the range [0.0, maxConstantTransparency]. All transparency values are shifted linearly to the new range, so a fully transparency object (transparency 1.0) would appear with a transparency of maxConstantTransparency in the viewport, allowing highly transparent objects to be made visible.  This flag only affects constant (non-textured) transparent objects.
        mhl: (create, edit, query) - Define whether the hardware light maximum should be respected or not
        mp: (create) - Allows the created model editor to be embedded in the named model panel. Intended for use with custom model editors created via the API (i.e. the flag would be used on the derived MPxModelEditorCommand), though the flag may also be used on the base modelEditor command to restore a default Maya model editor to the panel. Note that the model editor previously owned by the panel is deleted.
        mt: (edit, query) - Turn on/off the Motion Trail display in the Viewport.
        ncl: (edit, query) - Turn on/off the display of nCloths for the view of the model editor.
        npa: (edit, query) - Turn on/off the display of nParticles for the view of the model editor.
        nr: (edit, query) - Turn on/off the display of nRigids for the view of the model editor.
        nud: (edit) - This flag prevents some viewport operations (such as isolate select) from being added to the undo queue.
        nc: (edit, query) - Turn on/off the display of nurbs curves for the view of the model editor.
        ns: (edit, query) - Turn on/off the display of nurbs surfaces for the view of the model editor.
        obf: (edit, query) - Set or query the current object filter name. An object filter is required to have already been registered.
        ofl: (query) - Return a list of names of registered filters.
        ofu: (query) - Return a list of UI names of registered filters.
        ofs: (edit, query) - Sets whether or not to display the object filter UI name in the heads up display when an object filter is active. This string is concatenated with the camera name.
        obu: (query) - Query the current object filter UI name. The object filter is required to have already been registered.
        ocl: (edit, query) - Set whether to enable occlusion culling testing when using the hardware renderer. The default value is false.
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        pi: (create, edit, query) - Define whether the particle instances should be shown or not
        pv: (edit, query) - Turn on/off the display of transform pivots for the view of the model editor.
        pl: (edit, query) - Turn on/off the display of sketch planes for the view of the model editor.
        po: (edit, multiuse) - Turn on/off the display of plug-in objects for the view. It depends on the plug-in implementation whether to respect this flag.
        ps: (edit) - Turn on/off the display of plug-in shapes for the view. It depends on the plug-in implementation whether to respect this flag.
        pm: (edit, query) - Turn on/off the display of polygon meshes for the view of the model editor.
        qpo: (query) - Query the on/off state of plug-in objects display for the view. To set the on/off state, use -pluginObjects instead.
        rs: (edit) - This flag causes the currently active objects to be removed from the list of objects visible in the view (if viewSelected is true).
        rdn: (query) - Query for the name of the draw API used by the Viewport 2.0 renderer for a 3d modeling viewport. The possible return values are "VirtualDeviceGL" if Maya is set to use "OpenGL - Legacy" for Viewport 2.0, "VirtualDeviceGLCore" if Maya is set to use "OpenGL - Core Profile" (either Compatibility or Strict) for Viewport 2.0, or "VirtualDeviceDx11" if Maya is set to use DirectX for Viewport 2.0. If the renderer for the 3d modeling viewport is not Viewport 2.0, an empty string will be returned.
        rls: (query) - Query for a list of the internal names for renderers available for use with the 3d modeling viewport. The default list contains at least "vp2Renderer", if supported. See rendererName for more details on these renderers. Any plug-in viewport renderers will also appear in this list.
        rlu: (query) - Query for a list of the UI names for renderers available for use with the 3d modeling viewport. The default list consists of the UI name for "vp2Renderer", if it is supported. Any plug-in viewport renderer's UI names will also appear in this list. This list and the list returned from rendererList have a 1:1 correspondance.
        rnm: (edit, query) - Set or get the renderer used for a 3d modeling viewport. The name provided should be an internal name of a renderer. The 'rendererList' flag can be used to query for a list of available names. The default renderer is "vp2Renderer": Viewport 2.0.
        rol: (query) - Query for a list of the internal names for renderer overrides for a 3d viewport renderer. Currently only the "Viewport 2" renderer supports renderer overrides.
        rou: (query) - Query for a list of the UI names for renderer overrides for a 3d viewport renderer. Currently only the "Viewport 2" renderer supports renderer overrides.
        rom: (edit, query) - Set or get the override used for a 3d viewport renderer. The name provided should be the internal name for an override.  The 'rendererOverrideList' flag can be used to query for a list of available names. Currently only the "Viewport 2" renderer  supports renderer overrides. Setting an empty string will unset any currently active override.
        rcc: (edit) - When specified will reset the camera transform for the active custom camera used for a scene render filter. It is only enabled when a valid scene render filter is specified.
        srf: (edit, query) - Specifies the name of a scene render filter
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        sel: (edit, query) - Sets whether the model panel will draw any selection hiliting on the objects in this window.
        ss: (edit) - This flag causes the currently active objects to be the only objects visible in the view (if viewSelected is true).
        sml: (create, edit, query) - Shading model to use
        sdw: (edit, query) - Turn on/off the display of hardware shadows in shaded mode.
        soc: (create, edit, query) - Define whether small object culling should be enabled or not
        sot: (create, edit, query) - Threshold used for small object culling
        swf: (edit, query) - Turns on or off smoothing of wireframe lines and points
        st: (edit, query) - This flag turns on/off sorting of transparent objects during shaded mode refresh. Normally, objects are sorted according to their origin in camera space but when this flag is turned off they will be drawn according to their (depth-first traversal) order in the scene graph. This is a global flag that affects all model editors.
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        sdm: (create, edit, query) - If this flag is used then set stereo draw mode
        str: (edit, query) - Turn on/off the display of Paint Effects strokes for the view
        sds: (edit, query) - Turn on/off the display of subdivision surfaces for the view of the model editor.
        ta: (edit, query) - Set whether to perform anisotropic texture filtering. Will work only if the anisotropic texture filtering extension is supported in OpenGL on the graphics system.
        tcp: (create, edit, query) - Defines whether texture compression should be used or not
        td: (edit, query) - Set the type of blending to use for textures. The blend is performed between the destination fragment and the texture fragment. The source is usually the material color. Argument options are: "modulate" : multiply the destination and texture fragment "decal" : overwrite the destination with the texture fragment
        tem: (create, edit, query) - If true then use a texture environment map
        th: (edit, query) - Set whether to show specular hilighting when the display is in shaded textured mode.
        tms: (edit, query) - Set maximum texture size for hardware texturing.  The integer value must be a power of 2.  Recommended values are 128 or 256.  If the value specified is larger than the OpenGL maximim textures size for the graphics hardware it will be clamped to the OpenGL size.  If many large textures are used in a scene reducing this value improves performance.  On Impact texture memory is pinned in RAM so using large textures can cause reliability and performance problems. Again reducing this value will help. Software rendering does not use this value. This flag is obsolete as of Maya 6.5. The maxTextureResolution/mtr argument on the displayPref command should be used instead.
        tmu: (query) - Returns the total number of bytes used by all texture maps.  This is typicly width*height*channels for all texture objects in the scene If the texture is mip mapped all mip map levels are included in the total though not never more than two level will be in use at one time
        ts: (edit, query) - Set the type of sampling to be used for texture display. The argument can be either:  1 : means to perform point sample 2 : means to perform bilinear interpolation (default)
        tx: (edit, query) - Turn on/off the display of texture objects for the view
        tge: (edit) - Toggles between the current and the default exposure value of the editor.
        tgg: (edit) - Toggles between the current and the default gamma value of the editor.
        tis: (edit, query) - Set whether to enable display of transparency in shadows when using the hardware renderer. The default value is false.
        tal: (edit, query) - Set the transparency algorithm. The options are:  1) "frontAndBackCull" : Two pass front and back culling technique. 2) "perPolygonSort" : Draw transparent polygons in back-to-front order technique.  transparency pptions 1) and 2) are supported by the hardware renderer. Options 1) is supported by the interactive modeling viewports. The default value is "frontAndBackCull".
        tsl: (edit, query) - Turns on or off two sided lighting.  This may be used with the -default flag.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        ucm: (edit) - Using this flag tells the model panel to check which color mode it should be in, and to switch accordingly.  This flag may be used to update a model panel after a camera image plane has been added or removed.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        ubr: (edit, query) - Set whether to use the "base" renderer when using the hardware renderer and in "interactive display mode" (-useInteractiveMode) The default value is false.
        uci: (edit, query) - Sets whether the model panel will attempt to use color index mode when possible.  Color index mode can provide a performance increase for point, bounding box, and wireframe display modes. This may be used with the -default flag.
        udm: (edit, query) - Sets whether the model panel will draw all the shaded surfaces using the default material as opposed to using the material(s) currently assigned to the surfaces.
        ui: (edit, query) - Turns on or off the use of the special interaction settings during playback.  This flag may be used with the -default flag.
        ip: (edit, query) - Sets whether the model panel will be forced into RGB mode when there is an image plane attached to the panel's camera.
        urr: (create, edit, query) - Set true if using the reduced renderer
        ut: (create) - Forces the command to use a command template other than the current one.
        un: (edit, query) - Allows the user to associate a node name with the modelEditor. The value is automatically updated in the event the node is deleted or renamed.
        vo: (query) - Returns the name (if any) of the objectSet which contains the list of objects visible in the view if viewSelected is true and the list of objects being displayed does not come from the active list.
        vs: (edit, query) - This flag turns on/off viewing of selected objects. When the flag is set to true, the currently active objects are captured and used as the list of objects to view.
        vtn: (edit, query) - Sets the view pipeline to be applied if color management is enabled in the current editor.
        vt: (query) - Returns a string indicating the type of the model editor. For the default model editor, returns the empty string. For custom model editor types created via the API, returns the same string as is returned via the method MPx3dModelView::viewType().
        w: (query) - Return the width of the associated viewport in pixels.
        wbs: (edit, query) - Sets whether a backing store is used to optimization the drawing of active objects. This mode can provide a performance increase in wireframe mode for certain scenes.
        wos: (edit, query) - Sets whether the model panel will draw the wireframe on all shaded objects (if true) or only for active objects (if false).
        xr: (edit, query) - Turns on or off Xray mode.  This may be used with the -default flag.
    """
    ...


def modelPanel(*args, bl: bool = ..., cam: Optional[Union[str, bool]] = ..., ctl: bool = ..., cp: str = ..., cs: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., es: bool = ..., ex: bool = ..., init: bool = ..., iu: bool = ..., l: Optional[Union[str, bool]] = ..., mrl: bool = ..., mbv: bool = ..., me: bool = ..., ni: bool = ..., p: Optional[Union[str, bool]] = ..., pmp: Optional[Union[str, bool]] = ..., rp: str = ..., to: bool = ..., toc: Optional[Union[str, bool]] = ..., tor: bool = ..., up: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a panel consisting of a model editor. See
    the modelEditor command documentation for more information.

    Args:
        bl: (query) - This flag returns the name of the layout which is the parent of the panels icon bar.
        cam: (edit, query) - Query or edit the camera in a modelPanel.
        ctl: (query) - Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return "" if no control is present.
        cp: (edit) - Makes this panel a copy of the specified panel.  Both panels must be of the same type.
        cs: (edit) - Command string used to create a panel
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the Maya panel.
        es: (edit) - Command string used to edit a panel
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        init: (create, edit) - Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
        iu: (query) - Returns true if only one instance of this panel type is allowed.
        l: (edit, query) - Specifies the user readable label for the panel.
        mrl: (create, edit, query) - Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.
        mbv: (create, edit, query) - Controls whether the menu bar for the panel is displayed.
        me: (query) - This flag returns the name of the model editor contained by the panel.
        ni: (edit, query) - (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.
        p: (create) - Specifies the parent layout for this panel.
        pmp: (edit, query) - Specifies the procedure called for building the panel's popup menu(s). The default value is "buildPanelPopupMenu".  The procedure should take one string argument which is the panel's name.
        rp: (edit) - Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
        to: (edit, query) - Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.
        toc: (create) - Will create this panel as a torn of copy of the specified source panel.
        tor: (create, edit) - Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOff flag which should only be used to tear off the panel.
        up: (edit) - Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def multiTouch(*args, g: bool = ..., t: Optional[Union[int, bool]] = ..., query: bool = ...) -> Any:
    r"""
    Used to interact with the Gestura (multi-touch) library.

    Args:
        g: (create, query) - Enables/Disables multi touch gestures.
        t: (create, query) - Sets the trackpad mode.  Values can be:  1 - Cursor Control only 2 - Multi-touch Gestures Only 3 - Cursor and Multi-touch  Note: this is a "Mac" only flag.
    """
    ...


def nameCommand(*args, ann: Optional[Union[str, bool]] = ..., c: Optional[Union[str, bool]] = ..., da1: Optional[Union[str, bool]] = ..., da2: Optional[Union[str, bool]] = ..., da3: Optional[Union[str, bool]] = ..., d: bool = ..., stp: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    This command creates a nameCommand object. Each nameCommand object
    can be connected to a hotkey. Thereafter, the nameCommand's command
    string will be executed whenever the hotkey is pressed (or released,
    as specified by the user).

    Args:
        ann: (create) - A description of the command.
        c: (create) - The command that is executed when the nameCommand is invoked.
        da1: (create) - 
        da2: (create) - 
        da3: (create) - These are optional, user-defined data strings that are attached to the nameCommand object.  They can be edited or queried using the assignCommand command.
        d: (create) - Indicate that this name command is a default command. Default name commands will not be saved to preferences.
        stp: (create) - Sets the language type for the command script. Can only be used in conjunction with the -command flag. Valid values are "mel" (enabled by default), and "python".
    """
    ...


def nameField(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dif: bool = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., ncc: Optional[Union[str, bool]] = ..., nbg: bool = ..., npm: bool = ..., o: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rfc: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates an editable field that can be linked to the name
    of a Maya object. The field will always show the name of the object.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit, query) - This command is executed when the field text is changed by the user.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dif: (create, edit, query) - Sets whether the name field draws itself with a frame when it is inactive. By default, this option is false.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        ncc: (create, edit, query) - This command is executed when the name of the node changes. NOTE: this will be executed when the node name changes, whether or not the name-change originated with the user typing into the field. If you want to attach a command to be executed when the user types into the field, use the -cc/changeCommand flag.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        o: (create, edit, query) - Attaches the field to the named dag/ufe object, so that the field will always display the object's name.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rfc: (create, edit, query) - Command executed when the field receives focus.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def nodeEditor(*args, at: Optional[Union[int, bool]] = ..., ann: bool = ..., an: str = ..., agm: bool = ..., ala: bool = ..., aln: bool = ..., ant: bool = ..., att: bool = ..., asn: bool = ..., bcn: bool = ..., bnc: str = ..., bsc: bool = ..., cat: bool = ..., clt: int = ..., csn: bool = ..., cgm: bool = ..., csm: Optional[Union[float, bool]] = ..., cso: Optional[Union[float, bool]] = ..., csr: Optional[Union[float, bool]] = ..., cs: Optional[Union[str, bool]] = ..., cst: Optional[Union[int, bool]] = ..., cns: bool = ..., cc: Optional[Union[str, bool]] = ..., ctl: bool = ..., ci: Optional[Union[str, bool]] = ..., cnc: Optional[Union[str, bool]] = ..., ct: Optional[Union[Tuple[int, List[str]], bool]] = ..., ced: bool = ..., cal: Optional[Union[Tuple[str, List[str]], bool]] = ..., ch: bool = ..., dps: bool = ..., dt: Optional[Union[str, bool]] = ..., deleteSelected: bool = ..., dtg: Optional[Union[str, bool]] = ..., dot: Optional[Union[str, bool]] = ..., ds: bool = ..., dpt: Optional[Union[Tuple[int, List[int]], bool]] = ..., egl: bool = ..., ex: bool = ..., ets: bool = ..., fbc: bool = ..., fbn: bool = ..., fbp: bool = ..., fbi: bool = ..., fbt: bool = ..., f: Optional[Union[str, bool]] = ..., fcn: Optional[Union[str, bool]] = ..., fc: Optional[Union[str, bool]] = ..., fmc: Optional[Union[str, bool]] = ..., fa: bool = ..., fms: bool = ..., fs: bool = ..., gnl: bool = ..., gsc: bool = ..., gsl: bool = ..., gs: bool = ..., gv: bool = ..., hw: bool = ..., hlc: Optional[Union[str, bool]] = ..., hc: Optional[Union[Tuple[str, bool], bool]] = ..., hm: Tuple[str, int, float] = ..., ia: bool = ..., isl: bool = ..., kpc: Optional[Union[str, bool]] = ..., krc: Optional[Union[str, bool]] = ..., lay: bool = ..., lc: Optional[Union[str, bool]] = ..., lck: bool = ..., mlc: Optional[Union[str, bool]] = ..., nss: str = ..., ntm: Optional[Union[str, bool]] = ..., nvm: str = ..., onp: Tuple[float, float] = ..., pv: Tuple[float, float] = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., psn: bool = ..., pms: Optional[Union[str, bool]] = ..., pr: bool = ..., rdt: bool = ..., rd: bool = ..., rem: str = ..., run: bool = ..., ru: bool = ..., ren: str = ..., rt: Tuple[int, List[str]] = ..., ri: Optional[Union[str, bool]] = ..., rlt: bool = ..., rn: Optional[Union[str, bool]] = ..., rfs: bool = ..., sv: float = ..., sa: bool = ..., scn: bool = ..., sd: bool = ..., sfc: bool = ..., sln: Optional[Union[str, bool]] = ..., su: bool = ..., slc: Optional[Union[str, bool]] = ..., sw: bool = ..., scc: Optional[Union[str, bool]] = ..., sns: bool = ..., saa: str = ..., sn: bool = ..., ssg: bool = ..., ss: bool = ..., tab: bool = ..., st: bool = ..., suc: bool = ..., sts: bool = ..., ssl: bool = ..., tcc: Optional[Union[str, bool]] = ..., taf: bool = ..., tsp: bool = ..., tss: str = ..., ttc: Optional[Union[str, bool]] = ..., tdl: Optional[Union[int, bool]] = ..., up: bool = ..., ulk: bool = ..., upd: bool = ..., ups: bool = ..., ua: bool = ..., uln: Optional[Union[int, bool]] = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries a nodeEditor editor.
    The optional argument is the name of the control.

    Args:
        at: (edit, query) - Gets/sets the index of the tab widget's (active) visible tab. Note: the index is zero-based.
        ann: (create, edit, query) - New nodes should be added to the graph, default is on.
        an: (edit, multiuse) - Adds a specified node to the graph. Passing an empty string means the current model selection will be added to the graph.
        agm: (create, edit, query) - When enabled, the graphing will add node networks to the existing graph instead of replacing it.
        ala: (create, edit, query) - Attributes should not be filtered out of the graph, default is off.
        aln: (create, edit, query) - Nodes should not be filtered out of the graph, default is off.
        ant: (query) - Query only. Returns whether this Node Editor is allowed to have new tabs added, either by creating a new tab or duplicating an existing one.
        att: (create, edit) - Control whether or not the tabs can be torn off and floated. Defaults to true.
        asn: (create, edit, query) - When enabled, default node widths will be dynamically determined by the node name length, default is on.
        bcn: (edit) - Begin interactive node-creation at the mouse position. This will create a control which allows quick creation of a node in the editor. The actual creation is delegated to the createNodeCommand.
        bnc: (edit) - Begin a new interactive connection at the given attribute.
        bsc: (edit) - Break the selected attribute connections.
        cat: (edit) - Close all tabs on the tab widget.
        clt: (edit) - Closes the tab on the tab widget at the specified index. Note: using this flag on a torn-off tab will close the node editor since there can be only a single tab. In this case the index argument is ignored.
        csn: (edit) - Creates a connection between all selected nodes in the editor. The default output port of one node is connected to the default input port of the next node in the selection order.
        cgm: (create, edit, query) - When enabled, connected nodes will be re-graphed when new nodes are added to the graph.
        csm: (edit, query) - Sets the minimum segment length ratio of the connection leaving an output port. Applies to "straight", "corner" and "s-shape" connection styles. Value must be between 0.0 and 1.0.
        cso: (edit, query) - Sets the offset length for each connection edges. Applies to "corner" and "s-shape" connection styles. Value must be between 0.0 and 1.0.
        csr: (edit, query) - Sets the roundness factor for each connection edges. Applies only to "s-shape" connection style. Value must be between 0.5 and 1.0.
        cs: (edit, query) - Sets how the connection between nodes are drawn. Mode values are: "bezier", "straight", "corner" and "s-shape". In query mode, returns current connection style.
        cst: (edit, query) - Sets where the vertical line should be drawn on connection edge, 0 being in the middle. Applies to "corner" and "s-shape" connection styles. Value must be between -100 and 100.
        cns: (create, edit, query) - When enabled, the size of the node name will consistently match the current zoom level. When disabled, the node name size will remain the same after zooming out past a certain level. Default is on.
        cc: (create, edit, query) - Specifies a function to be called whenever the contents of the node editor changes.
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        ci: (create, edit) - Creates or modifies a hyperGraphInfo network to save the state of the editor.
        cnc: (create, edit, query) - Specifies a function to be used to create nodes through the editor. The function will be passed the name of the chosen node type. This is used by the tab-create workflow. By default createNode is used.
        ct: (create, edit) - Create a new tab inserting it into the tab widget at the specified index. If index is out of range (such as -1), the tab is simply appended. You can optionally (Python only) specify a tab label, otherwise it will be set with a default name. In Mel using an empty string ("") for the tab label will set it with a default name. The new tab becomes the current (active) tab. Note: Only certain Node Editors are allowed to create new tabs, which can be checked by using the -allowNewTabs flag.
        ced: (create, edit, query) - Toggle crosshair cursor during edge dragging on/off.
        cal: (edit, query) - Create/Edit the custom attribute list for the given node by entering a special "Edit Mode" for the node. Note: only one node in the node editor can be in this edit mode at a time. If another node is selected the edit mode will end automatically. To end the edit mode use an empty string for node. Takes an optional edit mode command which accepts: "hideall" (sets all the attributes to hidden), "showall" (sets all the attributes to visible), "preview" (temporarily shows only the visible attributes), "revert" (restores the visibility settings of the attributes to what they were before edit mode) and "reset" (the visible attributes are reset so that only the interesting attributes are displayed). In query mode returns the name of the node, if any, in edit mode. Note: the optional string argument is ignored in query mode.
        ch: (create, edit) - Change the HUD to the next state.
        dps: (create, edit, query) - Sets default pinned state of all nodes, 1 for pinned, 0 for unpinned. default value 0
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        deleteSelected: (edit) - Delete the selected nodes and break the selected connections.
        dtg: (create, edit, query) - Attaches a tag to the editor.
        dot: (edit, query) - In query mode: Get the graph information in DOT format. The flag argument specifies a file path to write to. If "-" is supplied, the data is returned as a string, otherwise the size in bytes of the written file is returned. In edit mode: Sets the positions of nodes in the graph from a Graphviz output file in plain format. Only the node position, width and height information is used. If the argument starts with "graph ", it will be treated as the plain data instead of a filename.       In query mode, this flag needs a value.
        ds: (create, edit) - Include nodes that are downstream of the root nodes.
        dpt: (create, edit) - Duplicates the tab at the specified index, placing it at the second optional (Python only) specified index. To place duplicated tab at the end use -1. The duplicated tab becomes the current (active) tab. Note: Only certain Node Editors are allowed to duplicate tabs, which can be checked by using the -allowNewTabs flag.
        egl: (create, edit, query) - Specifies if OpenGL should be used to render the node editor view. When enabled this will greatly improve performance but is still a work in progress.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        ets: (create, edit, query) - Include child shapes for each selected transform.
        fbc: (query) - Returns a description of the connection(s) at the current mouse position in the editor view, if any. The connection(s) will be returned as a list of strings, which are pairs of plugs for each connection.
        fbn: (query) - Returns the name of the node at the current mouse position in the editor view, if any.
        fbp: (query) - Returns the name of the plug (attribute) at the current mouse position in the editor view, if any.
        fbi: (query) - Returns the index of the tab at the current mouse position in the editor view, if any.
        fbt: (query) - Returns the most specific type of the feedback item (item at the current mouse position) in the editor view, if any. Will be one of "plug", "node", "tab", "connection" or an empty string. Use the other feedback* flags to query the item description.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        fcn: (create, edit, query) - Specifies a function to be used to filter the list of node types which appear in the inline-creation menu (tab key). The function should accept one string array argument and return a string array.
        fc: (create, edit, query) - Specifies a function to be called whenever focus changes for the node editor.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        fa: (edit) - Frame all the contents of the node editor.
        fms: (edit) - Frame the current model selection.
        fs: (edit) - Frame the selected contents of the node editor.
        gnl: (query) - Returns a list of all nodes displayed in the editor.
        gsc: (edit) - Graph the nodes connected by the selected attribute connections.
        gsl: (edit) - Graph the nodes that are currently selected.
        gs: (create, edit, query) - Toggle grid snapping on/off.
        gv: (create, edit, query) - Toggle grid visiblity on/off.
        hw: (query) - Returns if the selected connection has a watchpoint set.
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        hc: (create, edit, multiuse, query) - Sets if selecting a node should highlight its connections for the specified editor, which can be "regular" or "bifrost".
        hm: (edit) - Display the given message on the editor HUD. The flag arguments are (message, type, duration), where type is:  upper-left corner. top center. upper-right corner. center.  Duration 0 means the message stays until removed. Duration > 0 means it stays for that number of seconds. An empty message erases whatever is currently displayed for the given type.
        ia: (create, edit, query) - Deprecated. Do not use in scripts.
        isl: (edit, query) - Deprecated. Do not use in scripts.
        kpc: (create, edit, query) - Specifies a function to be called when a key is pressed and the editor has focus.  The function will be passed the name of the editor and an (uppercase) string representation of the key that was pressed, and should return true if the key was handled, and false if it was not.  Note: `getModifiers` can be used to query the current state of key modifiers.
        krc: (create, edit, query) - Specifies a function to be called when a key is released and the editor has focus.  The function will be passed the name of the editor and an (uppercase) string representation of the key that was released, and should return true if the key was handled, and false if it was not.  Note: `getModifiers` can be used to query the current state of key modifiers.
        lay: (edit) - Perform an automatic layout of the graph.
        lc: (create, edit, query) - Specifies a function to override the default action when a graph layout is required. The function will be passed the name of editor. The function should arrange the nodes in the graph.
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        nss: (edit) - Sets the icon swatch size of selected nodes in the active scene (all nodes if none are selected). Size values are "small" and "large".
        ntm: (create, edit, query) - Gets/sets the node title display mode of the current scene. Mode values are: "name" (Display node names), "type" (Display node types), "none" (Do not display titles)
        nvm: (edit) - Sets the attribute view mode of selected nodes in the active scene (all nodes if none are selected). Mode values are: "simple" (no attributes displayed), "connected" (connected attributes only), "all" (all interesting attributes displayed) and "custom" (use custom attribute view).
        onp: (edit) - Specifies the override position for new node. Values are respectively the width and height ratio; 0.0, 0.0 corresponds to the top left corner of the view, 1.0, 1.0 corresponds to the bottom right corner of the view, 0.5, 0.5 corresponds to the center of the view.
        pv: (edit) - Pan the view by the given amount. Arguments of 0 0 will reset the view translation.
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        psn: (edit) - Pins or unpins the selected nodes. If no nodes are selected, this will apply to all displayed nodes.
        pms: (create, edit, query) - Set the script to be called to register the popup menu with the control for this editor. The script will be called with a string argument which gives the name of the editor whose control the popup menu should be parented to.
        pr: (query) - Query only. Returns whether this node editor is the primary one. The primary editor is the only one that will show and allow tabs.
        rdt: (edit, query) - If this tab was torn-off from the primary node editor, then the tab and all its data will be re-docked back into the primary editor and this node editor will be closed. In query mode returns whether this tab was torn-off and is available to be re-docked.
        rd: (edit) - Removes all items downstream to the currently active selection.
        rem: (edit, multiuse) - Removes a node from the graph. An empty string indicates that currently selected nodes should be removed.
        run: (edit) - Removes unselected nodes from graph.
        ru: (edit) - Removes all items upstream to the currently active selection.
        ren: (edit) - Rename a node in the graph. Depending on the zoom level of the view, an edit field will either appear on the node item or in a popup dialog to allow the new name to be entered.
        rt: (edit) - Renames the tab at the specified index with the (optional) name. If no name is specified (Python only) or an empty string ("") is used then an inline edit field is opened to rename the tab.
        ri: (create, edit) - Restores the editor state corresponding to supplied hyperGraphInfo node.
        rlt: (edit, query) - If this node editor is the primary one, then restore the last closed tab (if any). In query mode returns whether there is a tab available to restore.
        rn: (create, edit, multiuse) - Add a node name as a root node of the graph. Passing an empty string clears the current root node list. When queried, returns the list of current root nodes.
        rfs: (create, edit) - Specify that the root nodes for the graph should taken from the currently active selection.
        sv: (edit) - Scales the graph view by the given factor. An argument of zero means reset to default.
        sa: (edit) - Select all items in the graph.
        scn: (edit) - Select the nodes connected by the selected attribute connections.
        sd: (edit) - Select all items downstream to the currently active selection.
        sfc: (edit) - Select the feedback connection(s) in the editor view, if any.
        sln: (edit, multiuse, query) - Select a node in the graph. Passing an empty string clears the current selection. When queried, returns the list of currently selected nodes.
        su: (edit) - Select all items upstream to the currently active selection.
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        sw: (create, edit) - Adds or removes the watchpoint on the selected connections.
        scc: (create, edit, query) - Specifies a function to be called whenever settings for the node editor get changed.
        sns: (edit) - Graph the shader network for all the objects on the selection list that have shaders.
        saa: (edit) - Display all attributes for the given node, not just primary attributes. Passing an empty string will apply this to all currently selected nodes. If no nodes are selected, this will be applied to all displayed nodes in the graph.
        sn: (create, edit, query) - Specifies whether nodes will have their namespace displayed if they are not in the root namespace.
        ssg: (create, edit, query) - Show shapes that are connected to the network through a shading group.
        ss: (create, edit, query) - Show shape nodes.
        tab: (create) - Creation time flag to explicitly control the visibility of the tabs. If this is set to true or false the tabs visibility will respect that setting. If this flag is not explicitly set then the tabs will be visible in the primary node editor and tear off tabs, but will not be visible for other editors that are not the primary editor.
        st: (create, edit, query) - Show transforms.
        suc: (create, edit, query) - Show unit conversion nodes.
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        ssl: (create, edit, query) - Keep the graph selection in sync with the model selection.
        tcc: (create, edit) - Command executed when the current (active) tab is changed. Re-selecting the current tab will not invoke this command. NOTE: This command will also be executed when switching into, out of, and between compound views.
        taf: (edit) - Toggles the display of the attribute filter field on selected nodes. If any of the selected nodes have the field displayed, this operation will hide the field for all nodes in the selection. If no nodes are selected, this will apply to all displayed nodes.
        tsp: (edit) - Toggles pinned state on selected nodes. If any selected nodes are unpinned, this operation will choose to pin all nodes. If no nodes are selected, this will apply to all displayed nodes.
        tss: (edit) - Toggles the swatch size of the given node between small and large. If supplied node name was empty, this will be applied to selection, and if no nodes are selected this is applied to all nodes in editor. When selection is a combination of small and large swatch sizes, this will set selection to large swatch mode.
        ttc: (create, edit, query) - Specifies a function to override the tooltip that is displayed for a node. The function will be passed the name of the node under the cursor, and should return a text string to be displayed. A simple HTML 4 subset is supported.
        tdl: (create, edit, query) - Specify the maximum number of edges which will be followed from any root node when building the graph. A negative value means unlimited. Default is unlimited.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        ups: (create, edit) - Include nodes that are upstream of the root nodes.
        ua: (create, edit, query) - Use assets and published attributes instead of contents and actual attributes.
        uln: (create, edit, query) - Specifies how attribute names should be displayed. 0 = Display using short attribute names. 1 = Display using nice/UI attribute names. 2 = Display using long attribute names.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def nodeOutliner(*args, ac: Optional[Union[str, bool]] = ..., a: str = ..., ann: Optional[Union[str, bool]] = ..., aao: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., c: Optional[Union[str, bool]] = ..., cs: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., f: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., lcn: bool = ..., lmc: Optional[Union[str, bool]] = ..., ln: bool = ..., m: bool = ..., mc: str = ..., mmo: bool = ..., ms: bool = ..., nn: bool = ..., nbg: bool = ..., nc: bool = ..., nd: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., phu: bool = ..., po: bool = ..., r: bool = ..., rr: bool = ..., rm: str = ..., rma: bool = ..., rpl: Optional[Union[str, bool]] = ..., sc: Optional[Union[str, bool]] = ..., sco: bool = ..., sh: bool = ..., si: bool = ..., snc: bool = ..., snk: bool = ..., so: bool = ..., sp: bool = ..., sro: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    The nodeOutliner command creates, edits and queries an outline control
    that shows dependency nodes and their attributes. Compound attributes
    are further expandable to show their children. Additional configure
    flags allow multi selection, customizable commands to issue upon
    selection, and showing connections (and connectability) to a single
    input attribute. There are also the abilities to add/remove/replace
    nodes through the command line interface, and drag/add.
    
    In some configurations, dragging a connected attribute of a node will
    load the node at the other end of the connection.
    
    There is a right mouse button menu and a flag to attach a command to
    it. The menu is used to list the specific connections of a connected
    attribute. Clicking over any spot but the row of a connected attribute
    will show an empty menu. By default, there is no command attached to
    the menu.

    Args:
        ac: (create, edit, query) - Command executed when the node outliner adds something. String commands use substitution of the term %node for whatever is added, eg, if you want to print the object added, the command should be "print(\"%node \\n\")".  Callable python objects are passed the node name.
        a: (edit) - add the given object to the display
        ann: (create, edit, query) - Annotate the control with an extra string value.
        aao: (create, edit, query) - Specify how attributes are to be sorted.  Current recognised values are "default" for no sorting and "ascend" to sort attributes from 'a' to ''z' and "descend" to sort from 'z' to 'a'. Notes: a) this only applies to top level attributes.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        c: (edit, query) - Takes an attribute argument ("nodeName.attributeName"), dims any attributes that can't connect to the given, and highlights any attributes already connected
        cs: (query) - Retruns a string array containing what is currently selected
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        f: (edit, query) - filter attributes based on a regular expression
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        lcn: (query) - Returns a string with the last clicked node
        lmc: (query) - Returns the text of the most recent menu selection.
        ln: (edit, query) - Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the niceNames flag is set.  Default is short names. Queried, returns a boolean.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mc: (edit) - Attaches the given command to each item in the popup menu.
        mmo: (edit, query) - Sets whether a menu option labelled "next available" will appear as the first option on any multi-attribute's right mouse button menu.  Defaults to True.
        ms: (edit, query) - Allow multiSelect; more than one thing to be selected at a time
        nn: (edit, query) - Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nc: (edit) - Reset the node outliner to not show any connectivity, ie, redraw all rows normally.
        nd: (query) - Returns a string array containing the list of nodes showing in the node Outliner
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        phu: (edit, query) - Sets whether clicking on an unconnected plug will select it or not.  Default is True.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        r: (edit) - Redraws the displayed space
        rr: (edit) - Redraws the given row
        rm: (edit, multiuse) - remove the given object from the display
        rma: (edit) - remove all objects from the display
        rpl: (edit, query) - replace what's displayed with the given objects
        sc: (edit, query) - Command issued by selecting.  Different from the c flag in that this command will only be issued if something is selected.
        sco: (edit, query) - show (true) or hide (false) only attributes that are connected matching input/output criteria
        sh: (edit, query) - show (true) or hide (false) UI invisible attributes that match the input/output criteria
        si: (edit, query) - show only UI visible attributes that can be connected to
        snc: (edit, query) - show (true) or hide (false) non connectable attributes that match the input/output criteria
        snk: (edit, query) - show (true) or hide (false) non keyframeable (animatable) attributes that match the input/output criteria
        so: (edit, query) - show only UI visible attributes that can be connected from
        sp: (edit, query) - Show only published attributes for an asset or a member of an asset. This flag is ignored on nodes not related to assets.
        sro: (edit, query) - show only read only attributes attributes that can be connected from
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def nodeTreeLister(*args, af: Optional[Union[str, bool]] = ..., add: Optional[Union[Tuple[str, str, str], bool]] = ..., avi: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., clr: bool = ..., cp: str = ..., dt: Optional[Union[str, bool]] = ..., dn: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ei: str = ..., ex: bool = ..., ep: str = ..., etd: int = ..., fcb: Optional[Union[str, bool]] = ..., fl: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., isc: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., nl: Optional[Union[str, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rc: Optional[Union[str, bool]] = ..., rf: str = ..., rem: str = ..., ruc: bool = ..., sp: str = ..., sdn: Tuple[str, str] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., vnn: bool = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries the node tree lister control.
    nodeTreeLister is a treeLister, but items are assumed to have commands which
    return dependency node names.  Dragging from the results pane is supported.
    
    The optional argument is the name of the control.

    Args:
        af: (create, edit, multiuse) - Add an item path to the favorites folder.  The item path does not have to actually be in the tree.
        add: (create, edit, multiuse) - Add an item to the control.  The arguments are item-path,icon path,command where item-path is the path from the root of the tree to the item's name icon path is the icon displayed in the results list command is the script which is executed when the item is LMB clicked
        avi: (create, edit, multiuse) - Add a VNN (Virtual Node Network) item to the control.  The arguments are: item-path, icon-path, vnn-string, vnn-action. Where item-path is the path from the root of the tree to the item's name, icon-path is the icon displayed in the results list, vnn-string is used for drag data when MMB dragging the item and vnn-action is the script which is executed when the item is LMB clicked. The vnn-string should be comprised of: 'VNN runtime,VNN library,VNN node', where the VNN library can contain sub-libraries, using / to separate.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        clr: (edit) - Clears the contents of the control.
        cp: (edit, multiuse) - Collapse a path in the tree.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dn: (query) - Query the display name of a given item.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ei: (edit) - Execute the command associated with an item.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        ep: (edit, multiuse) - Expand a path in the tree.
        etd: (edit) - Expand the tree to the given depth.
        fcb: (create, edit) - This script is called whenever a favorite is added or removed. It is passed two arguments: The item's path and a boolean indicating if it is being added to favorites (True) or removed (False).
        fl: (query) - Returns the list of favorite items.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        isc: (query) - Returns the language and script command of the passed item path as a two-element list, the first element is the string "MEL" or "Python" and the second is the command script. Note that items with Python callable commands will be returned as strings.       In query mode, this flag needs a value.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nl: (create, edit, query) - The node library that this tree lister is currently displaying.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rc: (create, edit, query) - Command executed when the refresh button is pressed.  Note: by default the refresh button is hidden and will be shown automatically when this command script is attached.
        rf: (edit, multiuse) - Remove an item from favorites.  Accepts the full favorite path or the tail of the full path.
        rem: (edit, multiuse) - Remove an item path.
        ruc: (query) - Returns the path to the result (right-pane) item under the mouse cursor. Returns an empty string if there is no such item.
        sp: (edit, multiuse) - Select a path in the tree.
        sdn: (edit, multiuse) - Edit the displayed name of a given item.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        vnn: (query) - Returns the VNN (Virtual Node Network) string of the passed item path.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def optionMenu(*args, acc: bool = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bsp: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dai: bool = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., ill: bool = ..., ils: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., mvi: Optional[Union[int, bool]] = ..., nbg: bool = ..., ni: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pmc: Optional[Union[str, bool]] = ..., pmo: bool = ..., po: bool = ..., sl: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a popup menu control.  The command creates the
    control and provides its menu.  Subsequent calls to the menuItem
    command will place them in the popup.  Note that commands attached
    to menu items will not get called.  Attach any commands via
    the -cc/changedCommand flag.

    Args:
        acc: (create, query) - Toggle whether to always call the change command, regardless of the change.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bsp: (create, edit) - Callback that is called just before we show the drop down menu.
        cc: (create, edit) - Adds a callback that is called when a new item is selected.  The MEL script will have the newly selected item's value substituted for #1.  For Python, the callback should be a callable object which accepts one argument, which is the newly selected item's value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dai: (edit) - Delete all the items in this menu.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        ill: (query) - The long names of the menu items.
        ils: (query) - The short names of the menu items.
        l: (create, edit, query) - The optional label text to the left of the popup menu.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mvi: (create, edit, query) - The maximum number of items that are visible in the popup menu. If the popup contains more items than this, a scrollbar is added automatically.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        ni: (query) - The number of menu items.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pmc: (create, edit) - Specify a script to be executed when the popup menu is about to be shown.
        pmo: (create, edit, query) - Indicate the -pmc/postMenuCommand should only be invoked once.  Default value is false, ie. the -pmc/postMenuCommand is invoked every time the popup menu is shown.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sl: (create, edit, query) - The current menu item.  The argument and return value is 1-based.  Note that the current menu item can only be set if it is enabled.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - The text of the current menu item.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def optionMenuGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dai: bool = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., ill: bool = ..., ils: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., ni: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pmc: Optional[Union[str, bool]] = ..., pmo: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sl: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label text, option
    menu and an extra label.  Both the label and extra label are optional.
    Subsequent calls to the menuItem command will place them in the option
    menu.  When adding menu items to the option menu after the initialization
    step, use the name of the options menu itself. See the example below for
    more details. Note that commands attached to menu items will not get called.
    Use the -cc/changedCommand flag to be notified when the user
    changes the value of the option menu.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when a new item is selected.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dai: (edit) - Delete all the items in this menu.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - If present on creation this specifies that there will be an extra label to the right of the option menu.  Sets the string to be the extra label text.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        ill: (query) - Returns the long names of the items.
        ils: (query) - Returns the short names of the items.
        l: (create, edit, query) - If present on creation this specifies that there will be a label to the left of the option menu.  Sets the string to be the label text.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        ni: (query) - Returns the number of items.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pmc: (create, edit) - Specify a script to be executed when the popup menu is about to be shown.
        pmo: (create, edit, query) - Indicate the -pmc/postMenuCommand should only be invoked once.  Default value is false, ie. the -pmc/postMenuCommand is invoked every time the popup menu is shown.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sl: (create, edit, query) - Selects an item by index.  The first item is 1.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Select an item by value.  Also, returns the text of the currently selected item.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def outlinerEditor(*args, ams: bool = ..., ats: bool = ..., alf: Optional[Union[str, bool]] = ..., aao: Optional[Union[str, bool]] = ..., af: Optional[Union[str, bool]] = ..., xpd: bool = ..., xas: bool = ..., ael: bool = ..., autoSelectNewObjects: bool = ..., cif: bool = ..., ctl: bool = ..., dt: Optional[Union[str, bool]] = ..., ds: bool = ..., dm: Optional[Union[str, bool]] = ..., dns: bool = ..., dtg: Optional[Union[str, bool]] = ..., dip: bool = ..., ean: bool = ..., ex: bool = ..., eai: bool = ..., eas: bool = ..., eat: bool = ..., xc: bool = ..., eo: bool = ..., fbn: bool = ..., fbr: bool = ..., f: Optional[Union[str, bool]] = ..., fmc: Optional[Union[str, bool]] = ..., gcs: Optional[Union[int, bool]] = ..., ha: bool = ..., hlc: Optional[Union[str, bool]] = ..., hs: bool = ..., hir: bool = ..., iha: bool = ..., ioc: bool = ..., ics: Optional[Union[str, bool]] = ..., isSet: Optional[Union[int, bool]] = ..., ism: Optional[Union[int, bool]] = ..., isu: Optional[Union[int, bool]] = ..., lck: bool = ..., ln: bool = ..., mlc: Optional[Union[str, bool]] = ..., mmt: bool = ..., mst: Optional[Union[str, bool]] = ..., nn: bool = ..., obj: Optional[Union[str, bool]] = ..., obc: bool = ..., obl: bool = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., po: bool = ..., pin: Optional[Union[str, bool]] = ..., rfs: bool = ..., rcs: int = ..., rni: int = ..., rsi: bool = ..., rfa: bool = ..., rfi: Optional[Union[int, bool]] = ..., rfv: bool = ..., sec: Optional[Union[str, bool]] = ..., slc: Optional[Union[str, bool]] = ..., sod: str = ..., sf: Optional[Union[str, bool]] = ..., sif: bool = ..., aco: bool = ..., saw: bool = ..., a: bool = ..., sam: bool = ..., av: bool = ..., atr: bool = ..., cmp: bool = ..., con: bool = ..., sco: bool = ..., scc: bool = ..., dag: bool = ..., laf: bool = ..., smi: bool = ..., sn: bool = ..., num: bool = ..., spa: bool = ..., spi: bool = ..., spc: bool = ..., rm: bool = ..., rn: bool = ..., sc: bool = ..., ssm: bool = ..., shp: bool = ..., tno: bool = ..., ste: bool = ..., uv: bool = ..., sui: bool = ..., su: bool = ..., suc: bool = ..., so: Optional[Union[str, bool]] = ..., sts: bool = ..., tf: bool = ..., uf: Optional[Union[Tuple[str, str], bool]] = ..., ufv: bool = ..., up: bool = ..., ulk: bool = ..., unp: Optional[Union[str, bool]] = ..., upd: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates an outliner editor which can be used to display a list
    of objects.
    WARNING: some flag combinations may not behave as you expect.  The command
    is really intended for internal use for creating the outliner used by
    the various editors.

    Args:
        ams: (create, edit) - If true then multiple selection will be allowed in the outliner.
        ats: (create, edit) - If true, then clicking on an item in the outliner will select or deselect it without affecting the selection of other items (unless allowMultiSelection is false). If false, clicking on an item in the outliner will replace the current selection with the selected item.
        alf: (create, edit, query) - Specifies whether a filter is to be applied when displaying animation layers. If so, the options can be "allAffecting" (no filter), "active" (only the active layers on the object will be displayed) and "animLayerEditor" (the settings will be taken from the animation layer editor).
        aao: (create, edit, query) - Specify how attributes are to be sorted. Current recognised values are "default" for no sorting and "ascend" to sort attributes from 'a' to ''z' and "descend" to sort from 'z' to 'a'. Notes: a) this only applies to top level attributes.
        af: (create, edit, query) - Specifies the name of an itemFilter object to be placed on this editor. This filters the attributes displayed in the editor.
        xpd: (create, edit, query) - This flag specifies whether or not objects that are loaded in should have their attributes automatically expanded.
        xas: (create, edit, query) - This flag specifies whether or not DAG objects that have animated shapes should be automatically expanded to show the shape. This flag is enabled by default and has no effect if autoExpand is disabled.
        ael: (create, edit, query) - If true then when a node with animation layer is displayed, all the animation layers will show up in expanded form.
        autoSelectNewObjects: (create, edit, query) - This flag specifies whether or not new objects added to the outliner should be automatically selected.
        cif: (create, edit, query) - This flag specifices whether or not filters should be ignored when displaying container contents.
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ds: (create, edit) - If true then clicking on an item in the outliner will add or remove just that item from the selection connection. If false then clicking on an item in the outliner causes the selection connection to be reloaded with the currently selected items in the outliner.
        dm: (create, edit, query) - Affects how the outliner displays when a filter is applied. List mode is a non-indented flat list. DAG mode indents to represent the hierarchical structure of the model.
        dns: (create, edit, query) - If true this flag specifies that new objects added to the outliner will not be selected, even if they are active.
        dtg: (create, edit, query) - Attaches a tag to the editor.
        dip: (create, edit, query) - This flag specifies the mode for drag and drop. If the flag is true, dropping items will do a reparent. If it is false, dropping will reorder items. By default, the flag is true (parent).
        ean: (create, edit, query) - This flag specifies whether or not attribute names can be edited. By default double-clicking on an attribute will open the expression editor for that attribute.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        eai: (create, edit) - Expand or collapse all items in the outliner.
        eas: (create, edit) - Expand or collapse all selected items in the outliner.
        eat: (edit) - Force the outliner to fill the selection list with only attributes.
        xc: (create, edit, query) - This flag specifies whether or not attributes should be expanded to show their input connections. Note: currently the expansion will only show animCurves.
        eo: (create, edit, query) - This flag specifies whether or not objects that are loaded in should be automatically expanded.
        fbn: (query) - Returns the outliner item name at the current mouse position, if any.
        fbr: (query) - Returns the outliner row number at the current mouse position, if any.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        gcs: (query) - Returns the current set of item at the given row. As an item can belong to number of sets, current set is the set to which the item belongs to currently.
        ha: (create, edit, query) - This flag specifies whether or not the outliner should highlight objects that are active. Note: if the outliner is driving the contents of another editor, setting highlightActive to true may produce unexpected behavior.
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        hs: (create, edit, query) - This flag specifies whether or not the outliner should highlight objects that are contained in the highlightConnection.
        hir: (create, edit, query) - This flag specifies whether or not DAG objects are displayed in their DAG hierarchy. Warning: using this flag without some other form of sensible filtering will lead to a very confusing outliner.
        iha: (create, edit, query) - Sets whether or not the outliner ignores the 'hidden in outliner' flag on nodes.
        ioc: (create, edit, query) - Sets whether or not the outliner ignores the 'use outliner color' flag on nodes.
        ics: (query) - This flag allows you to query if one or more of the children of the specified item is selected in the outliner. The item should be specified using a unique DAG path. Note that if the specified item appears multiple times in the outliner, the result will be true if one or more children of any occurrence of the specified item in the outliner is/are selected.
        isSet: (query) - Returns true if the item present at the given row is a set.
        ism: (query) - Returns true if the item present at the given row is a set member.
        isu: (query) - Returns true if the item present at the given row is a UFE item.
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        ln: (edit, query) - Controls whether long or short attribute names will be used in the interface.  Note that this flag is ignored if the -niceNames flag is set.  Default is short names. Queried, returns a boolean.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        mmt: (create, edit, query) - Sets whether or not we replace the motion trail in the outliner with the object it is trailing.
        mst: (create, edit, query) - This flag is the name of an outliner that this outliner will share the objects and state from. When an outliner is shared, all of its state information comes from, and is applied to, the primary outliner.
        nn: (edit, query) - Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.
        obj: (query) - This flag is used together with the parentObject flag to get the name of the parent object for the specified object.
        obc: (create, edit, query) - If true then when a node with Time Editor clips is displayed, attributes will be displayed according to the clip(s) it belongs to. eg:  Clip1 Attr1 Attr2 Clip2 Attr1  If it is false then the outliner will be organized primarily by attributes. eg:  Attr1 Clip1 Clip2 Attr2 Clip1
        obl: (create, edit, query) - If true then when a node with animation layer is displayed, attributes will be displayed according to the layer(s) it belongs to. eg:  Layer1 Attr1 Attr2 Layer2 Attr1  If it is false then the outliner will be organized primarily by attributes. eg:  Attr1 Layer1 Layer2 Attr2 Layer1
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        po: (query) - 
        pin: (create, edit, query) - Pins the named plug, so it always appears in the outliner, irrespective of the incoming selection connection. In query mode, returns a list of the pinned plugs.
        rfs: (edit) - Causes the outliner to refresh itself.
        rcs: (edit) - Removes selected members of a set from their current set. Current set is the set to which item at the given row belongs to. If no selected items, the item at the given row is removed from its current set.
        rni: (edit) - Renames the item at the given row index in the outliner.
        rsi: (edit) - Rename the first selected item in the outliner.
        rfa: (query) - This is a query only flag which returns true if the render setup filter is Active, i.e one of the four render filters (Inside Selected, Outside Selected, Inside All Layers, Outside All Layers) is applied on the outliner currently, false otherwise.
        rfi: (create, edit, query) - Sets the Render Setup Filter to the index passed. This only works if the filter is visible in outliner and its selection is not locked. Valid indices are:  0 - Scene 2 - Inside Selected 3 - Outside Selected 4 - Inside All Layers 5 - Outside All Layers  Default: Scene  0 In query mode returns current index of the filter.
        rfv: (create, edit, query) - Show/Hide the Render Setup Filter in outliner. In query mode returns whether the Render Setup Filter is visible or not.
        sec: (create, edit, query) - A command to be executed when an item is selected. Only valid Mel commands will be saved when the outlinerEditor will be persisted in a scene or in a JSON layout file. Python commands are never saved.
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        sod: (edit) - Specify how objects are sorted in selection list. Current recognised values are "chronological" for sorting in selection order and "display" to sort objects in the same order that the outliner does.
        sf: (create, edit, query) - Specifies the name of a filter which is used to filter which (if any) sets to display.
        sif: (create, edit, query) - This flag specifies whether or not the filter should be ignored for expanding sets to show set members (default is true).
        aco: (create, edit, query) - This flag modifies the showConnected flag.  If showConnected is set to true then this flag will cause display of only those attributes that are connected to an animCurve. If showConnected is set to false then this flag does nothing.
        saw: (create, edit, query) - If true then when a node with animation layer is displayed, the weight of the layer will be displayed if it is keyed.
        a: (create, edit, query) - This flags specifies whether assets should be shown in the outliner.
        sam: (create, edit, query) - Specifies whether to show assigned materials under shapes.
        av: (create, edit, query) - This flag specifies whether attribute values or attribute names should be displayed. Note: currently only string attributes can have their values displayed.
        atr: (create, edit, query) - Specifies whether to show attributes or not.
        cmp: (create, edit, query) - This flag specifies whether or not compound attributes should be displayed, or just the leaf attributes. Note: if showConnected is true, and the compound attribute is connected, it will still be displayed.
        con: (create, edit, query) - This flag modifies the showAttributes flag.  If showAttributes is set to true then this flag will cause display of only those attributes that are connected in the dependency graph. If showAttributes is set to false then this flag does nothing.
        sco: (create, edit, query) - This flags specifies whether nodes belonging to containers should be show under the container node only. Otherwise, it will show up under the world as well.
        scc: (create, edit, query) - This flags specifies whether the contents of the container should be shown under the container node in the outliner.
        dag: (create, edit, query) - This flag specifies whether all dependency graph objects will be displayed, or just DAG objects.
        laf: (create, edit, query) - This flag specifies whether or not leaf attributes should be displayed, or just the compound attributes. Note: if showConnected is true, and the leaf attribute is connected, it will still be displayed.
        smi: (create, edit, query) - This flag specifies whether mute information will be displayed
        sn: (create, edit, query) - This flag specifies whether all objects will have their namespace displayed, if namespace different than root.
        num: (create, edit, query) - This flag specifies whether or not all attributes should be displayed, or just numeric attributes. Note: if showConnected is true, and the attribute is connected, it will still be displayed.
        spa: (create, edit, query) - This flags specifies whether nodes belonging to containers/assets should show their containers/assets as well in its outliner.
        spi: (create, edit, query) - Sets whether pin icons are shown for unpinned plugs.
        spc: (create, edit, query) - This flags enables attributes that are published to be displayed in italics. Otherwise, only attributes connected as a destination are shown in italics.
        rm: (create, edit, query) - Specifies whether to show reference node members under the reference node in the outliner.
        rn: (create, edit, query) - Specifies whether to show reference nodes or not.
        sc: (create, edit) - If true then the selected items are expanded in the outliner.
        ssm: (create, edit, query) - If true then when a set is expanded, the set members will be displayed. If false, then only other sets will be displayed.
        shp: (create, edit, query) - Specifies whether to show shapes or not.
        tno: (create, edit, query) - This flag modifies the showConnected flag. If showConnected is set to true then this flag will cause display of only those attributes that are connected to a texture node. If showConnected is set to false then this flag does nothing.
        ste: (create, edit, query) - If true, all nodes related to the Time Editor will be shown as a hierarchy.
        uv: (create, edit, query) - This flag specifies whether or not all attributes should be displayed, or just uv attributes. Note: currently the only attribute which will be displayed is Shape.uvSet.uvSetName.
        sui: (create, edit, query) - Specifies whether to show Ufe (non-Maya) items.
        su: (create, edit, query) - This flag (in combination with -expandConnections) specifies whether or not connection expansion should show unitless animCurves.
        suc: (create, edit, query) - Specifies exactly which attributes are displayed when showAttributes and expandConnections are both true. If true, the dependency graph is searched upstream for all curves that drive the selected plugs (showing multiple curves for example in a typical driven key setup, where first the driven key curve is encountered, followed by the actual animation curve that drives the source object). If false, only the first curves encountered will be shown. Note that, even if false, multiple curves can be shown if e.g. a blendWeighted node is being used to combine multiple curves.
        so: (create, edit, query) - Specify how objects are to be sorted.  Current recognised values are "none" for no sorting and "dagName" to sort DAG objects by name. Notes: a) non-DAG objects are always sorted by nodeType and name. b) when sortOrder is set to "dagName", objects cannot be reordered using drag-and-drop, they can however be reparented.
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        tf: (create, edit, query) - This flag specifies how the selectionConnection is populated when attribute filters are enabled.  If this flag is set to true, then all the attributes that pass the filter will be placed on the selectionConnection.  By default this flag is false.
        uf: (edit, query) - Specifies what UFE filter attributes should be used for display. This flag must used together with the ufeFilterValue flag to get/set the value of the UFE filter. The first string is the UFE run-time name and the second is the child filter name.
        ufv: (edit, query) - The value of the UFE filter specified with flag ufeFilter. This flag must used together with the ufeFilter flag.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        unp: (create, edit) - Unpins the named plug.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def outlinerPanel(*args, ctl: bool = ..., cp: str = ..., cs: bool = ..., dt: Optional[Union[str, bool]] = ..., div: Optional[Union[int, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., es: bool = ..., ex: bool = ..., init: bool = ..., iu: bool = ..., l: Optional[Union[str, bool]] = ..., mrl: bool = ..., mbv: bool = ..., ni: bool = ..., oe: bool = ..., p: Optional[Union[str, bool]] = ..., pmp: Optional[Union[str, bool]] = ..., rp: str = ..., to: bool = ..., toc: Optional[Union[str, bool]] = ..., tor: bool = ..., up: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates, edit and queries outliner panels which contain only
    an outliner editor.

    Args:
        ctl: (query) - Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return "" if no control is present.
        cp: (edit) - Makes this panel a copy of the specified panel.  Both panels must be of the same type.
        cs: (edit) - Command string used to create a panel
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        div: (edit, query) - This flag returns the orientation of the divider bar in the outliner.  0 : horizontal 1 : vertical
        dtg: (create, edit, query) - Attaches a tag to the Maya panel.
        es: (edit) - Command string used to edit a panel
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        init: (create, edit) - Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
        iu: (query) - Returns true if only one instance of this panel type is allowed.
        l: (edit, query) - Specifies the user readable label for the panel.
        mrl: (create, edit, query) - Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.
        mbv: (create, edit, query) - Controls whether the menu bar for the panel is displayed.
        ni: (edit, query) - (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.
        oe: (query) - This flag returns the name of the outliner editor contained by the panel.
        p: (create) - Specifies the parent layout for this panel.
        pmp: (edit, query) - Specifies the procedure called for building the panel's popup menu(s). The default value is "buildPanelPopupMenu".  The procedure should take one string argument which is the panel's name.
        rp: (edit) - Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
        to: (edit, query) - Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.
        toc: (create) - Will create this panel as a torn of copy of the specified source panel.
        tor: (create, edit) - Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOff flag which should only be used to tear off the panel.
        up: (edit) - Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def outputWindow(*args, s: bool = ..., query: bool = ...) -> Any:
    r"""
    This command open the output window, if it exists.
    This window shows various diagnostic, status and progress updates.
    This command does nothing on MacOS and Linux as they don't have an output window.

    Args:
        s: (create, query) - Show or hide the output window.
    """
    ...


def overrideModifier(*args, cl: bool = ..., p: Optional[Union[str, bool]] = ..., r: Optional[Union[str, bool]] = ...) -> Any:
    r"""
    This command allows you to assign modifier key behaviour to other
    parts of the system.  For example you can use a hotkey
    or input device instead of a modifer key to perform the same action.
    
    Note that the original modifier key behaviour is not altered in anyway.
    For example, if you've assigned "Ctrl" key behaviour to the "c" key
    then the "Ctrl" key will still work as you expect, all you've done is
    allowed yourself to use the "c" key as an alternative to the "Ctrl" key.

    Args:
        cl: (create) - Don't force any modifier keys.
        p: (create, multiuse) - Force the following modifier to be pressed. Valid values are "Alt", "Ctrl", "Shift".
        r: (create, multiuse) - Force the following modifier to be released. Valid values are "Alt", "Ctrl", "Shift".
    """
    ...


def palettePort(*args, at: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., ced: bool = ..., ce: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dim: Optional[Union[Tuple[int, int], bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hsv: Optional[Union[Tuple[int, int, float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., r: bool = ..., rgb: Optional[Union[Tuple[int, float, float, float], bool]] = ..., scc: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., td: bool = ..., t: Optional[Union[int, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates an array of color cells. It could be used to
    to store an retrieve some colors you want to manage during your
    working session.

    Args:
        at: (create, query) - Set the actual number of palette entries. This number must be greater than zero, but not be greater than maximum number of palette entries defined by the dimensions flag.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - This command string will be executed when a color in the palette is changed.
        ced: (create, edit, query) - If true then the user can modify the current index's color.
        ce: (create, edit) - This command string will be executed when a color in the palette is edited.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dim: (create, query) - Set the dimensions of the array.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - If true then the user can change the current color.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hsv: (create, edit, query) - Set a color for a given cell, using HSV format. On query return the color of the current cell.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        r: (create, edit) - Forces a redraw of the array
        rgb: (create, edit, query) - Set a color for a given cell, using RGB format. On query return the color of the current cell.
        scc: (create, edit, query) - Set the current cell in the array to the given index. Returns the current cell when queried.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        td: (create) - If this flag is true, it indicates that first entry should appear in top left as opposed to the bottom left.
        t: (create, edit, query) - Set a given cell to be the transparent color.  A cell value of -1 indicates that no cell is transparent.  On query returns the current transparent cell.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def panel(*args, ctl: bool = ..., cp: str = ..., cs: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., es: bool = ..., ex: bool = ..., init: bool = ..., iu: bool = ..., l: Optional[Union[str, bool]] = ..., mrl: bool = ..., mbv: bool = ..., ni: bool = ..., p: Optional[Union[str, bool]] = ..., pmp: Optional[Union[str, bool]] = ..., rp: str = ..., to: bool = ..., toc: Optional[Union[str, bool]] = ..., tor: bool = ..., up: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command allows editing or querying properties of any panels. Not
    all of the common properites of panels can be used with this command.
    Flags such as -tearOff and -replacePanel require that you use the
    explicit panel command. The command 'getPanel -typeOf panelName' will
    return the explicit type of a panel.

    Args:
        ctl: (query) - Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return "" if no control is present.
        cp: (edit) - Makes this panel a copy of the specified panel.  Both panels must be of the same type.
        cs: (edit) - Command string used to create a panel
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the Maya panel.
        es: (edit) - Command string used to edit a panel
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        init: (create, edit) - Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
        iu: (query) - Returns true if only one instance of this panel type is allowed.
        l: (edit, query) - Specifies the user readable label for the panel.
        mrl: (create, edit, query) - Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.
        mbv: (create, edit, query) - Controls whether the menu bar for the panel is displayed.
        ni: (edit, query) - (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.
        p: (create) - Specifies the parent layout for this panel.
        pmp: (edit, query) - Specifies the procedure called for building the panel's popup menu(s). The default value is "buildPanelPopupMenu".  The procedure should take one string argument which is the panel's name.
        rp: (edit) - Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
        to: (edit, query) - Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.
        toc: (create) - Will create this panel as a torn of copy of the specified source panel.
        tor: (create, edit) - Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOff flag which should only be used to tear off the panel.
        up: (edit) - Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def paneLayout(*args, aft: Optional[Union[int, bool]] = ..., ap: Optional[Union[str, bool]] = ..., api: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., cn: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., nvp: bool = ..., p1: bool = ..., p2: bool = ..., p3: bool = ..., p4: bool = ..., ps: Optional[Union[Tuple[int, int, int], bool]] = ..., pup: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., smc: Optional[Union[str, bool]] = ..., st: Optional[Union[int, bool]] = ..., sp: Optional[Union[Tuple[str, int], bool]] = ..., shp: Optional[Union[int, bool]] = ..., swp: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a pane layout.  A pane layout may have any
    number of children but at any one time only certain children may be
    visible, as determined by the current layout configuration.  For
    example a horizontally split pane shows only two children, one on top
    of the other and a visible separator between the two.  The separator
    may be moved to vary the size of each pane.  Various other pane
    configurations are available and all display a moveable separator
    that define the size of each pane in the layout.

    Args:
        aft: (create, edit, query) - The thickness of the frame drawn around the active frame. Specify an integer value greater than or equal to 0.
        ap: (create, edit, query) - The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePane    or -api/activePaneIndex will automatically deactivate the previously active pane.  The argument is the full or short name of the child control.
        api: (create, edit, query) - The active pane index.  The active pane has a colored border surrounding it.  Only one pane may be active at any one time.  Using either of the flags -ap/activePane or -api/activePaneIndex will automatically deactivate the previously active pane.  The argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  If any other index is specified then the current active pane is deactivated.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cn: (create, edit, query) - Set the layout configuration for the panes.  Valid values are: "single", "horizontal2", "vertical2", "horizontal3", "vertical3", "top3", "left3", "bottom3", "right3", "horizontal4", "vertical4", "top4", "left4", "bottom4", "right4", "quad"
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        nvp: (query) - Return the number of panes visible for the present configuration.
        p1: (query) - 
        p2: (query) - 
        p3: (query) - 
        p4: (query) - Return the name of the control in the respective pane.
        ps: (create, edit, multiuse, query) - The size of a pane in the current pane layout configuration.  The first argument specifies the pane index and is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.  The width and height of the pane are specified by the last two arguments.  Both are integer values and they indicate the percentage of the total pane layout size rather that the number of pixels.
        pup: (query) - Return the name of the child occupying the pane that the pointer is currently over.  An empty string is returned if the pointer is not over a pane.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        smc: (create, edit) - This command executed when the pane separators are moved.
        st: (create, edit, query) - The thickness of the separators between the panes. Specify an integer value greater than 0. This flag has no effect on Windows systems.
        sp: (create, edit, multiuse) - This flag allows you to put a child of this layout in a particular pane.  The first argument is the full or short name of the control.  The second argument is an integer value ranging from 1 to 4.  Panes for any particular configuration are numbered clockwise beginning with the pane in the top left corner of the layout.
        shp: (create, edit) - Set a pane to have a static height, i.e. its height will not change when the layout is dynamically resized. Only one pane can be set to have a static height at one time. This state will be retained even if another child is switched into the pane. Specify 0 to set a pane back to the default state. Any state will be lost if the pane configuration is changed.
        swp: (create, edit) - Set a pane to have a static width, i.e. its width will not change when the layout is dynamically resized. Only one pane can be set to have a static width at one time. This state will be retained even if another child is switched into the pane. Specify 0 to set a pane back to the default state. Any state will be lost if the pane configuration is changed.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def panelConfiguration(*args, ap: Optional[Union[Tuple[bool, str, str, str, str], bool]] = ..., cfs: Optional[Union[str, bool]] = ..., cs: bool = ..., di: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., es: bool = ..., ex: bool = ..., i: Optional[Union[str, bool]] = ..., isFixedState: bool = ..., l: Optional[Union[str, bool]] = ..., ls: bool = ..., np: bool = ..., rap: bool = ..., rlp: bool = ..., rcs: Tuple[int, str] = ..., res: Tuple[int, str] = ..., rfs: Tuple[int, bool] = ..., rl: Tuple[int, str] = ..., rp: Optional[Union[Tuple[int, bool, str, str, str, str], bool]] = ..., rts: Tuple[int, str] = ..., sc: bool = ..., ts: bool = ..., ut: Optional[Union[str, bool]] = ..., uc: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a panel configuration object. Typically you would
    not call this method command directly. Instead use the Panel Editor.
    
    Once a panel configuration is created you can make it appear in the
    main Maya window by selecting it from any panel's "Panels->Saved Layouts"
    menu.

    Args:
        ap: (create, edit, multiuse) - Adds the specified panel to the configuration.  Arguments are: isFixed, label string, type string, create string, edit string.
        cfs: (create, edit, query) - Specifies the string that arranges the panels.
        cs: (query) - Returns an string array of the panel creation strings.
        di: (create, query) - The default image for this configuration. Once the default image is set it may not be changed. If an image is set with the -i/image flag then it's value will take precedence.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        es: (query) - Returns an string array of the panel edit strings.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        i: (create, edit, query) - The user specified image for this configuration. Use this flag to override the default image.
        isFixedState: (query) - Returns an integer array of whether the panels have fixed states or not.
        l: (create, edit, query) - Configuration label.
        ls: (query) - Returns an string array of the panel labels.
        np: (query) - Returns the number of panels in the configuration.
        rap: (edit) - Removes the last panel in the config.
        rlp: (edit) - Removes the last panel in the config.
        rcs: (edit) - Replaces the specified create string.  The index is 1 based.
        res: (edit) - Replaces the specified edit string.  The index is 1 based.
        rfs: (edit) - Replaces the specified fixed state value (true|false).  The index is 1 based.
        rl: (edit) - Replaces the specified label.  The index is 1 based.
        rp: (create, edit) - Replaces the specified panel in the configuration.  Arguments are: index, isFixed, label string, type string, create string, edit string. The index is 1 based.
        rts: (edit) - Replaces the specified type string.  The index is 1 based.
        sc: (create, edit, query) - Specifies whether the configuration is associated with the scene. Scene configurations are created when the scene is opened and deleted when the scene is closed.
        ts: (query) - Returns an string array of the panel types.
        ut: (create) - Forces the command to use a command template other than the current one.
        uc: (create, edit, query) - Returns true if the configuration was created by the user. If it is user created, the configuration will show up in the RMB menu in the toolbox's saved layouts.
    """
    ...


def panelHistory(*args, b: bool = ..., cl: bool = ..., dt: Optional[Union[str, bool]] = ..., ex: bool = ..., f: bool = ..., hd: Optional[Union[int, bool]] = ..., ie: bool = ..., s: bool = ..., tp: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., w: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a panel history object.  The object is targeted on a
    particular paneLayout and thereafter notes changes in panel configurations
    within that paneLayout, building up a history list.  The list can be stepped
    through backwards or forwards.

    Args:
        b: (edit) - Go back one level on the history list.
        cl: (edit) - Clear the history stack
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        f: (edit) - Go forward one level on the history list.
        hd: (edit, query) - Specifies how many levels of history are maintained.
        ie: (query) - Returns true if there is currently no panel history.
        s: (edit) - Specifies whether to suspend or resume updates to the panel history. Useful for chunking a number of changes into one history event.
        tp: (create, query) - Specifies which paneLayout the history will be maintained for.
        ut: (create) - Forces the command to use a command template other than the current one.
        w: (edit, query) - Specifies whether the history will wrap at the end and beginning.  This value is true by default.
    """
    ...


def picture(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., tl: bool = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a static image.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i: (create, edit, query) - Sets the image given the .xpm file name.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        tl: (create, edit, query) - If true, the picture is tiled to fill the picture area. False by default. (Windows only flag)
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def popupMenu(*args, aob: bool = ..., alt: bool = ..., b: Optional[Union[int, bool]] = ..., ctl: bool = ..., dt: Optional[Union[str, bool]] = ..., dai: bool = ..., ex: bool = ..., ia: bool = ..., mm: bool = ..., ni: bool = ..., p: Optional[Union[str, bool]] = ..., pmc: Optional[Union[str, bool]] = ..., pmo: bool = ..., sh: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a popup menu and attaches it to the current
    control if no parent is specified.  The popup menu is posted with the
    right mouse button by default.
    
    Popup menus can be added to any kind of control, however,
    on some widgets, only the standard menu button (3rd mouse button)
    can be used to trigger popup menus. This is to meet generally
    accepted UI guidelines that assign the 3rd mouse button and only
    this one to popup menus, and also to prevent unexpected behavior
    of controls like text fields, that expect 1st and 2nd button to be
    reserved for contextual operations like text or item selection...

    Args:
        aob: (create, query) - Indicate whether the menu will be able to support option box menu items.  An error results if an option box item is added to a menu that doesn't allow them.  This flag may be queried and must be specified when the popup menu is created.  The default value is false.
        alt: (create, edit, query) - Specify this flag if the Alt modifier must be pressed when posting the popup menu.
        b: (create, edit, query) - Indicate which button posts the popup menu.  Valid values range from 1 to 3 where 1 is the left most button on the mouse.
        ctl: (create, edit, query) - Specify this flag if the Cntl modifier must be pressed when posting the popup menu.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dai: (edit) - Delete all the items in this menu.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        ia: (query) - Return string array of the menu item names.
        mm: (create, edit, query) - Set the marking menu state of this popup menu.
        ni: (query) - Return number of items in the menu.
        p: (create) - Specify the control that the popup menu will appear in.
        pmc: (create, edit) - Specify a script to be executed when the popup menu is about to be shown.
        pmo: (create, edit, query) - Indicate the -pmc/postMenuCommand should only be invoked once.  Default value is false, ie. the -pmc/postMenuCommand is invoked every time the popup menu is shown.
        sh: (create, edit, query) - Specify this flag if the Shift modifier must be pressed when posting the popup menu.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def progressBar(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bp: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ep: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., ic: bool = ..., ii: bool = ..., imp: bool = ..., io: bool = ..., m: bool = ..., max: Optional[Union[int, bool]] = ..., min: Optional[Union[int, bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., pr: Optional[Union[int, bool]] = ..., st: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: int = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Creates a progress bar control that graphically fills in as its
    progress value increases.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bp: (create, edit) - Only valid for the main progress bar Shows the main progress bar (normally in the Help Line). This is normally issued through MEL when a length computation is about to occur.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ep: (edit) - Only valid for the main progress bar Hides the progress bar. No other flags can be used at the same time. This is normally issued through MEL in response to the -ic/isCancelled flag being set or if the progress value reaches its maximum.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        ic: (query) - Returns true if the user has tried to cancel the operation. Returns false otherwise.
        ii: (create, edit, query) - Only valid for the main progress bar  Returns true if the isCancelled flag should respond to attempts to cancel the operation. Setting this to true will add a note in the help line display message to the user indicating that they can cancel the operation.
        imp: (create, edit, query) - Determines whether this progressBar is used to show the progress of all basic operations such as Open/Save file. The main progressBar behaves very differently, in that it only shows itself when there is an ongoing basic operation. Defaults to false, and only one progress bar will be recognized as the "main" one.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - The maximum or "ending" value of the progress indicator. If the progress value is greater than the -max/maxValue, the progress value will be set to the maximum. Default value is 100.
        min: (create, edit, query) - The minimum or "starting" value of the progress indicator. If the progress value is less than the -min/minValue, the progress value will be set to the minimum. Default value is 0.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        pr: (create, edit, query) - The amount of progress currently shown on the control. The value will always be between min and max. Default is equal to the minimum when the control is created.
        st: (create, edit, query) - Only valid for the main progress bar Sets the contents of the helpLine control when the progressBar is showing. Use this instead of setting the helpLine directly because this will force a graphical refresh before returning.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (edit) - Increments the -pr/progress value by the amount specified.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def progressWindow(*args, ep: bool = ..., ic: bool = ..., ii: bool = ..., max: Optional[Union[int, bool]] = ..., min: Optional[Union[int, bool]] = ..., pr: Optional[Union[int, bool]] = ..., st: Optional[Union[str, bool]] = ..., s: int = ..., t: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    The progressWindow command creates a window
    containing a status message, a graphical progress gauge,
    and optionally a "Hit ESC to Cancel" label for interruptable operations.
    Only one progress window is allowed on screen at a time. While the window
    is visible, the busy cursor is shown.

    Args:
        ep: (create) - Terminates the progress window. No other flags can be used at the same time. This is normally issued through MEL in response to the -ic/isCancelled flag being set or if the progress value reaches its maximum.
        ic: (query) - Returns true if the user has tried to cancel the operation. Returns false otherwise.
        ii: (create, edit, query) - Returns true if the progress window should respond to attempts to cancel the operation. The cancel button is disabled if this is set to true.
        max: (create, edit, query) - The maximum or "ending" value of the progress indicator. If the progress value is greater than the -max/maxValue, the progress value will be set to the maximum. Default value is 100.
        min: (create, edit, query) - The minimum or "starting" value of the progress indicator. If the progress value is less than the -min/minValue, the progress value will be set to the minimum. Default value is 0.
        pr: (create, edit, query) - The amount of progress currently shown on the control. The value will always be between min and max. Default is equal to the minimum when the control is created.
        st: (create, edit, query) - The status text appearing above the progress gauge.
        s: (edit) - Increments the -pr/progress value by the amount specified.
        t: (create, edit, query) - The window title.
    """
    ...


def promptDialog(*args, bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., b: Optional[Union[str, bool]] = ..., cb: Optional[Union[str, bool]] = ..., db: Optional[Union[str, bool]] = ..., ds: Optional[Union[str, bool]] = ..., m: Optional[Union[str, bool]] = ..., ma: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., sf: bool = ..., st: Optional[Union[str, bool]] = ..., tx: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., query: bool = ...) -> Any:
    r"""
    The promptDialog command creates a modal dialog with a message to the
    user, a text field in which the user may enter a response, and a
    variable number of buttons to dismiss the dialog.  The dialog is
    dismissed when the user presses any button or chooses the
    close item from the window menu.  In the case where a button is
    pressed then the name of the button selected is returned.  If the
    dialog is dismissed via the close item then the string returned is
    specified by the -ds/dismissString flag.
    
    The default behaviour when no arguments are specified is to create an
    empty single button dialog.
    
    To obtain the text entered by the user simply query
    the -tx/text flag.

    Args:
        bgc: (create) - The background color of the dialog. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. (Windows only flag)
        b: (create, multiuse) - Create a button with the given string as it's text.
        cb: (create) - The cancel button is activated by pressing the escape key. Note that this flag does not create a button, it simply indicates which button created via the -b/button flag shall respond to the escape key.
        db: (create) - The default button is activated by pressing the enter key. Note that this flag does not create a button, it simply indicates which button created via the -b/button flag shall respond to the enter key.
        ds: (create) - The string returned when the user selects the 'Close' item from the Window Manager menu.  If this flag is not set then the string "dismiss" is returned.
        m: (create) - The message text appearing in the dialog.
        ma: (create) - Align the message left, center, or right.
        p: (create) - Specify the parent window for the dialog.  The dialog will be centered on this window and raise and lower with it's parent. By default, the dialog is not parented to a particular window and is simply centered on the screen.
        sf: (create) - By default a single line text field is used in the dialog. Specify true for a multi-line scroll field.
        st: (create) - Specify the type of input expected in the input field. Vaid input types are "integer" "float" "text". If this flag is not specified, we assume the input type is "text".
        tx: (create, query) - The field text.
        t: (create) - The dialog title.
    """
    ...


def radioButton(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cl: Optional[Union[str, bool]] = ..., da: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., ofc: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rs: bool = ..., sl: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a radio button that is added to the most
    recently created radio collection if the -cl/collection flag
    is not used.

    Args:
        al: (create, edit, query) - This flag is obsolete and should no longer be used. The radio button label will always be left-aligned.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the radio button's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the radio button from inside the callback, or use onCommand and offCommand as separate callbacks.
        cl: (create) - To explicitly add a radio button to a collection of radio buttons specify the name of the radio collection.
        da: (create, edit, query) - Internal data associated with the radio button.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the radio button.  By default, this flag is set to true and the radio button value may be changed by clicking on it.  If false then the radio button is 'read only' and can not be clicked on. The value of the radio button can always be changed with the -sl/select flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The label text.  The default label is the name of the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ofc: (create, edit) - Command executed when the radio button is turned off.
        onc: (create, edit) - Command executed when the radio button is turned on.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rs: (create, edit, query) - If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.
        sl: (create, edit, query) - Select the radio button.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def radioButtonGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., an1: Optional[Union[str, bool]] = ..., an2: Optional[Union[str, bool]] = ..., an3: Optional[Union[str, bool]] = ..., an4: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cc1: Optional[Union[str, bool]] = ..., cc2: Optional[Union[str, bool]] = ..., cc3: Optional[Union[str, bool]] = ..., cc4: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., da1: Optional[Union[int, bool]] = ..., da2: Optional[Union[int, bool]] = ..., da3: Optional[Union[int, bool]] = ..., da4: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., en1: bool = ..., en2: bool = ..., en3: bool = ..., en4: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., l1: Optional[Union[str, bool]] = ..., l2: Optional[Union[str, bool]] = ..., l3: Optional[Union[str, bool]] = ..., l4: Optional[Union[str, bool]] = ..., la: Optional[Union[str, bool]] = ..., la2: Optional[Union[Tuple[str, str], bool]] = ..., la3: Optional[Union[Tuple[str, str, str], bool]] = ..., la4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., nrb: Optional[Union[int, bool]] = ..., ofc: Optional[Union[str, bool]] = ..., of1: Optional[Union[str, bool]] = ..., of2: Optional[Union[str, bool]] = ..., of3: Optional[Union[str, bool]] = ..., of4: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., on1: Optional[Union[str, bool]] = ..., on2: Optional[Union[str, bool]] = ..., on3: Optional[Union[str, bool]] = ..., on4: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sl: Optional[Union[int, bool]] = ..., scl: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vr: bool = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates from one to four radio buttons in a single row.
    By default the radio buttons will share a single collection, but they
    can also share the collection of another radio button group.  The buttons
    can also have an optional text label.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        an1: (create, edit, query) - specifies the tooptip of the first radiobutton
        an2: (create, edit, query) - specifies the tooptip of the second radiobutton
        an3: (create, edit, query) - specifies the tooptip of the third radiobutton
        an4: (create, edit, query) - specifies the tooptip of the fourth radiobutton
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the group changes state. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of a radio button from inside the callback, or use onCommand and offCommand as separate callbacks.
        cc1: (create, edit) - 
        cc2: (create, edit) - 
        cc3: (create, edit) - 
        cc4: (create, edit) - Specify a changed state command for each respective radio button.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        da1: (create, edit, query) - 
        da2: (create, edit, query) - 
        da3: (create, edit, query) - 
        da4: (create, edit, query) - Internal data associated with each radio button.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the group.  By default, this flag is set to true and the radio button values may be changed by clicking on them.  If false then the radio buttons are 'read only' and can not be clicked on. The value of the radio button can always be changed with the sl/select flags regardless of the state of the ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        en1: (create, edit, query) - 
        en2: (create, edit, query) - 
        en3: (create, edit, query) - 
        en4: (create, edit, query) - Enable state of the individual radio buttons.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - When present on creation an optional text label will be built with the group.  The string specifies the label text.
        l1: (create, edit, query) - 
        l2: (create, edit, query) - 
        l3: (create, edit, query) - 
        l4: (create, edit, query) - Specify label strings for the respective radio buttons in the group.
        la: (create, edit, query) - when present on creation an optional text label will be built with the group . The string specifies the label tooltip
        la2: (create, edit, query) - 
        la3: (create, edit, query) - 
        la4: (create, edit, query) - Specify multiple labels in a single flag.  These flags are ignored if the number of radio buttons doesn't match.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        nrb: (create) - Number of radio buttons in the group (1 - 4).
        ofc: (create, edit) - Command executed when any radio button turns off.
        of1: (create, edit) - 
        of2: (create, edit) - 
        of3: (create, edit) - 
        of4: (create, edit) - Off command for each respective radio button.
        onc: (create, edit) - Command executed when any radio button turns on.
        on1: (create, edit) - 
        on2: (create, edit) - 
        on3: (create, edit) - 
        on4: (create, edit) - On command for each respective radio button.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sl: (create, edit, query) - Selected radio button.  The argument is a 1 based integer.
        scl: (create) - Specify the radioButtonGrp that this radio group is to be associated with.  By default the radio group will be a separate collection.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vr: (create, query) - Whether the orientation of the radio buttons in this group are horizontal (default) or vertical.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def radioCollection(*args, cia: bool = ..., dt: Optional[Union[str, bool]] = ..., ex: bool = ..., gl: bool = ..., nci: bool = ..., p: Optional[Union[str, bool]] = ..., sl: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a radio button collection. Collections are
    parented to the current default layout if no parent is specified with
    the -p/parent flag.  As children of the layout they will be
    deleted when the layout is deleted. Collections may also span more
    than one window if the -gl/global flag is used. In this case
    the collection has no parent and must be explicitly deleted with the
    deleteUI command when it is no longer wanted.

    Args:
        cia: (query) - Return a string list giving the long names of all the items in this collection.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        gl: (create, query) - Set the collection to have no parent layout.  Global collections must be explicitly deleted.
        nci: (query) - Return the number of items in this collection.
        p: (create) - The parent of the collection.  The collection will be deleted along with the parent.
        sl: (create, edit, query) - Select the specified collection item.  If queried will return the name of the currently selected collection item.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def radioMenuItemCollection(*args, dt: Optional[Union[str, bool]] = ..., ex: bool = ..., gl: bool = ..., p: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a radioMenuItemCollection.  Attach radio menu
    items to radio menu item collection objects to get radio button
    behaviour.  Radio menu item collections will be parented to the
    current menu if no parent is specified with the -p/parent
    flag. As children of the menu they will be deleted when the menu is
    deleted. Collections may also span more than one menu if
    the -g/global flag is used. In this case the collection has no
    parent menu and must be explicitly deleted with the deleteUI
    command when it is no longer wanted.

    Args:
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        gl: (create, query) - Set the collection to have no parent menu.  Global collections must be explicitly deleted.
        p: (create) - The parent of the collection.  The collection will be deleted along with the parent.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def rangeControl(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., max: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., min: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., wh: Optional[Union[Tuple[int, int], bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control used for displaying and modifying the current playback range.
    Note: only one main rangeControl may exist. Any additional rangeControls
    that a user creates are driven by the main range control widget.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - script to be executed when the range changes
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Controls the max range displayable in the control
        min: (create, edit, query) - Controls the max range displayable in the control
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        wh: (create, edit) - Controls the dimensions of the control
    """
    ...


def refreshEditorTemplates(*args) -> Any:
    r"""
    This command refreshes all cached attribute editor templates,
    including those copied from the standard AE. These are the templates
    constructed internally on a per node type basis. This is useful
    if attribute elements have changed and the templates need to
    be re-evaluated accordingly.

    Args:
    """
    ...


def rowColumnLayout(*args, adj: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., co: Optional[Union[Tuple[int, str, int], bool]] = ..., cs: Optional[Union[Tuple[int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., nc: Optional[Union[int, bool]] = ..., npm: bool = ..., nr: Optional[Union[int, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., ral: Optional[Union[Tuple[int, str], bool]] = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., rh: Optional[Union[Tuple[int, int], bool]] = ..., ro: Optional[Union[Tuple[int, str, int], bool]] = ..., rs: Optional[Union[Tuple[int, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a rowColumn layout. A rowColumn layout positions
    children in either a row or column format. A column layout, specified
    with the -nc/numberOfColumns flag, allows you set text
    alignment, attachments and offsets for each column in the layout.
    Every member of a column will have the same alignment, attachment and
    offsets.  Likewise the row format, specified by
    the -nr/numberOfRows flag, allows
    setting of these attributes for each row in the layout. Every member
    of a row will have the same attributes. The layout must be either a
    row or column format. This layout does not support both, or the
    specification of attributes on an individual child basis.
    
    Some flags only make sense for one of either the row format or the
    column format.  For example the -rh/rowHeight flag can only be
    specified in row format. In column format the row height is
    determined by the tallest child in the row, plus offsets.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cal: (create, edit, multiuse) - Alignment for text and pixmaps in the specified column.  Values are: "left", "right" and "center".  Only valid for column format, ie. number of columns specified with -nc/numberOfColumns flag.
        cat: (create, edit, multiuse) - The attachments and offsets for the children in the specified column.  The first argument is the 1-based column index.  The second argument is the attachment, valid values are "left", "right" and "both".  The third argument must be greater than 0 and specifies the offset.
        co: (create, edit, multiuse) - The attachment offset for the specified column.  The first argument is the 1-based column index.  The second argument is the attachment, valid values are "left", "right" and "both".  The third argument must be greater than 0 and specifies the offset.
        cs: (create, edit, multiuse) - The space between columns in pixels.  In column format this flag specifies that the space be to the left of the given column.  In row format it specifies the space between all columns, however a valid column index is still required.  The first argument is the 1-based column index.  The second argument must be greater than 0 and specifies the spacing.
        cw: (create, edit, multiuse) - Width of a column. This flag is valid only in column format.  The column width must be greater than 0.  The first argument is the 1-based column index.  The second argument must be greater than 0 and specifies the column width.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        nc: (create, query) - Number of columns. This flag is mutually exclusive to the -nr/numRows flag.  Either one or the other can be specified.
        npm: (query) - Return the number of popup menus attached to this control.
        nr: (create, query) - Number of rows. This flag is mutually exclusive to the -nc/numColumns flag. Either one or the other can be specified.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ral: (create, edit, multiuse) - Alignment for text and pixmaps in the specified row. Values are: "left", "right" and "center".  Only valid for row format, ie. number of rows specified with -nr/numberOfRows flag.
        rat: (create, edit, multiuse) - The attachments and offsets for the children in the specified row.  The first argument is the 1-based row index.  The second argument is the attachment, valid values are "top", "bottom" and "both".  The third argument must be greater than 0 and specifies the offset.
        rh: (create, edit, multiuse) - Height of a row. This flag is only valid in row format. The row height must be greater than 0. The first argument is the 1-based row index.  The second argument must be greater than 0 and specifies the row height.
        ro: (create, edit, multiuse) - The attachment offset for the specified row.  The first argument is the 1-based row index.  The second argument is the attachment, valid values are "top", "bottom" and "both".  The third argument must be greater than 0 and specifies the offset.
        rs: (create, edit, multiuse) - The space between rows, in pixels.  In row format this specifies the space above the specified row.  In column format it specifies the space between all rows, however a valid row index is still required.  The first argument is the 1-based row index.  The second argument must be greater than 0 and specifies the spacing.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def rowLayout(*args, adj: Optional[Union[int, bool]] = ..., ad1: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ca: bool = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl1: Optional[Union[str, bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct1: Optional[Union[str, bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co1: Optional[Union[int, bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., nc: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a layout capable of positioning children into
    a single horizontal row.

    Args:
        adj: (create, edit, multiuse) - Specifies which column has an adjustable size that changes with the sizing of the layout.
        ad1: (create) - Specifies that the first column has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly one column.
        ad2: (create) - Specifies which of the two columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly two columns.
        ad3: (create) - Specifies which of the three columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly three columns.
        ad4: (create) - Specifies which of the four columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly four columns.
        ad5: (create) - Specifies which of the five columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly five columns.
        ad6: (create) - Specifies which of the six columns has an adjustable size that changes with the size of the parent layout. Ignored if there isn't exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cal: (create, edit, multiuse) - Text alignment for the specified column. Valid values are "left", "right", and "center"
        cl1: (create) - Text alignment for the first column. Valid values are "left", "right", and "center". Ignored if there isn't exactly one column.
        cl2: (create) - Text alignment for both columns. Valid values are "left", "right", and "center". Ignored if there isn't exactly two columns.
        cl3: (create) - Text alignment for all three columns. Valid values are "left", "right", and "center". Ignored if there isn't exactly three columns.
        cl4: (create) - Text alignment for all four columns. Valid values are "left", "right", and "center". Ignored if there isn't exactly four columns.
        cl5: (create) - Text alignment for all five columns. Valid values are "left", "right", and "center". Ignored if there isn't exactly five columns.
        cl6: (create) - Text alignment for all six columns. Valid values are "left", "right", and "center". Ignored if there isn't exactly six columns.
        cat: (create, edit, multiuse) - Horizontally attach a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the attachment, valid values are "left", "right", and "both".  The third argument is the offset value.
        ct1: (create) - Attachment type for the first column.  Ignored if there isn't exactly one column. Valid values are "left", "right", and "both".
        ct2: (create) - Attachment type for both columns.  Ignored if there isn't exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create) - Attachment type for all three columns.  Ignored if there isn't exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create) - Attachment type for all four columns.  Ignored if there isn't exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create) - Attachment type for all five columns.  Ignored if there isn't exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create) - Attachment type for all six columns.  Ignored if there isn't exactly six columns. Valid values are "left", "right", and "both".
        co1: (create) - Used in conjunction with the -columnAttach1 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for the first column.  The offsets applied are based on the attachments specified with the -columnAttach1 flag. Ignored if there isn't exactly one column.
        co2: (create) - Used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for both columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag. Ignored if there isn't exactly two columns.
        co3: (create) - Used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag. Ignored if there isn't exactly three columns.
        co4: (create) - Used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag. Ignored if there isn't exactly four columns.
        co5: (create) - Used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag. Ignored if there isn't exactly five columns.
        co6: (create) - Used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  Sets the offset for all six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag. Ignored if there isn't exactly six columns.
        cw: (create, edit, multiuse) - Width of a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the width value.
        cw1: (create) - Width for the first column.  Ignored if there isn't exactly one column.
        cw2: (create) - Widths for both columns.  Ignored if there isn't exactly two columns.
        cw3: (create) - Widths for all three columns.  Ignored if there isn't exactly three columns.
        cw4: (create) - Widths for all four columns.  Ignored if there isn't exactly four columns.
        cw5: (create) - Widths for all five columns.  Ignored if there isn't exactly five columns.
        cw6: (create) - Widths for all six columns.  Ignored if there isn't exactly six columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        nc: (create, query) - Number of columns in the row.  The specified number of columns must be a value greater than 0.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Vertically attach a particular column.  The first argument is a 1-based index specifying the column.  The second argument is the attachment, valid values are "top", "bottom", and "both".  The third argument is the offset value.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def runTimeCommand(*args, ak: Optional[Union[str, bool]] = ..., at: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., cat: Optional[Union[str, bool]] = ..., caa: bool = ..., c: Optional[Union[str, bool]] = ..., ca: bool = ..., cl: Optional[Union[str, bool]] = ..., d: bool = ..., dca: bool = ..., delete: bool = ..., ex: bool = ..., url: Optional[Union[str, bool]] = ..., hc: Optional[Union[str, bool]] = ..., i: Optional[Union[str, bool]] = ..., k: Optional[Union[str, bool]] = ..., l: Optional[Union[str, bool]] = ..., la: Optional[Union[str, bool]] = ..., nc: bool = ..., ndc: bool = ..., nuc: bool = ..., p: Optional[Union[str, bool]] = ..., s: bool = ..., she: bool = ..., t: Optional[Union[str, bool]] = ..., uca: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a MEL command given the specified name. Once the command is created
    you can invoke it like any other MEL command.  When the command is invoked
    it will execute the string attached to the command flag.
    
    Note that the resulting command takes no arguments, has no flags and
    may not be queried or edited.
    
    The command name you provide must be unique. The name itself must
    begin with an alphabetic character or underscore followed by
    alphanumeric characters or underscores.
    
    If you create your run time commands in a script which is automatically
    sourced at startup then set the default flag to true.  This
    will prevent the application from attempting to save these commands.

    Args:
        ak: (create, edit, multiuse) - Append one keyword to the keyboard list, which is used by the Search user interface
        at: (create, edit, multiuse) - Append one keyword to the tag list, which is used by the Search user interface
        ann: (create, edit, query) - Description of the command.
        cat: (create, edit, query) - Category for the command.
        caa: (query) - Return all the run time command categories.
        c: (create, edit, query) - Command to be executed when runTimeCommand is invoked.
        ca: (query) - Returns an string array containing the names of all the run time commands.
        cl: (create, edit, query) - In edit or create mode, this flag allows the caller to choose a scripting language for a command passed to the "-command" flag.  If this flag is not specified, then the callback will be assumed to be in the language from which the runTimeCommand command was called.  In query mode, the language for this runTimeCommand is returned.  The possible values are "mel" or "python".
        d: (create, query) - Indicate that this run time command is a default command. Default run time commands will not be saved to preferences.
        dca: (query) - Returns an string array containing the names of all the default run time commands.
        delete: (edit) - Delete the specified user run time command.
        ex: (create) - Returns true|false depending upon whether the specified object exists. Other flags are ignored.
        url: (create, edit, query) - Custom URL for the online documentation of this command. Used in the Search user interface.
        hc: (create, edit, query) - hotkey Context for the command.
        i: (create, edit, query) - Image filename for the command.
        k: (create, edit, query) - Keywords for the command. Used for searching for commands in the Search user interface. When multiple keywords, use ; as a separator. (Example: "keyword1;keyword2")
        l: (create, edit, query) - Label for the command.
        la: (create, edit, query) - Extensive, multi-line description of the command. This will show up in the Search user interface's 'more info' page in addition to the annotation.
        nc: (query) - Return the number of run time commands.
        ndc: (query) - Return the number of default run time commands.
        nuc: (query) - Return the number of user run time commands.
        p: (create, edit, query) - Name of the plugin this command requires to be loaded. This flag wraps the script provided into a safety check and automatically loads the plugin referenced on execution if it hasn't been loaded. If the plugin fails to load, the command won't be executed.
        s: (edit) - Save all the user run time commands.
        she: (create, edit, query) - Indicate that this run time command should be shown in the Hotkey Editor. Default value is true.
        t: (create, edit, query) - Tags for the command. Used for grouping commands in the Search user interface. When more than one tag, use ; as a separator. (Example: "tag1;tag2")
        uca: (query) - Returns an string array containing the names of all the user run time commands.
    """
    ...


def saveAllShelves(*args) -> Any:
    r"""
    This command writes all shelves that are immediate children of the specified
    control layout to the prefs directory.

    Args:
    """
    ...


def saveMenu(*args) -> Any:
    r"""
    This command is used for saving the contents of a menu, so that
    another instance of the menu may be recreated later. The command
    writes out a file which, when run as a script, will rebuild the
    menuItems contained in the original menu. Note that the fileName
    is relative to the user's marking menu preference directory.
    
    Note that this command is used solely by the Marking Menu Editor
    and is not intended to be used for general purposes.
    
    Note that this command doesn't work well with controls that have
    mixed mel and python command callbacks.  Also, because it saves the menu
    state to a mel file, it does not work with callbacks that are python
    callable objects.
    
    The first argument is the name of the manu to save, the second one is
    the name of the file.

    Args:
    """
    ...


def savePrefObjects(*args) -> Any:
    r"""
    This command saves preference dependency nodes to "userPrefObjects.ma" in
    the user preference directory.

    Args:
    """
    ...


def savePrefs(*args, c: bool = ..., f: Optional[Union[str, bool]] = ..., g: bool = ..., hk: bool = ..., ms: bool = ..., pl: bool = ..., ui: bool = ...) -> Any:
    r"""
    This command saves preferences to disk. If no flags are specified
    then all pref types get saved out.

    Args:
        c: (create) - Save the color prefs to disk
        f: (create) - Save a specific preference file. Used to save preferences that are using optionVar -prefFile to save items to a different file.
        g: (create) - Save the general prefs to disk (optionVars)
        hk: (create) - Save the hotkeys to disk
        ms: (create) - Save the menuSet preferences to disk
        pl: (create) - Save the plug-in prefs to disk
        ui: (create) - Save each window's size and position to disk
    """
    ...


def saveShelf(*args) -> Any:
    r"""
    This command saves the specified shelf (first argument) to the
    specified file (second argument).
    
    Note that this command doesn't work well with controls that have
    mixed mel and python command callbacks.  Also, because it saves the
    state to a mel file, it does not work with callbacks that are python
    callable objects.

    Args:
    """
    ...


def saveViewportSettings(*args) -> Any:
    r"""
    This command causes all the 3d views to save their settings as optionVar's.
    This is called automatically by the system when Maya exits.

    Args:
    """
    ...


def scmh(*args, a: bool = ..., i: Optional[Union[int, bool]] = ..., q: bool = ..., r: bool = ...) -> Any:
    r"""
    Set the current manipulator handle value(s).  In UI units (where
    applicable), though the syntax is set to handle the unit type
    of the current manipulator handle (if available).

    Args:
        a: (create) - The values are absolute
        i: (create, multiuse) - This is a multiuse flag which specifies that the index-th (1-based) entry is to be ignored
        q: (create) - This flag suppresses all error messages
        r: (create) - The values are relative
    """
    ...


def scriptEditorInfo(*args, ch: bool = ..., chf: bool = ..., hfn: Optional[Union[str, bool]] = ..., i: str = ..., se: bool = ..., si: bool = ..., sr: bool = ..., ssw: bool = ..., sw: bool = ..., wh: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Use this command to directly manipulate and query the contents of the
    Command Window window.
    Note: Due to recent changes, certain flags will no longer work
    on the Script Editor Window.  All flags will continue to work with the
    CommandWindow (old Script Editor).
    Note: This command cannot be used to create a new script
    editor window.

    Args:
        ch: (edit) - Clears the read-only text in the upper field of the Command Window.
        chf: (edit) - Clear the file defined by the -hf/historyFilename flag, but only if -wh/writeHistory is true. Use this flag to start a new history file, since the default behaviour of the Command Window is to append to the existing file.
        hfn: (edit, query) - Sets or returns the name of the file that the Command Window will use to echo all of its history to. If this is an empty string when the -wh/writeHistory flag is set to true, then it will automatically be set to the default file.
        i: (edit) - Sets the text in the lower field of the Command Window. Set this value to an empty string to clear the field.  Note: this flag only affects the Command Window and not the new script editor. To find out how to manipulate the new script editor please refer to the documentation on the cmdScrollFieldExecuter and cmdScrollFieldReporter.
        se: (edit, query) - When true, Command Window and Script Editor will not display error messages.
        si: (edit, query) - When true, Command Window and Script Editor will not display info messages generated by Maya.
        sr: (edit, query) - When true, Command Window and Script Editor will not display command results.
        ssw: (edit, query) - When true and when the stackTrace mechanism is on, this flag will suppress the display of the stack window. If stack trace is enabled then results will be returned to the output window instead of a separate stack window.
        sw: (edit, query) - When true, Command Window and Script Editor will not display warning messages.
        wh: (edit, query) - When true, Command Window will echo all of its history to the file defined by the -hf/historyFilename flag. This flag effectively turns file writing on/off.
    """
    ...


def scriptedPanel(*args, ctl: bool = ..., cp: str = ..., cs: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., es: bool = ..., ex: bool = ..., init: bool = ..., iu: bool = ..., l: Optional[Union[str, bool]] = ..., mrl: bool = ..., mbv: bool = ..., ni: bool = ..., p: Optional[Union[str, bool]] = ..., pmp: Optional[Union[str, bool]] = ..., rp: str = ..., to: bool = ..., toc: Optional[Union[str, bool]] = ..., tor: bool = ..., typ: Optional[Union[str, bool]] = ..., up: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command will create an instance of the specified
    scriptedPanelType. A panel is a collection of UI objects (buttons,
    fields, graphical views) that are grouped together. A panel can be
    moved around as a group within the application interface, and torn off
    to exist in its own window. The panel takes care of maintaining the
    state of its UI when it is relocated, or recreated. A scripted panel
    is a panel that is defined in MEL, with all of the required callbacks
    available as MEL proc's.

    Args:
        ctl: (query) - Returns the top level control for this panel. Usually used for getting a parent to attach popup menus. CAUTION: panels may not have controls at times.  This flag can return "" if no control is present.
        cp: (edit) - Makes this panel a copy of the specified panel.  Both panels must be of the same type.
        cs: (edit) - Command string used to create a panel
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the Maya panel.
        es: (edit) - Command string used to edit a panel
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        init: (create, edit) - Initializes the panel's default state.  This is usually done automatically on file -new and file -open.
        iu: (query) - Returns true if only one instance of this panel type is allowed.
        l: (edit, query) - Specifies the user readable label for the panel.
        mrl: (create, edit, query) - Controls whether clicking on the menu header with the middle mouse button would repeat the last selected menu item.
        mbv: (create, edit, query) - Controls whether the menu bar for the panel is displayed.
        ni: (edit, query) - (Internal) On Edit will mark the panel as requiring initialization. Query will return whether the panel is marked for initialization.  Used during file -new and file -open.
        p: (create) - Specifies the parent layout for this panel.
        pmp: (edit, query) - Specifies the procedure called for building the panel's popup menu(s). The default value is "buildPanelPopupMenu".  The procedure should take one string argument which is the panel's name.
        rp: (edit) - Will replace the specified panel with this panel.  If the target panel is within the same layout it will perform a swap.
        to: (edit, query) - Will tear off this panel into a separate window with a paneLayout as the parent of the panel. When queried this flag will return if the panel has been torn off into its own window.
        toc: (create) - Will create this panel as a torn of copy of the specified source panel.
        tor: (create, edit) - Restores panel if it is torn off and focus is given to it. If docked, becomes the active panel in the docked window. This should be the default flag that is added to all panels instead of -to/-tearOff flag which should only be used to tear off the panel.
        typ: (create, query) - This flag specifies the type of scripted panel to create.
        up: (edit) - Specifies that the panel should be removed from its layout. This (obviously) cannot be used with query.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def scriptedPanelType(*args, acb: Optional[Union[str, bool]] = ..., ocb: Optional[Union[str, bool]] = ..., ccb: Optional[Union[str, bool]] = ..., cv: bool = ..., dt: Optional[Union[str, bool]] = ..., dcb: Optional[Union[str, bool]] = ..., ex: bool = ..., hkc: Optional[Union[str, bool]] = ..., icb: Optional[Union[str, bool]] = ..., l: Optional[Union[str, bool]] = ..., o: bool = ..., rcb: Optional[Union[str, bool]] = ..., rfo: bool = ..., scb: Optional[Union[str, bool]] = ..., u: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command defines the callbacks for a type of scripted panel.  The panel type
    created by this command is then used when creating a scripted panel.  See also
    the 'scriptedPanel' command.

    Args:
        acb: (create, edit, query) - This flag specifies the callback procedure for adding the panel to a particular control layout.  The parent layout is guaranteed to be the current default layout when the proc is called.  If its name is required then it can be queried with 'setParent -q'.  Any editors should be parented here. global proc procName (string $panelName) { .... }
        ocb: (create, edit, query) - This flag specifies the callback procedure for copying the state of the panel when a tear-off copy of the panel is made.  The callback proc has the form: global proc procName (string $panelName, string $newPanelName) { .... } This procedure will be executed immediately after the addCallback procedure has finished executing. At that point, the copied panel will be fully created and accessible to facilitate copying of panel settings. Note: the addCallback procedure is called after the createCallback procedure has been called.
        ccb: (create, edit, query) - This flag specifies the callback procedure for initially creating the panel object.  No UI should be created here.  Any editors owned by the panel should be created here unparented. The callback proc has the form: global proc procName (string $panelName) { .... }
        cv: (create, edit, query) - This flag specifies if this view is a custom 3d view for MPx3dModelView types. This flag should only be used for MPx3dModelView types.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dcb: (create, edit, query) - This flag specifies the callback procedure for final deletion of the panel.  The callback proc has the form: global proc procName (string $panelName) { .... }
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        hkc: (create, edit, query) - This flag is used to specify the name of the hotkey context client for this panel type. By default, it is the same as the panel type.
        icb: (create, edit, query) - This flag specifies the callback procedure for the initialize callback.  This will be called on file -new and file -open to give the panel an opportunity to re-initialize to a starting state, if required. The panel may be parented or unparented at this time. The callback proc has the form: global proc procName (string $panelName) { .... }
        l: (create, edit, query) - Label for the panel
        o: (create, edit, query) - This flag specifies that this type is no longer used in Maya.
        rcb: (create, edit, query) - This flag specifies the callback procedure for removing the panel from its current control layout.  Any editors should be unparented here. The callback proc has the form: global proc procName (string $panelName) { .... }
        rfo: (create, edit, query) - This flag specifies if panels of this type should be retained after restoring panel cofiguration during file open. Default value is false.
        scb: (create, edit, query) - This flag specifies the callback procedure for saving the state of the panel.  The callback proc has the form: global proc string procName (string $panelName) { .... } Note that the proc returns a string.  This string will be executed after the createCallback has been called to facilitate restoring the panel state.
        u: (create, edit, query) - This flag specifies if only one instance of this type of panel can exist at a given time.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def scriptTable(*args, acc: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cbc: Optional[Union[str, bool]] = ..., ccc: Optional[Union[str, bool]] = ..., cfc: Optional[Union[str, bool]] = ..., ci: Optional[Union[Tuple[int, int], bool]] = ..., cv: Optional[Union[str, bool]] = ..., cr: int = ..., ct: bool = ..., cf: Optional[Union[Tuple[int, str], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., c: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dr: int = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., eh: bool = ..., ex: bool = ..., fpn: bool = ..., gcc: Optional[Union[str, bool]] = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., ir: int = ..., io: bool = ..., l: Optional[Union[Tuple[int, str], bool]] = ..., m: bool = ..., mee: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rh: Optional[Union[int, bool]] = ..., r: Optional[Union[int, bool]] = ..., rrc: Optional[Union[str, bool]] = ..., rtc: Optional[Union[str, bool]] = ..., sc: Optional[Union[List[int], bool]] = ..., scs: Optional[Union[List[int], bool]] = ..., sr: bool = ..., srs: Optional[Union[List[int], bool]] = ..., sb: Optional[Union[int, bool]] = ..., scc: Optional[Union[str, bool]] = ..., sm: Optional[Union[int, bool]] = ..., se: bool = ..., sbm: Optional[Union[str, bool]] = ..., upc: bool = ..., upr: bool = ..., udc: bool = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries the script table control.

    Args:
        acc: (create, edit) - Sets the script to call after the value of a cell has been changed. The procedure is called with 2 integer arguments specifying the row and column for which the value was changed. The 3rd argument is the string which was entered into that cell. The procedure does not need to return any value. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form:  global proc procedureName(int $row, int $column, string $value)
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cbc: (create, edit) - Sets the script to call when it requires the background color of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value is required. The procedure should return an array of ints which is the RGB color value for the cell. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form:  global proc int[] procedureName(int $row, int $column) { return {255,0,0}; // return Red as cell background color }
        ccc: (create, edit) - Sets the script to call when somebody has changed the value of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value was changed. The 3rd argument is the string which was entered into that cell. The procedure should return an integer value which indicates whether that value should be accepted (return 1 if yes, and 0 if no). The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form:  global proc int procedureName(int $row, int $column, string $value)
        cfc: (create, edit) - Sets the script to call when it requires the foreground color of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value is required. The procedure should return an array of ints which is the RGB color value for the cell. The row and column numbers passed in are 1-based (i.e. (1,1) is the upper left cell). The procedure should be of the form:  global proc int[] procedureName(int $row, int $column) { return {0,0,0}; // return Black as Text color }
        ci: (edit, query) - used with cellValue , to give the index of row and column This flag and its argument must be passed to the command before the -q flag (see examples).       In query mode, this flag needs a value.
        cv: (edit, query) - query and set the cell value on the table by the index of row and column referred in flag -cellIndex. In edit mode, if flag -multiEditEnabled is True and any cell is selected, the flag -cellIndex is not used and the selected cells will be changed.
        cr: (edit) - Clear the contents for all the cells on the specified row. Any procedure specified by the -gcc flag will be called to populate the cleared cells The row number is 1-based (i.e. the first row is 1 not 0).
        ct: (edit) - Clears the contents of all the cells in the table. Any procedure specified by the -gcc flag will be called to populate the cleared cells
        cf: (create, edit) - Filter the specified column with the string value provided. Set filter to columns 0 will apply the filter to all columns. The filter is case insensitive and support wildcards. Wildcard Matching: Wildcard matching is much simpler than full regexps and has only four features: c	Any character represents itself apart from those mentioned below. Thus c matches the character c. ?	Matches any single character. It is the same as . in full regexps. *	Matches zero or more of any characters. It is the same as .* in full regexps. [...]	Sets of characters can be represented in square brackets, similar to full regexps. Within the character class, backslash has no special meaning. (i.e. you can search for "MyValue" with "y*u" or "??Val??" or "[MyThe]Value" or any letters in "MyValue" The column number is 1-based (i.e. the first row is 1 not 0).
        cw: (create, edit, multiuse) - Set the width of the specified column The column number is 1-based (ie. the first column is 1 not 0).
        c: (create, edit, query) - Set the number of columns in the table
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dr: (edit) - Delete the specified row The row number is 1-based (i.e. the first row is 1 not 0).
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the table. By default, this flag is set to true, and the table can be edited. If false, then the table is 'read only' and cannot be typed into.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        eh: (query) - when querying the count for the rows or the columns , the number returned will not include the headers
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gcc: (create, edit) - Sets the script to call when it requires the contents of a cell. The procedure is called with 2 integer arguments specifying the row and column for which the value is required. The procedure should return a string which is the value for the cell. The row and column numbers passed in are 1-based (ie. (1,1) is the upper left cell). The procedure should be of the form:  global proc string procedureName(int $row, int $column)
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        ir: (edit) - Insert an empty row before the specified row. Any procedure specified by the -gcc flag will be called to populate the new new cells. The row number is 1-based (i.e. the first row is 1 not 0).
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, multiuse) - Set the label of the specified column. The column number is 1-based (ie. the first column is 1 not 0).
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mee: (create, edit, query) - True: scriptTable support multi-editing function
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rh: (create, edit, query) - Sets the height for each row in the scriptTable
        r: (create, edit, query) - Set the number of rows in the table
        rrc: (create, edit) - Sets the script to call after rows are removed by pressing 'delete' or 'backspace' key. The procedure is called with one argument specifying that selected rows have been removed. The rows passed in are 1-based. The procedure should be of the form:  global proc procedureName(int $rows[])
        rtc: (create, edit) - Sets the script to call when 'delete' or 'backspace' key is pressed. The procedure is called with one argument specifying the selected rows to be removed. The procedure should return an integer value which indicates whether the selected rows should be removed (return 1 if yes, and 0 if no). The rows passed in are 1-based. The procedure should be of the form:  global proc int procedureName(int $rows[])
        sc: (edit, query) - Select the cells or return  the cells currently selected. This returns a list of indices, the first of each pair is the row, the second is the column, repeated for each cell selected The returned cell numbers are 1-based (ie. the first row is 1 not 0, the first column is 1 not 0).
        scs: (edit, query) - select the columns or return the columns currently selected. This returns a list of indices of each column completely selected The returned column numbers are 1-based
        sr: (query) - The current row selected. The returned row number is 1-based (ie. the first row is 1 not 0).
        srs: (edit, query) - In edit mode, select the rows given as argument. In query mode, return a list of indices of completely selected rows. The row numbers are 1-based
        sb: (create, edit, query) - Set the selection behavior, valid values are from 0 to 2 (inclusive) 0 - Selecting single items. 1 - Selecting only rows. 2 - Selecting only columns.
        scc: (create, edit) - Sets the script to call when a complete selection operation triggered by the user has occurred successfully. The script does not pass any parameters and does not need to return any value (i.e. It is simply a notification mechanism).
        sm: (create, edit, query) - Set the selection Mode, valid values are from 0 to 4 (inclusive) 0 - Items cannot be selected. 1 - When the user selects an item, any already-selected item becomes unselected, and the user cannot unselect the selected item by clicking on it. 2 - When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them. 3 - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them. 4 - When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.
        se: (create, edit, query) - enable scriptTable sorted by column default value is false and the whole row will be sorted
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        upc: (query) - The column under the pointer. The returned column number is 1-based (i.e. the first column is 1 not 0).
        upr: (query) - The row under the pointer. The returned row number is 1-based (i.e. the first row is 1 not 0).
        udc: (create, edit, query) - this controls the cell edit mode False: Click in the cell to select (in Row selection, the last cell of the row is edited, in Column selection, the last cell of the column is edited)(default)  True:  Clicked in cell is edited when double-clicked only
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def scrollField(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cl: bool = ..., c: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ec: Optional[Union[str, bool]] = ..., ex: bool = ..., fn: Optional[Union[str, bool]] = ..., fns: Optional[Union[int, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., it: Optional[Union[str, bool]] = ..., ip: Optional[Union[int, bool]] = ..., io: bool = ..., kpc: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., nl: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sl: bool = ..., sbm: Optional[Union[str, bool]] = ..., tx: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., ww: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a scrolling field that handles multiple lines
    of text.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the value changes. This command is executed whenever the field loses focus.
        cl: (create, edit) - Removes all text in the field.
        c: (create, edit) - Obsolete - use "enterCommand" instead
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ec: (create, edit) - Command executed when the enter key is pressed. This applies to the enter key on the numeric keypad only.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fns: (create, edit, query) - The font point size for the text.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        it: (create, edit) - Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
        ip: (create, edit, query) - The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        kpc: (create, edit) - Command executed when any key is pressed.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nl: (query) - Number of lines in the scroll field.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sl: (query) - The selected text in the field.  An empty string is returned if there is no selected text.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        tx: (create, edit, query) - The field text.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        ww: (create) - Specify true to break lines at spaces, tabs, or newlines.  Text will continue on the following line.  A value of false will not break text between words, in which case text may disappear beyond the edge of the field.  This flag must be set at create time. Lines do not word wrap by default.
    """
    ...


def scrollLayout(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bv: bool = ..., ca: bool = ..., cr: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hst: Optional[Union[int, bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., mcw: Optional[Union[int, bool]] = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., pe: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rc: Optional[Union[str, bool]] = ..., sah: bool = ..., sav: bool = ..., saw: bool = ..., sbp: Tuple[str, int] = ..., sp: str = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vsb: bool = ..., vst: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a scroll layout.  A scroll layout is useful
    for when you have a number of controls which cannot all be visible
    at a time.  This layout will display a horizontal and/or vertical
    scroll bar when necessary to bring into view the hidden controls.
    Since the scroll layout provides no real positioning of children you
    should use another control layout as the immediate child.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bv: (create, edit, query) - Visibility of the border.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cr: (create, query) - Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidth flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hst: (create, edit) - Thickness of the horizontal scroll bar.  Specify an integer value of pixels greater than or equal to 0. Other than setting the value to 0 to hide the scrollbar, this flag has no effect on Windows systems.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        mcw: (create, query) - A positive non-zero integer value indicating the minimum width the scroll layout's child.  This flag only has meaning when the -cr/childResizable flag is set to true.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        pe: (edit, query) - Set to true if you want to pan the scroll layout using ALT + MMB. On OSX, in one button and two button mode, you could use command+alt+LMB to pan it. The pan effect is disabled by default.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rc: (create, edit) - The command invoked when the scroll layout is resized.
        sah: (query) - Return the height of the scroll area (in pixels).
        sav: (query) - Return the vertical and horizontal values of the scroll area (in pixels).
        saw: (query) - Return the width of the scroll area (in pixels).
        sbp: (edit) - Scroll the client area in the direction of the string. The int specifies the number of pixels.
        sp: (edit) - Scroll the client area in the direction of the string. Valid values are "up", "down", "left" or "right".
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vsb: (create) - Set to true if you want to always have the vertical scroll bar visible.
        vst: (create, edit) - Thickness of the vertical scroll bar.  Specify an integer value of pixels greater than or equal to 0. This flag has no effect on Windows systems.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def separator(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hr: bool = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a separator widget in a variety of drawing styles.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hr: (create, edit, query) - Specify the orientation of the separator.  True for horizontal and false for vertical.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit, query) - Specify the style of the separator.  Valid values are "none", "single", "in", "out" and "shelf".  Note: the values "double", "singleDash" and "doubleDash" and no longer supported.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def setFocus(*args) -> Any:
    r"""
    Give keyboard focus to a specific control or panel, passed
    as an argument.

    Args:
    """
    ...


def setMenuMode(*args) -> Any:
    r"""
    Optionally sets a new Menu Mode for the menu bar in the main Maya window.
    Returns the current Menu Mode, and if a new one is specified, then the previous
    Menu Mode is returned.
    Note that due to recent changes to the menu set architecture (8.0+), this function now
    takes a menu set as a parameter instead of a label.

    Args:
    """
    ...


def setNodeTypeFlag(*args, dsp: bool = ..., ts: bool = ..., query: bool = ...) -> Any:
    r"""
    This command sets static data on the specified node type. This will affect the
    class of node type as a whole.  The argument passed may be the name of the node
    type or the node type tag.  Node type tags may be found using the objectType
    command.

    Args:
        dsp: (create, query) - Sets whether the node type will appear in the UI or not.  Setting display to false will cause the node type to not appear in the UI. Query mode to obtain the value of the display flag.
        ts: (create, query) - This flag is obsolete.  Has no effect.
    """
    ...


def setStartupMessage(*args) -> Any:
    r"""
    Update the startup window message.  Also know as the 'Splash Screen',
    this is the window that appears while the application is starting up.

    Args:
    """
    ...


def shelfButton(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., c: Optional[Union[str, bool]] = ..., rpt: bool = ..., dt: Optional[Union[str, bool]] = ..., di: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ecr: bool = ..., ekf: bool = ..., ex: bool = ..., fla: bool = ..., fwt: Optional[Union[int, bool]] = ..., fwv: Optional[Union[int, bool]] = ..., fx: bool = ..., fy: bool = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., hnd: Optional[Union[str, bool]] = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hi: Optional[Union[str, bool]] = ..., i: Optional[Union[str, bool]] = ..., i1: Optional[Union[str, bool]] = ..., i2: Optional[Union[str, bool]] = ..., i3: Optional[Union[str, bool]] = ..., iol: Optional[Union[str, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., lec: Optional[Union[str, bool]] = ..., lo: Optional[Union[int, bool]] = ..., m: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., mi: Optional[Union[Tuple[str, str], bool]] = ..., mip: Optional[Union[int, bool]] = ..., mio: Optional[Union[Tuple[str, str, str], bool]] = ..., nbg: bool = ..., ndp: bool = ..., npm: bool = ..., olb: Optional[Union[Tuple[float, float, float, float], bool]] = ..., olc: Optional[Union[Tuple[float, float, float], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rot: Optional[Union[float, bool]] = ..., sic: bool = ..., si: Optional[Union[str, bool]] = ..., stp: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., ua: bool = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This control supports up to 3 icon images and 4 different display
    styles.  The icon image displayed is the one that best fits the
    current size of the control given its current style.
    
    This command creates an iconTextButton that is designed to be on
    the shelf. The button contains a command that can be drag'n'dropped.

    Args:
        al: (create, edit, query) - The label alignment.  Alignment values are "left", "right", and "center". By default, the label is aligned "center". Currently only available when -st/style is set to "iconAndTextCentered".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        c: (create, edit, query) - Command executed when the control is pressed.
        rpt: (create, edit, query) - Set if the MEL command specified in the command flag should be repeatable or not.  The "g" key, by default, is the shortcut to repeat the last executed command.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        di: (create, edit, query) - Image used when the button is disabled. Image size must be the same as the image specified with the i/image flag. This is a Windows only flag.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit, query) - Command executed when the control is double clicked.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ecr: (create, edit, query) - This flag only affects menu items to which a command can be attached.  Specify true and the command may be repeated by executing the command repeatLast.  This flag is true by default for all items except for option box items.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fla: (create, edit, query) - Sets whether the control will be a flat button (0 false, 1 true).
        fwt: (create, edit, query) - This flag is used to have the shelf button have a wider or thinner width. The valid values are: Standard = 1, Custom = 2, Automatic = 3. The Standard type will resize, keeping the aspect ratio, to 32x32 pixels. The Automatic type will adjust the button width to make sure wide images are used properly. The Custom type will allow the user to choose the desired width for the icon. Default value is 3.
        fwv: (create, edit, query) - This flag is only useful when the Custom flexibleWidthType is chosen. The value is a width in pixels.
        fx: (create, edit, query) - Is the image flipped horizontally?
        fy: (create, edit, query) - Is the image flipped vertically?
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        hnd: (create, edit) - Specify a script callback which is called when a node is dropped on the control.  The name of the node being dropped will be passed to the function  (python callable) or appended to the end (script) to form the command to be executed.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hi: (create, edit, query) - Highlight image displayed while the cursor is over the control. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        i: (create, edit, query) - If you are not providing images with different sizes then you may use this flag for the control's image. If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        i1: (create, edit, query) - First of three possible icons. The icon that best fits the current size of the control will be displayed.
        i2: (create, edit, query) - Second of three possible icons. The icon that best fits the current size of the control will be displayed.
        i3: (create, edit, query) - Third of three possible icons. The icon that best fits the current size of the control will be displayed.
        iol: (create, edit, query) - A short string, up to 6 characters, representing a label that will be displayed on top of the image.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The text that appears in the control.
        lec: (create, edit) - Specify a callback which is called after the user double clicks the label of the control to give it a new label. The new label string will be passed to the callback.
        lo: (create, edit, query) - The label offset. Default is 0. Currently only available when -st/style is set to "iconAndTextCentered".
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mh: (create, edit, query) - The number of pixels above and below the control content. The default value is 1 pixel.
        mw: (create, edit, query) - The number of pixels on either side of the control content. The default value is 1 pixel.
        mi: (create, edit, multiuse) - Creates menu items for this button by passing in arguments for the menu item label and command for each item.  These should be passed as strings: "label" "command" for each use of this flag in the command.
        mip: (create, edit, multiuse) - This flag is used to specify that a menu item is in Python. The integer value is the index of the menuItem that is modified by this flag. This is 0 based, so it corresponds to the (index+1)th occurrence of the /-mi/-menuItem flag.
        mio: (create, edit, multiuse) - Creates menu items that include an option box.  Arguments passed to the flag are "label" "comand" "option box command";
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        ndp: (create) - Disable the default popup menus.
        npm: (query) - Return the number of popup menus attached to this control.
        olb: (create, edit, query) - The RGBA color of the shadow behind the label defined by imageOverlayLabel. Default is 50% transparent black: 0 0 0 .5
        olc: (create, edit, query) - The RGB color of the label defined by imageOverlayLabel. Default is a light grey: .8 .8 .8
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rot: (create, edit, query) - The rotation value of the image in radians.
        sic: (create, edit) - For "textOnly" and "iconOnly" style, this flag has no effect. For other styles, if the flag is specified, the icon will be scaled to the size of the control.
        si: (create, edit, query) - Image displayed while the control is selected. Image size must be the same as the image specified with the -i/image flag. This is a Windows only flag.
        stp: (create, edit, query) - Sets the language type for the command script. Can only be used in conjunction with the c/command or dcc/doubleClickCommand flags. Valid values are "mel" (enabled by default), and "python".
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit, query) - The draw style of the control.  Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal", "iconAndTextVertical", and "iconAndTextCentered". (Note: "iconAndTextCentered" is only available on Windows). If the "iconOnly" style is set, the icon will be scaled to the size of the control.
        ua: (create, edit, query) - Is the image using alpha channel?
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. "2013", "2014"). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def shelfLayout(*args, aln: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., ch: Optional[Union[int, bool]] = ..., cw: Optional[Union[int, bool]] = ..., cwh: Optional[Union[Tuple[int, int], bool]] = ..., ca: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hr: bool = ..., io: bool = ..., m: bool = ..., mar: int = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pos: Optional[Union[Tuple[str, int], bool]] = ..., po: bool = ..., spa: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a new empty shelf layout.
    The shelf layout can accept drops of commands scripts.
    Use the addNewShelfTab MEL command to add a shelf to the top level shelves.

    Args:
        aln: (create, edit, query) - Sets the alignment of the buttons in the layout. When horizontal is true, valid options are "left" and "right". When horizontal is false, valid options are "top" and "bottom".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        ch: (create, edit, query) - Set or query the height of the items in the shelf.
        cw: (create, edit, query) - Set or query the width of the items in the shelf.
        cwh: (create, edit, query) - Set the width and height of the items in the shelf.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hr: (create, edit, query) - Orientation of the layout. This flag is true by default, which corresponds to a horizontally laid out shelf.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pos: (create, edit, multiuse) - Specify the name of a child control in the grid layout along with a 1-based integer value indicating the desired position of the child. Positions increase from left to right within a row and then wrap around to the next row increasing from top to bottom. For example, a grid layout with 3 columns and 2 rows has 6 visible positions where 1, 2 and 3 occupy the first row and 4, 5 and 6 occupy the second.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        spa: (create, edit, query) - Sets the space between children.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit, query) - Set or query the current style of the items in the shelf.  Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal" and "iconAndTextVertical".
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this feature was introduced. The argument should be given as a string of the version number (e.g. "2014", "2015"). Currently only accepts major version numbers (e.g. 2014.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def shelfTabLayout(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bs: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., ca: bool = ..., cr: bool = ..., ct: Optional[Union[int, bool]] = ..., ctc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hst: Optional[Union[int, bool]] = ..., i: Optional[Union[str, bool]] = ..., iv: bool = ..., imh: Optional[Union[int, bool]] = ..., imw: Optional[Union[int, bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., mcw: Optional[Union[int, bool]] = ..., mt: Optional[Union[Tuple[int, int], bool]] = ..., ntc: Optional[Union[str, bool]] = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pmc: Optional[Union[str, bool]] = ..., psc: Optional[Union[str, bool]] = ..., po: bool = ..., scr: bool = ..., stb: bool = ..., sc: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., sti: Optional[Union[int, bool]] = ..., snt: bool = ..., sbm: Optional[Union[str, bool]] = ..., ti: Optional[Union[Tuple[str, str], bool]] = ..., tii: Optional[Union[Tuple[int, str], bool]] = ..., tl: Optional[Union[Tuple[str, str], bool]] = ..., tli: Optional[Union[Tuple[int, str], bool]] = ..., tp: Optional[Union[str, bool]] = ..., tt: Optional[Union[Tuple[str, str], bool]] = ..., tti: Optional[Union[Tuple[int, str], bool]] = ..., tc: bool = ..., tv: bool = ..., ut: Optional[Union[str, bool]] = ..., vst: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries a shelf tab group which is essentially
    a normal tabLayout with some drop behaviour in the tab bar.  A garbage can
    icon can appear in the top right corner to dispose of buttons dragged to
    it from shelves.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bs: (create, edit, query) - Specify the style of the border for tab layout. Valid values are: "none", "top", "notop" and "full". By default, it will use "full" to draw a simple frame around the body area of the tab layout.  "none"  - Do not draw borders around the body area of the tab layout "top"   - Only draw a simple line right below the tabs "notop" - Draw a simple frame on the left/right/bottom (no top) of the tab layout "full"  - Draw a simple frame around the body area of the tab layout
        cc: (create, edit) - Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-selecting the current tab will not invoke this command.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cr: (create, query) - Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidth flag.
        ct: (create, edit) - Close the tab at the given index.
        ctc: (create, edit) - Specify a script to be executed when one of the tabs are closed by clicking on the header widget (MMB or X button).
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit) - Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click will execute the double click command.  Double clicking the current tab will re-invoke the double click command.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hst: (create, edit) - Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.
        i: (create, edit, query) - Image appearing in top right corner of tab layout.
        iv: (create, edit, query) - Visibility of tab image.
        imh: (create, query) - Margin height for all tab children.
        imw: (create, query) - Margin width for all tab children.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        mcw: (create, query) - Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has meaning when the -cr/childResizable flag is set to true.
        mt: (create, edit) - Move the tab from the current index to a new index.
        ntc: (create, edit) - Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note: in order to show the new tab button use the -snt/showNewTab flag.  Using this command will override any internal Maya logic for adding a new tab (only this command will be executed).
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pmc: (create, edit) - Specify a script to be executed when the popup menu is about to be shown.
        psc: (create, edit) - Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTab or -sti/selectTabIndex flags.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        scr: (create, query) - Puts all children of this layout within a scroll area.
        stb: (create, edit, query) - If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.
        sc: (create, edit, query) - Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTab or -sti/selectTabIndex flags.
        st: (create, edit, query) - The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.
        sti: (create, edit, query) - Identical to the -st/selectTab flag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are no child tabs.
        snt: (create, edit, query) - Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the -ntc/newTabCommand flag to set the command executed when this button is clicked.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ti: (create, edit, multiuse, query) - Set an icon for a tab.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the icon file name.
        tii: (create, edit, multiuse, query) - Identical to the -ti/tabIcon flag except this flag takes a 1-based index to identify the tab you want to set the icon for. If this flag is queried the tab icons for all the children are returned.
        tl: (create, edit, multiuse, query) - Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.
        tli: (create, edit, multiuse, query) - Identical to the -tl/tabLabel flag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.
        tp: (create, edit, query) - Changes the tab position. The possible values are: "north", "east" and "west".
        tt: (create, edit, multiuse, query) - Set a tab tooltip.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the tooltip for the tab associated with that child. If this flag is queried then the tab tooltips for all the children are returned.
        tti: (create, edit, multiuse, query) - Identical to the -tt/tabTooltip flag except this flag takes a 1-based index to identify the tab you want to set the tooltip for. If this flag is queried the tab tooltips for all the children are returned.
        tc: (create, query) - Set to true if you want to have a close button icon on all created tabs.
        tv: (create, edit, query) - Visibility of the tab labels.
        ut: (create) - Forces the command to use a command template other than the current one.
        vst: (create, edit) - Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def showSelectionInTitle(*args) -> Any:
    r"""
    This command causes the title of the window specified as an argument
    to be linked to the current file and selection. When selection
    changes, the window title will change to show the current file name
    and the name of the last selected object.

    Args:
    """
    ...


def showWindow(*args) -> Any:
    r"""
    Make a window visible. If no window is specified then the current
    window (most recently created) is used. See also the window
    command's vis/visible flag.
    
    If the specified window is iconified, it will be opened.

    Args:
    """
    ...


def soundControl(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bs: bool = ..., dt: Optional[Union[str, bool]] = ..., ds: bool = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., es: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., max: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., min: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pc: Optional[Union[str, bool]] = ..., po: bool = ..., rc: Optional[Union[str, bool]] = ..., rcs: Optional[Union[float, bool]] = ..., roh: bool = ..., r: bool = ..., s: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., wf: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control used for changing
    current time and scratching/scrubbing through sound files.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bs: (edit) - Set this widget up for sound scrubbing. Subsequent changes to current time will result in "sound scrubbing" behavior, until the "-endScrub" command is issued for this widget.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ds: (edit, query) - Turn sound display off.  Query returns int.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        es: (edit) - End sound scubbing for this widget.  This stops sound scrubbing behavior and should be issued before any subsequent "-beginScrub" flags
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        max: (create, edit, query) - Controls the max time of the range displayed in the control. Query returns float.
        min: (create, edit, query) - Controls the min time of the range displayed in the control. Query returns float.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pc: (create, edit) - script to run on mouse-down in this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rc: (create, edit) - script to run on mouse-up in this control.
        rcs: (edit, query) - How much sound (in the current time unit) is repeated when -repeatOnHold is true.  Default is 1.0.
        roh: (edit, query) - Repeat sound during mouse-down events
        r: (edit) - Resample the sound display to fit the widget
        s: (edit, query) - Name of audio depend node whose data should display in the sound-display widget. Query returns string.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        wf: (edit, query) - Determines what part of the sound waveform to display, when -displaySound is "true". Valid values are "top", "bottom", and "both".  Default is "top". Query returns string.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def soundPopup(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ...) -> Any:
    r"""
    Create a poup with sound slider control that accepts only float values and is bound
    by a minimum and maximum value.  The slider displays a marker
    indicating the current value of the slider relative to its minimum
    and maximum values.  Click and drag the marker, or on the slider itself
    to change the current value.

    Args:
        ann: (create) - Annotate the control with an extra string value.
        bgc: (create) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create) - Enables the background color of the control.
        ekf: (create) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (create) - Return the full path name of the widget, which includes all the parents.
        h: (create) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (create) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (create) - Return the number of popup menus attached to this control.
        p: (create) - The parent layout for this control.
        pma: (create) - Return the names of all the popup menus attached to this control.
        po: (create) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create) - Command that gets executed when visible state of the control changes.
        w: (create) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def spreadSheetEditor(*args, aa: bool = ..., are: Optional[Union[str, bool]] = ..., ctl: bool = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., exe: str = ..., ex: bool = ..., f: Optional[Union[str, bool]] = ..., fal: Optional[Union[List[str], bool]] = ..., fmc: Optional[Union[str, bool]] = ..., hlc: Optional[Union[str, bool]] = ..., ko: bool = ..., lck: bool = ..., ln: bool = ..., mlc: Optional[Union[str, bool]] = ..., nn: bool = ..., pnl: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pre: Optional[Union[int, bool]] = ..., sla: bool = ..., slc: Optional[Union[str, bool]] = ..., ss: bool = ..., sts: bool = ..., up: bool = ..., ulk: bool = ..., upd: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a new spread sheet editor in the
    current layout.

    Args:
        aa: (query) - Returns a list of all the attribute names currently being displayed.  This flag is ignored when not being queried.
        are: (create, edit, query) - Filter the current displayed attribute names. This expression matches the case-insensitive substring of attribute names.
        ctl: (query) - Query only. Returns the top level control for this editor. Usually used for getting a parent to attach popup menus. Caution: It is possible for an editor to exist without a control. The query will return "NONE" if no control is present.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attaches a tag to the editor.
        exe: (edit) - Immediately executes the command string once for every selected cell in the spreadSheet.  Before the command is executed, "#A" is substituted with the name of the cell's attribute, "#N" is substituted with the name of the cell's node, and "#P" is substituted with the full path name of the node.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        f: (create, edit, query) - Specifies the name of an itemFilter object to be used with this editor. This filters the information coming onto the main list of the editor.
        fal: (create, edit, query) - Forces the editor to only display attributes with the specified names.
        fmc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object. This is a variant of the -mainListConnection flag in that it will force a change even when the connection is locked. This flag is used to reduce the overhead when using the -unlockMainConnection , -mainListConnection, -lockMainConnection flags in immediate succession.
        hlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its highlight list. Not all editors have a highlight list. For those that do, it is a secondary selection list.
        ko: (create, edit, query) - Limits the displayed attributes to be those that are keyable. True by default
        lck: (create, edit) - Locks the current list of objects within the mainConnection, so that only those objects are displayed within the editor. Further changes to the original mainConnection are ignored.
        ln: (create, edit, query) - Controls whether the attributes are displayed using their long names or their short names.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will use as its source of content. The editor will only display items contained in the selectionConnection object.
        nn: (create, edit, query) - Controls whether the attribute names will be displayed in a more user-friendly, readable way.  When this is on, the longNames flag is ignored.  When this is off, attribute names will be displayed either long or short, according to the longNames flag. Default is on. Queried, returns a boolean.
        pnl: (create, query) - Specifies the panel for this editor. By default if an editor is created in the create callback of a scripted panel it will belong to that panel. If an editor does not belong to a panel it will be deleted when the window that it is in is deleted.
        p: (create, edit, query) - Specifies the parent layout for this editor. This flag will only have an effect if the editor is currently un-parented.
        pre: (create, edit, query) - Specifies the maximum number of digits displayed to the right of the decimal place.  Can be 0 to 20.
        sla: (query) - Returns a list of all the attribute names that are selected.  This flag is ignored when not being queried.
        slc: (create, edit, query) - Specifies the name of a selectionConnection object that the editor will synchronize with its own selection list. As the user selects things in this editor, they will be selected in the selectionConnection object. If the object undergoes changes, the editor updates to show the changes.
        ss: (create, edit, query) - If true, when transforms are selected their shapes will be displayed instead.
        sts: (query) - Query only flag. Returns the MEL command that will create an editor to match the current editor state. The returned command string uses the string variable $editorName in place of a specific name.
        up: (create, edit) - Specifies that the editor should be removed from its layout. This cannot be used in query mode.
        ulk: (create, edit) - Unlocks the mainConnection, effectively restoring the original mainConnection (if it is still available), and dynamic updates.
        upd: (create, edit) - Causes a locked mainConnection to be updated from the orginal mainConnection, but preserves the lock state.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def swatchDisplayPort(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bc: Optional[Union[Tuple[float, float, float], bool]] = ..., bw: Optional[Union[int, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pc: Optional[Union[str, bool]] = ..., po: bool = ..., rp: Optional[Union[int, bool]] = ..., rs: Optional[Union[int, bool]] = ..., sn: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., wh: Optional[Union[Tuple[int, int], bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a 3dPort that displays a swatch
    representing the shading node.
    
    The optional argument is the name of the 3dPort.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bc: (create, edit, query) - The border color of the swatch.
        bw: (create, edit, query) - The border width of the swatch.  The value will be clamped between 0 and 4.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pc: (create, edit) - Specifies the command to be run when the swatch is clicked on.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rp: (create, edit) - Specifies the priority to render the swatch. This flag can only be used in parallel swatch rendering. When more than one swatch are waiting in the render queue, this flag can be used to specify which one has the higher priority to be rendered. By default, the flag is set to 0 - low priority. The larger the number, the higher priority is used to render the swatch.  Maya pre-defined the render priority for the swatch in Node Editor, Attribute Editor and Hypershade as below:  0: The lowest render priority. 1: The render priority for the swatch in Node Editor. 2: The render priority for the swatch in the working area of HyperShade 3: The render priority for the swatch in Attribute Editor.  For example, when creating a display port in AE using the swatchDisplayPort command, option "-rp 3" is used.
        rs: (create, edit, query) - The render size of the swatch.  The value will be clamped between 32 and 512.
        sn: (create, edit, query) - Name of the shadingNode.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        wh: (create, edit) - The width and height of the port.
    """
    ...


def switchTable(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l1: str = ..., l2: str = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sr: bool = ..., sbm: Optional[Union[str, bool]] = ..., sn: Optional[Union[str, bool]] = ..., upr: bool = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries the switch table control.
    
    The optional argument is the name of the control.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l1: (edit) - Set the label of the first column
        l2: (edit) - Set the label of the second column
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sr: (query) - The current row selected.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        sn: (edit, query) - The switch node to be displayed in the control.
        upr: (query) - The row under the pointer.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def symbolButton(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., c: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a symbol button.  A symbol button behaves like
    a regular button, the only difference is a symbol button displays
    an image rather that a text label.  A command may be attached to the
    button which will be executed when the button is pressed.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        c: (create, edit, query) - Command executed when the symbol button is pressed.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i: (create, edit, query) - Image for the button.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def symbolCheckBox(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dfi: Optional[Union[str, bool]] = ..., dni: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i: Optional[Union[str, bool]] = ..., im: bool = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., ofc: Optional[Union[str, bool]] = ..., ofi: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., oni: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: bool = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a symbol check box.  A symbol check box is a
    simple control containing a pixmap and a state of either on or off.
    Commands can be attached to any or all of the following events:  when
    the symbol check box is turned on, turned off, or simply when it's
    state is changed.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the check box's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the check box from inside the callback, or use onCommand and offCommand as separate callbacks.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dfi: (create, edit, query) - Image displayed when the check box is off and disabled.
        dni: (create, edit, query) - Image displayed when the check box is on and disabled.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i: (create, edit, query) - Image of the check box.
        im: (create, edit, query) - This flag will revert the symbolCheckBox to its pre Maya 2.5 behaviour of having a 2 pixel inner margin. This flag is for backward compatibility on Linux only, and will be removed in future releases.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ofc: (create, edit) - Command executed when the symbol check box is turned off.
        ofi: (create, edit, query) - Image displayed when the check box is off.
        onc: (create, edit) - Command executed when the symbol check box is turned on.
        oni: (create, edit, query) - Image displayed when the check box is on.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the check box.
        ver: (create, edit, query) - Specify the version that this control feature was introduced. The argument should be given as a string of the version number (e.g. "2017", "2018"). Currently only accepts major version numbers (e.g. 2017 Ext 1, or 2017.5 should be given as "2018").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def tabLayout(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bs: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., ca: bool = ..., cr: bool = ..., ct: Optional[Union[int, bool]] = ..., ctc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gsp: int = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hst: Optional[Union[int, bool]] = ..., i: Optional[Union[str, bool]] = ..., iv: bool = ..., imh: Optional[Union[int, bool]] = ..., imw: Optional[Union[int, bool]] = ..., io: bool = ..., m: bool = ..., mar: int = ..., mcw: Optional[Union[int, bool]] = ..., mt: Optional[Union[Tuple[int, int], bool]] = ..., ntc: Optional[Union[str, bool]] = ..., nbg: bool = ..., nch: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pmc: Optional[Union[str, bool]] = ..., psc: Optional[Union[str, bool]] = ..., po: bool = ..., scr: bool = ..., stb: bool = ..., sc: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., sti: Optional[Union[int, bool]] = ..., snt: bool = ..., sbm: Optional[Union[str, bool]] = ..., ti: Optional[Union[Tuple[str, str], bool]] = ..., tii: Optional[Union[Tuple[int, str], bool]] = ..., tl: Optional[Union[Tuple[str, str], bool]] = ..., tli: Optional[Union[Tuple[int, str], bool]] = ..., tp: Optional[Union[str, bool]] = ..., tt: Optional[Union[Tuple[str, str], bool]] = ..., tti: Optional[Union[Tuple[int, str], bool]] = ..., tc: bool = ..., tv: bool = ..., ut: Optional[Union[str, bool]] = ..., vst: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a tab group. Tab groups are a specialized form of
    control layouts that contain only control layouts.
    Whenever a control layout is added to a tab group it will have a tab
    provided for it that allows selection of that group
    from amongst other tabbed control groups. Only one child of a tab
    layout is visible at a time.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bs: (create, edit, query) - Specify the style of the border for tab layout. Valid values are: "none", "top", "notop" and "full". By default, it will use "full" to draw a simple frame around the body area of the tab layout.  "none"  - Do not draw borders around the body area of the tab layout "top"   - Only draw a simple line right below the tabs "notop" - Draw a simple frame on the left/right/bottom (no top) of the tab layout "full"  - Draw a simple frame around the body area of the tab layout
        cc: (create, edit) - Command executed when a tab is selected interactively. This command is only invoked when the selected tab changes. Re-selecting the current tab will not invoke this command.
        ca: (query) - Returns a string array of the names of the layout's immediate children.
        cr: (create, query) - Set to true if you want the child of the control layout to be as wide as the scroll area.  You may also indicate a minimum width for the child using the -mcw/minChildWidth flag.
        ct: (create, edit) - Close the tab at the given index.
        ctc: (create, edit) - Specify a script to be executed when one of the tabs are closed by clicking on the header widget (MMB or X button).
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit) - Command executed when a tab is double clicked on.  Note that the first click will select the tab and the second click will execute the double click command.  Double clicking the current tab will re-invoke the double click command.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gsp: (edit) - Sets the spacing for this layout.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hst: (create, edit) - Thickness of the horizontal scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.
        i: (create, edit, query) - Image appearing in top right corner of tab layout.
        iv: (create, edit, query) - Visibility of tab image.
        imh: (create, query) - Margin height for all tab children.
        imw: (create, query) - Margin width for all tab children.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mar: (edit) - Sets the content margins for this layout.
        mcw: (create, query) - Specify a positive non-zero integer value indicating the minimum width the tab layout's children.  This flag only has meaning when the -cr/childResizable flag is set to true.
        mt: (create, edit) - Move the tab from the current index to a new index.
        ntc: (create, edit) - Command executed when the 'New Tab' button (on the tab bar) is clicked.  Note: in order to show the new tab button use the -snt/showNewTab flag.  Using this command will override any internal Maya logic for adding a new tab (only this command will be executed).
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nch: (query) - Returns in an int the number of immediate children of the layout.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pmc: (create, edit) - Specify a script to be executed when the popup menu is about to be shown.
        psc: (create, edit) - Command executed when a tab is selected but before it's contents become visible.  Re-selecting the current tab will not invoke this command.  Note that this command is not executed by using either of the -st/selectTab or -sti/selectTabIndex flags.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        scr: (create, query) - Puts all children of this layout within a scroll area.
        stb: (create, edit, query) - If true, the active tab in the layout can be scrolled through with the mouse wheel. Default is true.
        sc: (create, edit, query) - Command executed when a tab is selected interactively  This command will be invoked whenever a tab is selected, ie. re-selecting the current tab will invoke this command.  Note that this command is not executed by using either of the -st/selectTab or -sti/selectTabIndex flags.
        st: (create, edit, query) - The name, in short form, of the selected tab.  An empty string is returned on query if there are no child tabs.
        sti: (create, edit, query) - Identical to the -st/selectTab flag except this flag takes a 1-based index to identify the selected tab.  A value of 0 is returned on query if there are no child tabs.
        snt: (create, edit, query) - Set to true if you want to have a 'New Tab' button shown at the end of the tab bar.  Note: use the -ntc/newTabCommand flag to set the command executed when this button is clicked.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ti: (create, edit, multiuse, query) - Set an icon for a tab.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the icon file name.
        tii: (create, edit, multiuse, query) - Identical to the -ti/tabIcon flag except this flag takes a 1-based index to identify the tab you want to set the icon for. If this flag is queried the tab icons for all the children are returned.
        tl: (create, edit, multiuse, query) - Set a tab label.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the label for the tab associated with that child. If this flag is queried then the tab labels for all the children are returned.
        tli: (create, edit, multiuse, query) - Identical to the -tl/tabLabel flag except this flag takes a 1-based index to identify the tab you want to set the label for. If this flag is queried the tab labels for all the children are returned.
        tp: (create, edit, query) - Changes the tab position. The possible values are: "north", "east" and "west".
        tt: (create, edit, multiuse, query) - Set a tab tooltip.  The first argument is the name of a control that must be a child of the tab layout.  The second argument is the tooltip for the tab associated with that child. If this flag is queried then the tab tooltips for all the children are returned.
        tti: (create, edit, multiuse, query) - Identical to the -tt/tabTooltip flag except this flag takes a 1-based index to identify the tab you want to set the tooltip for. If this flag is queried the tab tooltips for all the children are returned.
        tc: (create, query) - Set to true if you want to have a close button icon on all created tabs.
        tv: (create, edit, query) - Visibility of the tab labels.
        ut: (create) - Forces the command to use a command template other than the current one.
        vst: (create, edit) - Thickness of the vertical scroll bar.  Specify an integer value greater than or equal to zero. This flag has no effect on Windows systems.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def text(*args, al: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., drc: str = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hl: bool = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rs: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., ww: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a simple text label control.

    Args:
        al: (create, edit, query) - The label alignment.  Alignment values are "left", "right", and "center".  Note that the alignment will only be noticable if the control is wider than the label length. By default, the label is aligned "center".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        drc: (edit) - Adds a callback that is called when a drag and drop operation is hovering above the drop site.  It returns the shape of the rectangle to be drawn to highlight the entry, if the control can receive the dropped data. The MEL version of the callback is of the form:  global proc int[] callbackName(string $dropControl, int $x, int $y)  The return value is an array of size 4, with the parameters, in order, being the left and top coordinates of the rectangle to be drawn, followed by the width and height. This functionality is currently only implemented in MEL.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hl: (create, edit, query) - Sets the label text to be a hyperlink if the argument is true.  The label text must be a proper HTML link. In MEL, double quotes in the link will most likely have to be protected from the MEL interpreter by preceding them with a backslash.  Clicking on the link will open it in an external Web browser.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The label text.  The default label is the name of the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rs: (create, edit, query) - If true then the control will recompute it's size to just fit the size of the label.  If false then the control size will remain fixed as you change the size of the label.  The default value of this flag is true.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        ww: (create, query) - If true then label text is wrapped where necessary at word-breaks. If false, it is not wrapped at all. The default value of this flag is false.
    """
    ...


def textField(*args, aie: bool = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., db: bool = ..., dcb: bool = ..., dhb: bool = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dif: bool = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ec: Optional[Union[str, bool]] = ..., ex: bool = ..., fi: Optional[Union[str, bool]] = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., it: Optional[Union[str, bool]] = ..., ip: Optional[Union[int, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pht: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rfc: Optional[Union[str, bool]] = ..., sf: bool = ..., sbm: Optional[Union[str, bool]] = ..., tx: Optional[Union[str, bool]] = ..., tcc: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a text field control.

    Args:
        aie: (create, edit, query) - Sets whether to always invoke the enter command when the return key is pressed by the user. By default, this option is false.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the text changes.  This command is not invoked when the value changes via the -tx/text flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        db: (create, edit, query) - Sets the visibility state of search field buttons to true/false depending on the passed value. In Query mode returns whether both buttons are visible or not.
        dcb: (create, edit, query) - Sets the visibility state of search field clear button to true/false depending on the passed value. In Query mode returns whether clear button of search field is visible or not.
        dhb: (create, edit, query) - Sets the visibility state of search field history button to true/false depending on the passed value. In Query mode returns whether history button of search field is visible or not.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dif: (create, edit, query) - Sets whether the text field draws itself with a frame when it's inactive. By default, this option is false.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ec: (create, edit) - Command executed when the keypad 'Enter' key is pressed.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fi: (create, edit, query) - Text in the field as a filename. This does conversions between internal and external (UI) file representation.
        fn: (create, edit, query) - The font for the text.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        it: (create, edit) - Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
        ip: (create, edit, query) - The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pht: (create, edit, query) - Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rfc: (create, edit) - Command executed when the field receives focus.
        sf: (create) - Creates a search field instead of a text field.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        tx: (create, edit, query) - The field text.
        tcc: (create, edit) - Command executed immediately when the field text changes.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def textFieldButtonGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bc: Optional[Union[str, bool]] = ..., bl: Optional[Union[str, bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., eb: bool = ..., ekf: bool = ..., ex: bool = ..., fi: Optional[Union[str, bool]] = ..., fcc: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., it: Optional[Union[str, bool]] = ..., ip: Optional[Union[int, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pht: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., tx: Optional[Union[str, bool]] = ..., tcc: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command adds a button to the textFieldGrp command.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bc: (create, edit) - Command attached to the button.
        bl: (create, edit, query) - Label text of the button.
        cc: (create, edit) - Command executed when the field text changes and user presses Enter or Return.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        eb: (create, edit, query) - Enable state of the button.  By default, this flag is set to true and the button is enabled.  Specify true, and the button will appear dimmed or greyed-out indicating it is disabled.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fi: (create, edit, query) - Text in the field as a filename. This does conversions between internal and external (UI) file representation.
        fcc: (create, edit) - If used together with -text or -inserText flag, change command will be executed after text modification.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        it: (create, edit) - Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
        ip: (create, edit, query) - The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label text for the group.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pht: (create, edit, query) - Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        tx: (create, edit, query) - Text in the field.
        tcc: (create, edit) - Command executed immediately when the field text changes.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def textFieldGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fi: Optional[Union[str, bool]] = ..., fcc: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., it: Optional[Union[str, bool]] = ..., ip: Optional[Union[int, bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pht: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., tx: Optional[Union[str, bool]] = ..., tcc: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label text and
    editable text field.  The label text is optional.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the field text changes and user presses Enter or Return.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it. If false then the field is 'read only' and can not be typed into. The text in the field can always be changed with the -tx/text flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fi: (create, edit, query) - Text in the field as a filename. This does conversions between internal and external (UI) file representation.
        fcc: (create, edit) - If used together with -text or -inserText flag, change command will be executed after text modification.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        it: (create, edit) - Insert text into the field at the current insertion position (specified by the -ip/insertionPosition flag).
        ip: (create, edit, query) - The insertion position for inserted text.  This is a 1 based value where position 1 specifies the beginning of the field.  Position 0 may be used to specify the end of the field.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - Label text for the group.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pht: (create, edit, query) - Setting this property makes the line edit display a grayed-out placeholder text as long as the text field is empty and the widget doesn't have focus. By default, this property contains an empty string.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        tx: (create, edit, query) - Text in the field.
        tcc: (create, edit) - Command executed immediately when the field text changes.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def textManip(*args, v: bool = ..., query: bool = ...) -> Any:
    r"""
    Shows/hides the text manip.

    Args:
        v: (create, query) - Shows/hides the text manip.
    """
    ...


def textScrollList(*args, ai: bool = ..., ait: bool = ..., aas: bool = ..., ams: bool = ..., ann: Optional[Union[str, bool]] = ..., a: Optional[Union[str, bool]] = ..., ap: Optional[Union[Tuple[int, str], bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dkc: Optional[Union[str, bool]] = ..., da: bool = ..., dii: Optional[Union[int, bool]] = ..., di: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., el: Optional[Union[str, bool]] = ..., en: bool = ..., ea: bool = ..., ebg: bool = ..., eii: Optional[Union[Tuple[int, bool], bool]] = ..., ei: Optional[Union[Tuple[str, bool], bool]] = ..., ekf: bool = ..., eut: Optional[Union[Tuple[str, bool], bool]] = ..., ex: bool = ..., fn: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., lf: Optional[Union[Tuple[int, str], bool]] = ..., m: bool = ..., nbg: bool = ..., ni: bool = ..., npm: bool = ..., nr: Optional[Union[int, bool]] = ..., nsi: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., ra: bool = ..., rii: Optional[Union[int, bool]] = ..., ri: Optional[Union[str, bool]] = ..., sc: Optional[Union[str, bool]] = ..., sii: Optional[Union[int, bool]] = ..., si: Optional[Union[str, bool]] = ..., sut: Optional[Union[str, bool]] = ..., shi: Optional[Union[int, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., utg: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries a text scrolling list. The
    list can be in single select mode where only one item at time
    is selected, or in multi-select mode where many items may be
    selected.
    
    Note: The -dgc/dragCallback flag works only on Windows.

    Args:
        ai: (query) - All the items.
        ait: (query) - Return all the items as unique tags.
        aas: (create, edit, query) - Specify automatic selection mode.  When automaticSelection is on each item that the mouse is over (during dragging once an item has been selected) will be selected.  Thus, if -sc/selectCommand someCommand is set, someCommand will be called for each selected item. If -aas/allowAutomaticSelection is off, then only the item selected when the mouse button is up will be the selected item, so -sc/selectCommand someCommand is only called once if it is set.
        ams: (create, edit, query) - Specify multi or single selection mode.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        a: (create, edit, multiuse) - Add an item to the end of the list.
        ap: (create, edit, multiuse) - Append an item at the specified position. The position is a 1-based index.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dkc: (create, edit) - Specify the command to be executed when the delete or backspace key is pressed.
        da: (create, edit) - Deselect all items.
        dii: (create, edit, multiuse) - Deselect the indexed item.  Indices are 1-based.
        di: (create, edit, multiuse) - Deselect the item that contains the specified text.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit) - Specify the command to be executed when an item is double clicked.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        el: (create, edit, query) - String that is displayed when the list is empty.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ea: (create, edit) - Enable all items.
        ebg: (create, edit, query) - Enables the background color of the control.
        eii: (create, edit, multiuse) - Enable/disable an item using on the item index. Indices are 1-based.
        ei: (create, edit, multiuse) - Enable/disable an item using the item text.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        eut: (create, edit, multiuse) - Enable/disable an item using on the unique item tag.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fn: (create, edit, query) - The font for the list items.  Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        lf: (create, edit, multiuse) - Specify the font for a specific line of the list. The indices are 1-based. Valid font values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        ni: (query) - Number of items.
        npm: (query) - Return the number of popup menus attached to this control.
        nr: (create, edit, query) - Number of visible rows.
        nsi: (query) - Number of selected items.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ra: (create, edit) - Remove all items.
        rii: (create, edit, multiuse) - Remove the indexed item. Indices are 1-based.
        ri: (create, edit, multiuse) - Remove the item with the specified text.
        sc: (create, edit) - Specify the command to be executed when an item is selected.
        sii: (create, edit, multiuse, query) - Select the indexed item. Indices are 1-based.
        si: (create, edit, multiuse, query) - Select the item that contains the specified text.
        sut: (create, edit, multiuse, query) - Allow item selections based on the unique tag. In query mode, it will return the unique tag of the selected items.
        shi: (create, edit) - Show the indexed item.  Scroll the list as necessary so that the indexed item is visible.  Indices are 1-based.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        utg: (create, edit, multiuse) - This flag can only be used in conjunction with the append or the appendPosition flag. The string specifies a unique tag for the appended item; the tag can then be used to query an item. This tag provides an alternate way to uniquely identify a list item using a string instead of by index. Tags are case insensitive.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def thumbnailCaptureComponent(*args, c: bool = ..., cfc: bool = ..., ccs: bool = ..., d: bool = ..., ef: Optional[Union[int, bool]] = ..., fdc: Optional[Union[str, bool]] = ..., iso: bool = ..., lfo: bool = ..., pp: bool = ..., rpt: Optional[Union[str, bool]] = ..., s: Optional[Union[str, bool]] = ..., sf: Optional[Union[int, bool]] = ..., query: bool = ...) -> Any:
    r"""
    This command is used to generate a thumbnail/playblast sequence from the scene.

    Args:
        c: (create) - Create a new component to capture a sequence of image for the current scene.
        cfc: (query) - Query only. Return the number of frames that have been captured.
        ccs: (create) - Delete the current thumbnail component (preview image will be destroyed).
        d: (create) - Delete the generated image sequence and preview for the current capture session.
        ef: (create, query) - Set the end captured frame. Only valid when the -c/capture flag is set. If -sf/startFrame is set and not -ef/endFrame, or if endFrame is smaller than startFrame, endFrame will be automatically set to startFrame.
        fdc: (create) - MEL only. Set the callback file dialog which is called after the capture component window has been closed. Only valid when the -c/capture flag is set.
        iso: (query) - Returns true if a thumbnail/playblast capture session is currently running (already opened and still not cancelled/saved).
        lfo: (query) - Returns true if the thumbnail capture component was launched through the options dialog box, else false.
        pp: (query) - Returns the generated preview path (the first frame of generated sequence resized to 100x100 px).
        rpt: (create) - Remove all captured thumbnail/playblast from the given project file path.
        s: (create) - Save the generated image sequence for the given file to disk. The file path must be an absolute path.
        sf: (create, query) - Set the start captured frame. Only valid when -c/capture flag is set.
    """
    ...


def timeControl(*args, acn: bool = ..., alf: Optional[Union[str, bool]] = ..., asw: bool = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bs: bool = ..., cfc: Tuple[float, float, float, float] = ..., dt: Optional[Union[str, bool]] = ..., ds: bool = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., es: bool = ..., ex: bool = ..., fd: bool = ..., fr: bool = ..., fgc: Tuple[float, float, float] = ..., fpn: bool = ..., gt: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., mlc: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pc: Optional[Union[str, bool]] = ..., po: bool = ..., rng: bool = ..., ra: bool = ..., rv: bool = ..., rc: Optional[Union[str, bool]] = ..., rcs: Optional[Union[float, bool]] = ..., roh: bool = ..., r: bool = ..., sk: Optional[Union[str, bool]] = ..., skc: bool = ..., sn: bool = ..., s: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., ts: Optional[Union[int, bool]] = ..., tsp: Optional[Union[int, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., wf: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a control that can be used for
    changing current time, displaying/editing keys, and
    displaying/scrubbing sound.
    Note: only one timeControl may be created.  The one Maya creates
    on startup can be accessed from the global string variable $gPlayBackSlider.
    Also, it is not a good idea to delete it.

    Args:
        acn: (create, query) - When "showKeys" is not "none", querying this flag will return the names of all the animCurves for which keyframe ticks are being displayed.  Query returns string[].
        alf: (create, edit, query) - Specifies whether a filter is to be applied when displaying animation layers. If so, the options can be "allAffecting" (no filter), "active" (only the active layers on the object will be displayed) and "animLayerEditor" (the settings will be taken from the animation layer editor).
        asw: (create, edit, query) - Specifies or queries whether weights are to be shown when displaying animation layers.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bs: (edit) - Set this widget up for sound scrubbing. Subsequent changes to current time will result in "sound scrubbing" behavior, until the "-endScrub" command is issued for this widget.
        cfc: (edit) - This flag is used to specify the rgba color of the current frame overlay rectangle in the timeControl.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ds: (edit, query) - Turn sound display off.  Query returns int.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        es: (edit) - End sound scubbing for this widget.  This stops sound scrubbing behavior and should be issued before any subsequent "-beginScrub" flags
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fd: (create, edit) - Force a redraw of the time control UI. Similiar to forceRefresh but does not rebuild key information.
        fr: (create, edit) - Force a refresh of the time control UI.
        fgc: (edit) - This flag is used to specify the rgb color of the vertical lines and numeric text in the timeControl.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gt: (create, edit, query) - "true" means this widget controls and displays the global, dependency graph time.  "false" means time changes here do NOT affect the dependency graph. Query returns int.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        mlc: (create, edit, query) - Specifies the name of a selectionConnection object that the time slider will use as its source of content.  The time slider will only display keys for items contained in the selectionConnection object.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pc: (create, edit) - script to run on mouse-down in this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rng: (create, query) - Returns string representing the currently highlighted range visible on the time slider.  A range from 10 to 20 would be returned as "10:20".  When there's no range visible on the time slider, the query returns a range spanning the current time: for example, "10:11".  These values are in the current time unit.
        ra: (create, query) - Returns a float array representing the currently highlighted range visible on the time slider.  A range from 10 to 20 would be returned as { 10.0, 20.0 }.  When there's no range visible on the time slider, the query returns values spanning the current time: { 10.0, 11.0 }.  These values are in the current time unit.
        rv: (create, query) - Returns true if a currently highlighted range is visible on the time slider, false if no.
        rc: (create, edit) - script to run on mouse-up in this control.
        rcs: (edit, query) - How much sound (in the current time unit) is repeated when -repeatOnHold is true.  Default is 1.0.
        roh: (edit, query) - Repeat sound during mouse-down events
        r: (edit) - Resample the sound display to fit the widget
        sk: (create, edit, query) - "active" will show tick marks for keyframes on all active objects.  "none" shows no tick marks.  Any other name is taken as the name of a channel box whose selected attributes will display tick marks.  Default "active".  Query returns string.
        skc: (create, edit, query) - This flag can be used in conjunction with the showKeys flag to enable a combination of "active" + "channel box" behavior. Specifically, if channel box attributes are selected, tick marks will be shown for those attributes. If no channel box attributes are selected, tick marks will be shown for keyframes on all active objects.
        sn: (create, edit, query) - "true" means this widget is constrained to having values that are integers representing the current time unit.. "false" means the current time indicator is "free floating" and not constrained.
        s: (edit, query) - Name of audio depend node whose data should display in the sound-display widget. Query returns string.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ts: (create, edit, query) - Specifies the width of keyframe ticks drawn in the time slider. The value will be clamped to the range [1, 63].
        tsp: (create, edit, query) - Specifies the interval between keyframe ticks in the timeControl. For example, a value of 10, will place ticks at 0, 10, 20, etc.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        wf: (edit, query) - Determines what part of the sound waveform to display, when -displaySound is "true". Valid values are "top", "bottom", and "both".  Default is "top". Query returns string.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def timeField(*args, ann: Optional[Union[str, bool]] = ..., auw: Optional[Union[int, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., ed: bool = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ec: Optional[Union[str, bool]] = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rfc: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a field control that accepts only time values.
    An invisible slider is attached to the
    field and accessed by holding down the Ctrl modifier key while pressing
    one of the mouse buttons.  Dragging the invisible slider to the right
    with the middle mouse button increases the field value by the amount
    specified with the -s/step flag, while dragging to the left
    decreases the value by the same amount.  The left and right mouse
    buttons apply a factor of 0.1 and 10 to the step value.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        auw: (create, edit, query) - When this is non-zero the widget will automatically scale based on the unit time settings (frame or timecode). The value of autoUnitWidth specifies the number of digits that should be able to be displayed as the frame number. So a value of 4 will make sure frame number 8723 can be displayed. When the value is zero the normal widget width will be used.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the field changes.  This command is not invoked when the value changes via the -v/value flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command executed when dragging in the field.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        ed: (create, edit, query) - The edit state of the field.  By default, this flag is set to true and the field value may be changed by typing into it.  If false then the field cannot be changed interactively.  However, the field text can be changed using the -v/value flag regardless of the state of the -ed/editable flag.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ec: (create, edit) - Command executed when the keypad 'Enter' key is pressed.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit, query) - Number of digits to the right of the decimal place.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rfc: (create, edit) - Command executed when the field receives focus.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Increment for the invisible slider.   The field value will change by this amount when the invisible slider is dragged.
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Value of the field.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def timeFieldGrp(*args, adj: Optional[Union[int, bool]] = ..., ad2: Optional[Union[int, bool]] = ..., ad3: Optional[Union[int, bool]] = ..., ad4: Optional[Union[int, bool]] = ..., ad5: Optional[Union[int, bool]] = ..., ad6: Optional[Union[int, bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cal: Optional[Union[Tuple[int, str], bool]] = ..., cl2: Optional[Union[Tuple[str, str], bool]] = ..., cl3: Optional[Union[Tuple[str, str, str], bool]] = ..., cl4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., cl5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., cl6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., cat: Optional[Union[Tuple[int, str, int], bool]] = ..., ct2: Optional[Union[Tuple[str, str], bool]] = ..., ct3: Optional[Union[Tuple[str, str, str], bool]] = ..., ct4: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ct5: Optional[Union[Tuple[str, str, str, str, str], bool]] = ..., ct6: Optional[Union[Tuple[str, str, str, str, str, str], bool]] = ..., co2: Optional[Union[Tuple[int, int], bool]] = ..., co3: Optional[Union[Tuple[int, int, int], bool]] = ..., co4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., co5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., co6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., cw: Optional[Union[Tuple[int, int], bool]] = ..., cw1: Optional[Union[int, bool]] = ..., cw2: Optional[Union[Tuple[int, int], bool]] = ..., cw3: Optional[Union[Tuple[int, int, int], bool]] = ..., cw4: Optional[Union[Tuple[int, int, int, int], bool]] = ..., cw5: Optional[Union[Tuple[int, int, int, int, int], bool]] = ..., cw6: Optional[Union[Tuple[int, int, int, int, int, int], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., en1: bool = ..., en2: bool = ..., en3: bool = ..., en4: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., el: Optional[Union[str, bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., nf: Optional[Union[int, bool]] = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pre: Optional[Union[int, bool]] = ..., po: bool = ..., rat: Optional[Union[Tuple[int, str, int], bool]] = ..., sbm: Optional[Union[str, bool]] = ..., s: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., ut: Optional[Union[str, bool]] = ..., v: Optional[Union[Tuple[float, float, float, float], bool]] = ..., v1: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., v2: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., v3: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., v4: Optional[Union[Union[float, Tuple[float, float]], bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    All of the group commands position their individual controls in columns
    starting at column 1.  The layout of each control (ie. column) can be
    customized using the -cw/columnWidth, -co/columnOffset,
    -cat/columnAttach, -cal/columnAlign, and
    -adj/adjustableColumn flags.  By default, columns are left aligned
    with no offset and are 100 pixels wide.  Only one column in any group can
    be adjustable.
    
    This command creates a pre-packaged collection of label text and
    editable time fields.  The label text is optional and one to four
    time fields can be created.

    Args:
        adj: (create, edit) - Specifies which column has an adjustable size that changes with the sizing of the layout.  The column value is a 1-based index. Passing 0 as argument turns off the previous adjustable column.
        ad2: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly two columns.
        ad3: (create, edit) - Specifies that the column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly three columns.
        ad4: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly four columns.
        ad5: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly five columns.
        ad6: (create, edit) - Specifies which column has an adjustable size that changes with the size of the parent layout. Ignored if there are not exactly six columns.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command string executed when the value of any of the fields changes.
        cal: (create, edit, multiuse) - Arguments are : column number, alignment type. Possible alignments are: left | right | center. Specifies alignment type for the specified column.
        cl2: (create, edit) - Sets the text alignment of both columns.  Ignored if there are not exactly two columns. Valid values are "left", "right", and "center".
        cl3: (create, edit) - Sets the text alignment for all three columns.  Ignored if there are not exactly three columns. Valid values are "left", "right", and "center".
        cl4: (create, edit) - Sets the text alignment for all four columns.  Ignored if there are not exactly four columns. Valid values are "left", "right", and "center".
        cl5: (create, edit) - Sets the text alignment for all five columns.  Ignored if there are not exactly five columns. Valid values are "left", "right", and "center".
        cl6: (create, edit) - Sets the text alignment for all six columns.  Ignored if there are not exactly six columns. Valid values are "left", "right", and "center".
        cat: (create, edit, multiuse) - Arguments are : column number, attachment type, and offset. Possible attachments are: left | right | both. Specifies column attachment types and offets.
        ct2: (create, edit) - Sets the attachment type of both columns. Ignored if there are not exactly two columns. Valid values are "left", "right", and "both".
        ct3: (create, edit) - Sets the attachment type for all three columns. Ignored if there are not exactly three columns. Valid values are "left", "right", and "both".
        ct4: (create, edit) - Sets the attachment type for all four columns. Ignored if there are not exactly four columns. Valid values are "left", "right", and "both".
        ct5: (create, edit) - Sets the attachment type for all five columns. Ignored if there are not exactly five columns. Valid values are "left", "right", and "both".
        ct6: (create, edit) - Sets the attachment type for all six columns. Ignored if there are not exactly six columns. Valid values are "left", "right", and "both".
        co2: (create, edit) - This flag is used in conjunction with the -columnAttach2 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the two columns.  The offsets applied are based on the attachments specified with the -columnAttach2 flag.  Ignored if there are not exactly two columns.
        co3: (create, edit) - This flag is used in conjunction with the -columnAttach3 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the three columns.  The offsets applied are based on the attachments specified with the -columnAttach3 flag.  Ignored if there are not exactly three columns.
        co4: (create, edit) - This flag is used in conjunction with the -columnAttach4 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the four columns.  The offsets applied are based on the attachments specified with the -columnAttach4 flag.  Ignored if there are not exactly four columns.
        co5: (create, edit) - This flag is used in conjunction with the -columnAttach5 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the five columns.  The offsets applied are based on the attachments specified with the -columnAttach5 flag.  Ignored if there are not exactly five columns.
        co6: (create, edit) - This flag is used in conjunction with the -columnAttach6 flag.  If that flag is not used then this flag will be ignored.  It sets the offset for the six columns.  The offsets applied are based on the attachments specified with the -columnAttach6 flag.  Ignored if there are not exactly six columns.
        cw: (create, edit, multiuse) - Arguments are : column number, column width. Sets the width of the specified column where the first parameter specifies the column (1 based index) and the second parameter specifies the width.
        cw1: (create, edit) - Sets the width of the first column. Ignored if there is not exactly one column.
        cw2: (create, edit) - Sets the column widths of both columns. Ignored if there are not exactly two columns.
        cw3: (create, edit) - Sets the column widths for all 3 columns. Ignored if there are not exactly 3 columns.
        cw4: (create, edit) - Sets the column widths for all 4 columns. Ignored if there are not exactly 4 columns.
        cw5: (create, edit) - Sets the column widths for all 5 columns. Ignored if there are not exactly 5 columns.
        cw6: (create, edit) - Sets the column widths for all 6 columns. Ignored if there are not exactly 6 columns.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dc: (create, edit) - Command string executed when dragging the invisible slider in any of the fields.
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        en1: (create, edit, query) - 
        en2: (create, edit, query) - 
        en3: (create, edit, query) - 
        en4: (create, edit, query) - Enable state for the respective field.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        el: (create, edit, query) - If present on creation this specifies that there will be an extra label in the group.  Sets the string to be label text to the right of fields.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - If present on creation this specifies that there will be a label to the left of the fields.  Sets the string to be the label text.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nf: (create) - Set the number of fields on creation. One to four fields are available.  The default is one field.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pre: (create, edit) - Set the number of digits to the right of the decimal.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rat: (create, edit, multiuse) - Arguments are : column, attachment type, offset. Possible attachments are: top | bottom | both. Specifies attachment types and offsets for the entire row.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        s: (create, edit, query) - Set the delta of invisioSlider delta , the invisioSlider step is delta/10.0 in LMB , delta in MMB,delta*10.0 in RMB. Default is 10.0
        ut: (create) - Forces the command to use a command template other than the current one.
        v: (create, edit, query) - Values for all fields.
        v1: (create, edit, query) - 
        v2: (create, edit, query) - 
        v3: (create, edit, query) - 
        v4: (create, edit, query) - Value for the respective field.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def timePort(*args, ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., gt: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sn: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a simple time control widget.
    See also the "timeControl" command.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        gt: (create, edit, query) - "true" means this widget controls and displays the global, dependency graph time.  "false" means time changes here do NOT affect the dependency graph. Query returns int.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sn: (create, edit, query) - "true" means this widget is constrained to having values that are integers representing the current time unit.. "false" means the current time indicator is "free floating" and not constrained.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def toggleWindowVisibility(*args) -> Any:
    r"""
    Toggle the visibility of a window. If no window is specified then
    the current window (most recently created) is used. See also
    the window command's vis/visible flag.

    Args:
    """
    ...


def toolBar(*args, aa: Optional[Union[str, bool]] = ..., ann: Optional[Union[str, bool]] = ..., a: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., con: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., l: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create a toolbar.
    Tool bars are movable panel that contains a set of controls.
    They are placed in the tool bar area around the central control in a main window.
    Tool bars can be moved inside their current area, moved into new areas and floated.

    Args:
        aa: (create, edit, multiuse, query) - Areas where the dock control may be placed. Valid values are "top", "left", "bottom", "right" and "all".  The default is "all".
        ann: (create, edit, query) - Annotate the control with an extra string value.
        a: (create, edit, query) - The initial dock area for this dock control. Valid values are "top", "left", "bottom" and "right". This is a required flag.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        con: (create, query) - The name of the control that is a content of this dock control. This is a required flag.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        l: (create, edit, query) - The label text.  The default label is the name of the control.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def toolButton(*args, amt: bool = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., cl: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dcc: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., i1: Optional[Union[str, bool]] = ..., i2: Optional[Union[str, bool]] = ..., i3: Optional[Union[str, bool]] = ..., iol: Optional[Union[str, bool]] = ..., io: bool = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., ofc: Optional[Union[str, bool]] = ..., onc: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., piv: bool = ..., pma: bool = ..., po: bool = ..., sl: bool = ..., sbm: Optional[Union[str, bool]] = ..., st: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., ta: bool = ..., tc: bool = ..., ti1: Optional[Union[Tuple[str, str], bool]] = ..., ti2: Optional[Union[Tuple[str, str], bool]] = ..., ti3: Optional[Union[Tuple[str, str], bool]] = ..., ut: Optional[Union[str, bool]] = ..., ver: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a toolButton that is added to the most recently
    created tool button collection unless the cl/collection flag is
    used. It also attaches the named tool, activating it when this control
    is selected.
    
    By default, this control only handles one tool at a time.  Using
    the t/tool flag to associate a new tool will simply override the
    previous attached tool.  If you use the amt/allowMultipleTools
    flag then you will be able to attach more than one tool with this
    control.  Only one tool will be current within the control.  To access
    the other tools press the right mouse button to display a popup menu
    containing all the tools associated with this control.  If you set
    the piv/popupIndicatorVisible flag then a small arrow will be
    drawn on the control to indicate that additional tools are attached to
    this control.

    Args:
        amt: (create, query) - Indicates whether this control will allow you to attach more than one tool.  By default, this control accepts only one tool. You can add multiple tools by setting this flag to true. Only one tool will be current and displayed at any one time. Use the pop up menu attached to the right mouse button to view all the tools.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        cc: (create, edit) - Command executed when the control's state is changed. Note that this flag should not be used in conjunction with onCommand and offCommand. That is, one should either use changeCommand and test the state of the control from inside the callback, or use onCommand and offCommand as separate callbacks.
        cl: (create, edit) - To explicitly add a tool button to a tool collection.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dcc: (create, edit) - Command executed when the control is double clicked.
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        i1: (create, edit, query) - 
        i2: (create, edit, query) - 
        i3: (create, edit, query) - This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the current tool.
        iol: (create, edit, query) - A short string (5 characters) label that will be displayed on top of the icon.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        ofc: (create, edit) - Command executed when the control is turned off.
        onc: (create, edit) - Command executed when the control is turned on.
        p: (create, query) - The parent layout for this control.
        piv: (create, edit, query) - Edit this flag to set the visibility of the popup tool indicator. The indicator is a simple image that appears in the top right corner of the button when more that one tool is associated with this control. This flag is queryable and true by default.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        sl: (create, edit) - Will set this button as the selected one.  This flag also queries the select state of the control.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create, edit) - The draw style of the control.  Valid styles are "iconOnly", "textOnly", "iconAndTextHorizontal" and "iconAndTextVertical".
        t: (create, edit, multiuse, query) - The name of the tool to be attached to the button.  If the tool specified is already attached to this button then it will be selected.  Query this flag to return the current tool.  This flag may be specified more than once to attach more than one tool.
        ta: (query) - This query only flag returns the names of all the tools attached to the toolButton control.
        tc: (query) - This query only flag return the number of tools attached to the toolButton control.
        ti1: (create, edit, multiuse, query) - 
        ti2: (create, edit, multiuse, query) - 
        ti3: (create, edit, multiuse, query) - This control supports three images.  The image that best fits the current size of the control will be displayed.  This flag applies the image to the specified tool.  The first argument is the name of the tool and the second is the name of the image.  When queried an array of tool icon pairs is returned.
        ut: (create) - Forces the command to use a command template other than the current one.
        ver: (create, edit, query) - Specify the version that this tool button feature was introduced. The argument should be given as a string of the version number (e.g. "2013", "2014"). Currently only accepts major version numbers (e.g. 2013 Ext 1, or 2013.5 should be given as "2014").
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def toolCollection(*args, cia: bool = ..., dt: Optional[Union[str, bool]] = ..., ex: bool = ..., gl: bool = ..., nci: bool = ..., p: Optional[Union[str, bool]] = ..., sl: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a tool button collection. Collections are parented
    to the current default layout if no parent is specified with
    the -p/parent flag.  As children of the layout they will be deleted when
    the layout is deleted. Collections may also span more than one window
    if the -gl/global flag is used. In this case the collection has no parent
    and must be explicitly deleted with the 'deleteUI' command when it is no
    longer wanted.

    Args:
        cia: (query) - Returns a string list giving the long names of all the items in this collection.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        gl: (create, query) - Set the collection to have no parent layout.  This flag must be specified when the collection is created and can not be queried or edited.  Consequently, global collections must be explicitly deleted.
        nci: (query) - Returns the number of items that are in this collection.
        p: (create) - Specify the parent to associate the collection with.  The collection will be deleted along with the parent.  This flag must be specified when the collection is created and can not be edited.
        sl: (create, edit, query) - Select the specified collection item.  If queried will return the name of the currently selected collection item.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


def treeLister(*args, af: Optional[Union[str, bool]] = ..., add: Optional[Union[Tuple[str, str, str], bool]] = ..., avi: Optional[Union[Tuple[str, str, str, str], bool]] = ..., ann: Optional[Union[str, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., clr: bool = ..., cp: str = ..., dt: Optional[Union[str, bool]] = ..., dn: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ei: str = ..., ex: bool = ..., ep: str = ..., etd: int = ..., fcb: Optional[Union[str, bool]] = ..., fl: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., io: bool = ..., isc: Optional[Union[str, bool]] = ..., m: bool = ..., nbg: bool = ..., npm: bool = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rc: Optional[Union[str, bool]] = ..., rf: str = ..., rem: str = ..., ruc: bool = ..., sp: str = ..., sdn: Tuple[str, str] = ..., sbm: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., vnn: bool = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates/edits/queries the tree lister control.
    The optional argument is the name of the control.

    Args:
        af: (create, edit, multiuse) - Add an item path to the favorites folder.  The item path does not have to actually be in the tree.
        add: (create, edit, multiuse) - Add an item to the control.  The arguments are item-path,icon path,command where item-path is the path from the root of the tree to the item's name icon path is the icon displayed in the results list command is the script which is executed when the item is LMB clicked
        avi: (create, edit, multiuse) - Add a VNN (Virtual Node Network) item to the control.  The arguments are: item-path, icon-path, vnn-string, vnn-action. Where item-path is the path from the root of the tree to the item's name, icon-path is the icon displayed in the results list, vnn-string is used for drag data when MMB dragging the item and vnn-action is the script which is executed when the item is LMB clicked. The vnn-string should be comprised of: 'VNN runtime,VNN library,VNN node', where the VNN library can contain sub-libraries, using / to separate.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        clr: (edit) - Clears the contents of the control.
        cp: (edit, multiuse) - Collapse a path in the tree.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dn: (query) - Query the display name of a given item.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ei: (edit) - Execute the command associated with an item.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        ep: (edit, multiuse) - Expand a path in the tree.
        etd: (edit) - Expand the tree to the given depth.
        fcb: (create, edit) - This script is called whenever a favorite is added or removed. It is passed two arguments: The item's path and a boolean indicating if it is being added to favorites (True) or removed (False).
        fl: (query) - Returns the list of favorite items.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        isc: (query) - Returns the language and script command of the passed item path as a two-element list, the first element is the string "MEL" or "Python" and the second is the command script. Note that items with Python callable commands will be returned as strings.       In query mode, this flag needs a value.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rc: (create, edit, query) - Command executed when the refresh button is pressed.  Note: by default the refresh button is hidden and will be shown automatically when this command script is attached.
        rf: (edit, multiuse) - Remove an item from favorites.  Accepts the full favorite path or the tail of the full path.
        rem: (edit, multiuse) - Remove an item path.
        ruc: (query) - Returns the path to the result (right-pane) item under the mouse cursor. Returns an empty string if there is no such item.
        sp: (edit, multiuse) - Select a path in the tree.
        sdn: (edit, multiuse) - Edit the displayed name of a given item.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        vnn: (query) - Returns the VNN (Virtual Node Network) string of the passed item path.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def treeView(*args, ai: Optional[Union[Tuple[str, str], bool]] = ..., adr: bool = ..., ahp: bool = ..., ams: bool = ..., arp: bool = ..., ann: Optional[Union[str, bool]] = ..., abr: Optional[Union[int, bool]] = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., bh: Optional[Union[Tuple[str, bool], bool]] = ..., bcl: Optional[Union[Tuple[str, float, float, float], bool]] = ..., bef: Optional[Union[Tuple[str, bool], bool]] = ..., bst: Optional[Union[Tuple[str, int, str], bool]] = ..., bs: Optional[Union[Tuple[str, int, str], bool]] = ..., bti: Optional[Union[Tuple[str, int, str], bool]] = ..., btp: Optional[Union[Tuple[str, int, str], bool]] = ..., btc: Optional[Union[Tuple[str, int, float, float, float], bool]] = ..., bto: Optional[Union[Tuple[str, int, bool], bool]] = ..., bvf: Optional[Union[Tuple[str, int, bool], bool]] = ..., ch: Optional[Union[str, bool]] = ..., cs: bool = ..., cmc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dl: Optional[Union[Tuple[str, str], bool]] = ..., dls: Optional[Union[Tuple[str, str], bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dad: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., elc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., eb: Optional[Union[Tuple[str, int, int], bool]] = ..., ekf: bool = ..., enk: bool = ..., enl: Optional[Union[Tuple[str, int], bool]] = ..., ex: bool = ..., ecc: Optional[Union[str, bool]] = ..., ei: Optional[Union[Tuple[str, bool], bool]] = ..., fb: Optional[Union[int, bool]] = ..., fn: Optional[Union[Tuple[str, str], bool]] = ..., ff: Optional[Union[Tuple[str, int], bool]] = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hb: bool = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hl: Optional[Union[Tuple[str, bool], bool]] = ..., hc: Optional[Union[Tuple[str, float, float, float], bool]] = ..., ibc: Optional[Union[Tuple[str, int, int], bool]] = ..., i: Optional[Union[Tuple[str, int, str], bool]] = ..., ii: Optional[Union[Tuple[str, str, int], bool]] = ..., iie: Optional[Union[str, bool]] = ..., il: Optional[Union[str, bool]] = ..., io: bool = ..., it: Optional[Union[str, bool]] = ..., ia: Optional[Union[Tuple[str, str], bool]] = ..., idc: Optional[Union[str, bool]] = ..., dc2: Optional[Union[str, bool]] = ..., iex: Optional[Union[str, bool]] = ..., idx: Optional[Union[str, bool]] = ..., ip: Optional[Union[str, bool]] = ..., irc: Optional[Union[str, bool]] = ..., isl: Optional[Union[str, bool]] = ..., iv: Optional[Union[Tuple[str, bool], bool]] = ..., lbc: Optional[Union[Tuple[str, float, float, float], bool]] = ..., m: bool = ..., nbg: bool = ..., nb: Optional[Union[int, bool]] = ..., npm: bool = ..., ornament: Optional[Union[Tuple[str, int, int, int], bool]] = ..., orc: Optional[Union[Tuple[str, float, float, float], bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., pc: Optional[Union[Tuple[int, str], bool]] = ..., po: bool = ..., ra: bool = ..., ri: Optional[Union[str, bool]] = ..., rto: bool = ..., rpc: Optional[Union[Tuple[int, str], bool]] = ..., sl: Optional[Union[Tuple[str, int], bool]] = ..., sc: Optional[Union[str, bool]] = ..., si: Optional[Union[Tuple[str, bool], bool]] = ..., scc: Optional[Union[str, bool]] = ..., scl: Optional[Union[Tuple[str, float, float, float], bool]] = ..., shi: Optional[Union[str, bool]] = ..., sbm: Optional[Union[str, bool]] = ..., tc: Optional[Union[Tuple[str, float, float, float], bool]] = ..., ut: Optional[Union[str, bool]] = ..., vsp: Optional[Union[int, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a custom control.

    Args:
        ai: (create, edit, multiuse) - Adds a tree view item to the tree view. First argument specifies the item's name, second argument specifies the item's parent (use an empty string to have it at the top level of the tree)
        adr: (create, edit, query) - Allow the user to perform drag and drop of treeView items.  If enabled, re-ordering / re-parenting operations can be perfomed with the middle mouse button. This flag takes precendence over other drag and drop related flags. Defaults to true.
        ahp: (create, edit, query) - If not cleared(default), the treeView will make parent nodes of visible nodes automatically visible
        ams: (create, edit, query) - Specify multi or single selection mode. Allow the user to perform multiple selection by holding ctrl or shift key while selecting items of treeView items. Defaults to true.
        arp: (create, edit, query) - Allow the user to reparent items in the tree view using the middle mouse button. Defaults to true. If false, user can still reorder items within a group using the middle mouse button.
        ann: (create, edit, query) - Annotate the control with an extra string value.
        abr: (create, edit) - Sets tree view item's buttons to appear on the right or left. Argument specifies if they are to be attached to the right, if it is set to false they will attach on the left.
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        bh: (create, edit) - Sets an item's border as highlit or not. First Argument specifies item, second argument specifies on or off.
        bcl: (create, edit) - Sets the color an item's border highlite will turn when highlite is enabled. first parameter specifies layer three float values specify RGB values, between 0 and 1.
        bef: (create, edit, multiuse, query) - If buttonErase was set true , then even if the button of the treeView item  is set invisible , the treeView will still erase the buttonRect of this treeView item with background . First argument is the item name, second argument is whether buttonErase was set true or false
        bst: (create, edit, multiuse) - Sets the state of a button. First argument specifies the layer, second argument specifies which button, third argument specifies the state Possible states: "buttonUp" - button is up "buttonDown" - button is down "buttonThirdState" - button is in state three (used by the "3StateButton" button style)
        bs: (create, edit, multiuse) - Sets the type of button, used to indicate possible states and if the button is reset upon release. First argument specifies the layer, second argument specifies which button, third argument specifies the type of button Possible button types: "pushButton" - two possible states, button is reset to up upon release "2StateButton" - two possible states, button changes state on click "3StateButton" - three button states, button changes state on click
        bti: (create, edit, multiuse) - Sets a one letter text to use as the icon to use for a specific button on a specific item. First argument specifies the item, second argument specifies the button, third argument specifies the icon text.
        btp: (create, edit, multiuse) - Sets a tooltip for specific button on a specific item. First argument specifies the item, second argument specifies the button, third argument specifies the tooltip.
        btc: (create, edit, multiuse) - Sets the background color of a button that will be used if buttonTransparencyOverride is enabled. First argument specifies item, second argument specifies button, three floats specify RGB values, between 0 and 1.
        bto: (create, edit, multiuse) - Sets a button's background as being overridden or not. First argument specifies item, second argument specifies button, third argument specifies overridden or not.
        bvf: (create, multiuse) - Sets a button as visible or not. First Argument specifies item. Second Argument specifies a button. Third Argument specifies visible or not.
        ch: (query) - Query the children of an item. If the argument is null, all items will be returned.       In query mode, this flag needs a value.
        cs: (create, edit) - Clears all selected items.
        cmc: (create, edit) - Set the callback function to be invoked just before any attached context menu is shown. This can be used as a replacement to, or in addition to the postMenuCommand flag on the popupMenu command. The function should accept a string which will be the item that was clicked on (empty if no item was hit). The function should return true if the menu should be shown, false otherwise.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dl: (create, edit, multiuse) - Set a label for the item that is different than the string that identifies the item. This label will be used in the display of the item. The first parameter specifies the item, the second specifies the display label.
        dls: (create, edit, multiuse) - Set a suffix for the display label for the item. This suffix will not be shown when renaming the item in the tree view.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dad: (create, edit) - Sets the callback function to be invoked upon drag and drop of layers. the callback function should take as parameters: - a string array of the dropped items - a string array of the items previous parents - an integer array of the items previous indexes - a string for the item(s) new parent - an integer array for the item's new indexes - a string for the item that now comes before the dropped items - a string for the item that now comes after the dropped items
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        elc: (create, edit) - Set the callback function to be invoked when the user changes the name of an item by double clicking it in the UI. The callback should accept two string arguments: the item name and the new name. The item name refers to the name of the item and not the display label. The callback function should return a string. An empty string indicates that the rename operation was invalid and the control should revert to the original name. If the rename operation is valid the callback should return a string that identifies the item, possibly different from the new display name entered by the user.
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        eb: (create, edit, multiuse) - Sets a specific button on a specific item to being usable or not. First argument specifies the item, second argument specifies the button, third argument specifies on or off.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        enk: (edit) - By default the treeview does not accept input from the keyboard.  By enabling keyboard support The treeview will support up/down navigation using the up/down arrow keys.
        enl: (create, edit) - enables or disables the label of a tree view item from being displayed. The first parameter specifies the item, the second specifies on or off.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        ecc: (create, edit) - Set the callback function to be invoked upon hitting the expand/collapse button. The function should take as parameters: - a string for the item for which the expand/collapse button was hit - an integer for the state of expansion
        ei: (create, edit) - Expands or collapses an item's children. First argument specifies the item, second argument specifies expanded or collapsed.
        fb: (create, edit, query) - Type of flat button to use.
        fn: (create, edit, query) - The first parameter specifies the item string for the TtreeViewNode in the TtreeNodeMap. The second string specifies the font for the text. Valid values are "boldLabelFont", "smallBoldLabelFont", "tinyBoldLabelFont", "plainLabelFont", "smallPlainLabelFont", "obliqueLabelFont", "smallObliqueLabelFont", "fixedWidthFont" and "smallFixedWidthFont".
        ff: (create, edit) - Sets the font face used for the specified item's text: 0 for normal, 1 for bold, 2 for italic.
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hb: (create, edit) - Hides the buttons for an item in the tree view. Can only be used when adding the item to the tree with the "addItem" flag. Space for the buttons is left to make sure items still line up correctly under their parent.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hl: (create, edit) - Sets an item as highlit. Highliting is shown by outlining the item. First parameter specifies the item, the second specifies the highliting or not.
        hc: (create, edit) - Sets the color an item's highlite will turn when highlite is enabled. first parameter specifies layer three float values specify RGB values, between 0 and 1.
        ibc: (create, edit, multiuse) - Sets a specific button on a specific item to ignore the button clicks First argument specifies the item ,second argument specifies the button, third argument specifies on or off
        i: (create, edit, multiuse) - Sets an image to use as the icon for the button. First argument specifies the item, second argument specifies the button, third argument specifies the image.
        ii: (create, edit, multiuse) - Create and insert a tree view item to the tree view. First argument specifies the item's name, second argument specifies the item's parent (use an empty string to have it at the top level of the tree), third argument is the child's index position in the children list.  An index less than or equal to 0 inserts as the first child, greater than or equal to the number of children inserts as last child.
        iie: (query) - Is the item in the tree view expanded.       In query mode, this flag needs a value.
        il: (query) - Query whether an item is a leaf.       In query mode, this flag needs a value.
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        it: (query) - Specify the item to query. Used with the flag "selectionColor" and "itemAnnotation".       In query mode, this flag needs a value.
        ia: (create, edit, query) - Annotate the specified item with an extra string value. When used for query, this flag has no argument and needs to be used with the flag "item".
        idc: (create, edit) - Set the callback function to be invoked when an item in the tree has been double clicked. The callback should accept one string, the display label of the item that was double clicked. If this callback is defined, it supersedes the normal item renaming behavior.
        dc2: (create, edit) - Set the callback function to be invoked when an item in the tree has been double clicked. This callback is similar to itemDblClickCommand(idc), but it accepts two strings: the name and the display label of the item that was double clicked. If this callback is defined, it supersedes the normal item renaming behavior
        iex: (create, query) - Queries the existence of the specified Tree View item.       In query mode, this flag needs a value.
        idx: (create, query) - Get the index for the specified item in the list of children of the item's parent. Index is 0-based.       In query mode, this flag needs a value.
        ip: (create, query) - If the specified item is a child, it returns the parent item. If the specified item is not a child it returns nothing.       In query mode, this flag needs a value.
        irc: (create, edit) - Set the callback function to be invoked when an item in the tree has been renamed. This occurs if there is a successful return of the command attached by "editLabelCommand" or unconditionally if there is no editLabelCommand. The callback should accept two strings, the old name and the new name of the item that was renamed.
        isl: (query) - Queries the item is currently selected or not.       In query mode, this flag needs a value.
        iv: (create, edit, query) - Control the given item's visibility.
        lbc: (create, edit) - Set the background color for text label for a particular item in the tree. The first parameter specifies layer. Set (-1.0, -1.0, -1.0) to restore the background to the default of "transparent"
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        nb: (create, edit) - Specifies the number of buttons for items in the tree.
        npm: (query) - Return the number of popup menus attached to this control.
        ornament: (create, edit) - Sets an item as having an ornament (a small colored circle), its on/off state, if it should have a dot, and its size. First Argument specifies item, second argument specifies on or off, third argument specifies dotted or not, fourth argument specifies radius (in pixels).
        orc: (create, edit) - Sets the color an ornament will be draw with for the specified layer.
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        pc: (create, edit, multiuse) - Sets the callback function to be invoked upon clicking a treeView button. First argument specifies which treeView button. Second argument specifies the callback function to be executed the callback function should take as parameters: - a string for the clicked button's item - an int for the clicked button's state
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        ra: (create, edit) - Removes all items from the tree view.
        ri: (create, edit) - Removes a tree view item from the tree view. If this item has children items, all children items are removed. First argument specifies the item's name.
        rto: (create, edit) - Controls the order the tree will be drawn in (reversed if true).
        rpc: (create, edit, multiuse) - Sets the callback function to be invoked upon right clicking a treeView button. First argument specifies which treeView button. Second argument specifies the callback function to be executed the callback function should take as parameters: - a string for the clicked button's item - an int for the clicked button's state
        sl: (create, edit) - Set selection on an element. The first parameter specifies the item, the second specifies on or off.
        sc: (create, edit) - Set the callback function to be invoked when an item is selected or deselected in the tree. The function should accept one string argument and one integer argument: the item name and the select state respectively. If the function returns true, the select/deselect is considered valid and will occur normally, otherwise it will be disallowed. name and
        si: (create, edit, query) - Sets an item's selected state. first argument specifies the item, second argument specifies selection status. When used for query without arguments, return all selected items in the treeview.
        scc: (create, edit) - Set the callback function to be invoked when a complete selection operation triggered by the user has occurred successfully. The callback is invoked if the "selectCommand" callback has returned a non-empty value (or always there is no "selectCommand" callback). This differs from selectCommand in that a simple selection replacement will generate two callbacks with "selectCommand" (one for deselect of the old item and one for select of the new), whereas "selectionChangedCommand" will only be invoked once, after the selection is complete. The callback is not passed any parameters and does not need to return any value (i.e. It is simply a notification mechanism).
        scl: (create, edit, query) - Sets the color an item will turn to indicate that it is selected. first parameter specifies the item three float values specify RGB values, between 0 and 1. When used for query, this flag has no argument and needs to be used with the flag "item". It returns the color an item will become if it is selected.
        shi: (create, edit) - Show the  item. Scroll the list as necessary so that item is visible.
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        tc: (create, edit) - Sets the label's text color for the specified layer. first argument specifies layer. three float values specify RGB values, between 0 and 1.
        ut: (create) - Forces the command to use a command template other than the current one.
        vsp: (create, edit, query) - The position of the vertical scrollbar.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
    """
    ...


def viewManip(*args, bl: bool = ..., br: bool = ..., ca: Optional[Union[float, bool]] = ..., ds: bool = ..., dc: bool = ..., ftv: bool = ..., fp: Optional[Union[str, bool]] = ..., gd: bool = ..., gh: bool = ..., hp: Optional[Union[str, bool]] = ..., lc: bool = ..., mo: Optional[Union[float, bool]] = ..., ns: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pr: Optional[Union[str, bool]] = ..., psu: bool = ..., rf: bool = ..., rh: bool = ..., rc: bool = ..., slp: Optional[Union[str, bool]] = ..., sf: bool = ..., sh: bool = ..., s: Optional[Union[str, bool]] = ..., tsl: bool = ..., tl: bool = ..., tr: bool = ..., v: bool = ..., zf: bool = ..., query: bool = ...) -> Any:
    r"""
    Mel access to the view cube manipulator.

    Args:
        bl: (create, query) - Positions the cube in the bottom left of the screen.
        br: (create, query) - Positions the cube in the bottom right of the screen.
        ca: (create, query) - Angle (in degrees) to rotate the compass.
        ds: (create, query) - Enable snapping of orbit direction to view cube part directions during drag operation.
        dc: (create, query) - Show compass below the view cube.
        ftv: (create) - Fits the scene bounding box to the active view.
        fp: (create, query) - Parameter string for the front position
        gd: (create, query) - Go to the default position
        gh: (create, query) - Go to the home position
        hp: (create, query) - Parameter string for the home position
        lc: (create) - Flattens the camera view rotation relative to the ground plane.
        mo: (create, query) - Opacity level (in range [0,1]) on view cube when the cursor is away from it (it is fully opaque when the cursor is in the view cube area).
        ns: (create, query) - Namespace to use for the object
        p: (create, query) - Command to run after moving
        pr: (create, query) - Command to run before moving
        psu: (create, query) - Specify whether the scene "up" direction should be preserved
        rf: (create, query) - Reset the front position
        rh: (create, query) - Reset the home position
        rc: (create) - Repositions the pivot point for orbiting/tumbling the scene to the center of the scene's bounding box.
        slp: (create, query) - String containing the selection lock parameters
        sf: (create) - Set the front view to the current one
        sh: (create) - Set the home view to the current one
        s: (create, query) - Set or query the size of the View Cube, which can be one of "tiny", "small", "normal", "large" or "auto". When set to "auto" the View Cube will be automatically set to the size most appropriate for the view.
        tsl: (create) - Toggle the selection lock
        tl: (create, query) - Positions the cube in the top left of the screen.
        tr: (create, query) - Positions the cube in the top right of the screen.
        v: (create, query) - Shows/hides the view manip.
        zf: (create, query) - Zoom the camera during animated transitions to fit the scene object in the viewport.
    """
    ...


def visor(*args, add: bool = ..., adn: Optional[Union[str, bool]] = ..., apx: bool = ..., apy: bool = ..., az: bool = ..., cmd: Optional[Union[str, bool]] = ..., deleteFolder: Optional[Union[str, bool]] = ..., edf: Optional[Union[str, bool]] = ..., fl: Optional[Union[str, bool]] = ..., mn: Optional[Union[str, bool]] = ..., n: Optional[Union[str, bool]] = ..., ntp: Optional[Union[str, bool]] = ..., opd: bool = ..., opf: bool = ..., p: Optional[Union[str, bool]] = ..., pth: Optional[Union[str, bool]] = ..., pms: Optional[Union[str, bool]] = ..., re: bool = ..., ras: bool = ..., rss: bool = ..., rs: Optional[Union[str, bool]] = ..., rst: bool = ..., rpz: bool = ..., ss: bool = ..., sb: Optional[Union[str, bool]] = ..., sp: Optional[Union[float, bool]] = ..., sg: Optional[Union[str, bool]] = ..., sd: bool = ..., sfi: bool = ..., sfo: bool = ..., sn: bool = ..., sts: bool = ..., stl: Optional[Union[str, bool]] = ..., trn: Optional[Union[str, bool]] = ..., typ: Optional[Union[str, bool]] = ..., query: bool = ...) -> Any:
    r"""
    Command for the creation and manipulation of a Visor UI element. The Visor is
    used to display the contents of a scene (rendering related nodes in
    particular), as well as files on disk which the user may wish to bring into
    the scene (shader and texture libraries for example).

    Args:
        add: (create, query) - Add a new folder to the current visual browser
        adn: (create, query) - Add dependency graph nodes by name to a user defined custom folder.  The argument is a string encolsed in quotes with 1 one more node names seperated by blanks
        apx: (create, query) - Specifies whether or not the user should be able to pan the contents of the visor horizontally. Default is true.
        apy: (create, query) - Specifies whether or not the user should be able to pan the contents of the visor vertically. Default is true.
        az: (create, query) - Specifies whether or not the user should be able to zoom the contents of the visor. Default is true.
        cmd: (create, query) - Mel command which will return a list of nodes to add to a folder
        deleteFolder: (create, query) - Delete the specified folder and all of its children
        edf: (create, query) - Edit the name and MEL command for an existing folder
        fl: (query) - Return a string array of the folders in the visor.
        mn: (create, query) - Set the name of the script to run to get a popup menu
        n: (create, query) - Name of the new folder
        ntp: (create, query) - A node type used by folders of type nodeTypeInDAG
        opd: (create, query) - When adding a new folder indicate if it sub directories will be show. The default is to not show sub directories.
        opf: (create, query) - When adding a new folder indicate if it will be open or closed by default. The default is closed.
        p: (create, query) - Parent folder of this folder
        pth: (create, query) - Path to a file system directory to be displayed in the folder
        pms: (create, query) - Specifies the script to be called when the right mouse button is pressed in the visor. The name of the editor in which the right mouse button was pressed will be appended to the script at the time the script is called.
        re: (create, query) - Rebuild the visor after interactively adding a folder
        ras: (create, query) - Refresh the swatches of all files currently displayed in this visor.
        rss: (create, query) - Refresh the swatches of all files currently selected in any visor.
        rs: (create, query) - Refresh the swatch of the file with the specified path.
        rst: (create, query) - Clear all previously loaded folder descriptions in preperation for building a new visual browser
        rpz: (create, query) - Specifies whether the panning and zooming of the visor should be restricted to keep the contents in the top left corner of the visor when they are smaller than the visible area within the visor. Default is true.
        ss: (create, query) - Save swatches to disk for currently displayed image files.
        sb: (create, query) - Set the name of the scroll bar associated with visor
        sp: (create, query) - Set the percentage value for the scroll bar.  Typically called from a a scroll bars callback.
        sg: (query) - Return a string array of the currently selected gadgets (files, folders, nodes) in the visor.
        sd: (create, query) - Specifies whether or not the visor should show dividers. The default is true. If -showDividers is set to false, dividers will be drawn as folders instead.
        sfi: (create, query) - Specifies whether or not the visor should show files. The default is true.
        sfo: (create, query) - Specifies whether or not the visor should show folders. The default is true.
        sn: (create, query) - Specifies whether or not the visor should show nodes. The default is true.
        sts: (create, query) - Return the MEL command string to save the folder setup in visor
        stl: (create, query) - Set display style for the browser.  Options are:     outliner          A single column with an outliner style icon and a text label     singleColumn          A single column with an image style icon and a text label     multiColumn          A multiple column grid of swatches with the text label below the swatch
        trn: (create, query) - Name of a transform node used by folders of type nodeTypeInDAG
        typ: (create, query) - Type of the new folder.  Options are:   command           A mel command that will return a list of depend nodes that will          be displayed in the folder connectedNodes           The nodes connected to the specified node name will be displayed          in the folder defaultNodes           A mel command that will generate default node types.  These nodes          will not be part of the scene and are used for drag and drop          creation of new nodes that are in the scene.  The mel command          use with this type is usually "listNodetypes". directory          A directory name in the file system directoryCommand          A mel command that will return a directory name in the file system folder          An empty folder(the default value).  Empty folders can be used         as user defined folders by dropping dependency graph nodes in to them nodeTypeInDAG                  List all nodes of a given type under a specified transforms in the                 DAG.  For example list all the shaders for a character by specifying         the top transform of the character shelfItems          A directory containing mel files to use as shelf items
    """
    ...


def webBrowser(*args, ann: Optional[Union[str, bool]] = ..., bk: bool = ..., bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dgc: Optional[Union[str, bool]] = ..., dpc: Optional[Union[str, bool]] = ..., en: bool = ..., ebg: bool = ..., ekf: bool = ..., ex: bool = ..., f: Optional[Union[str, bool]] = ..., fwd: bool = ..., fpn: bool = ..., h: Optional[Union[int, bool]] = ..., hlc: Optional[Union[Tuple[float, float, float], bool]] = ..., hm: bool = ..., io: bool = ..., m: bool = ..., mc: bool = ..., mww: bool = ..., nbg: bool = ..., npm: bool = ..., url: Optional[Union[str, bool]] = ..., p: Optional[Union[str, bool]] = ..., pma: bool = ..., po: bool = ..., rl: bool = ..., sf: bool = ..., sbm: Optional[Union[str, bool]] = ..., st: bool = ..., ucc: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: Optional[Union[int, bool]] = ..., wr: bool = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command is obsolete and will be removed in next version of Maya.
    The internal web browser of Maya has been replaced by a plug-in which allows your own browser to connect with Maya.
    Please refer help for information on how to setup communication of Maya with external web browser application.

    Args:
        ann: (create, edit, query) - Annotate the control with an extra string value.
        bk: (create) - Go back a page
        bgc: (create, edit, query) - The background color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0. When setting backgroundColor, the background is automatically enabled, unless enableBackground is also specified with a false value.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Add a documentation flag to the control.  The documentation flag has a directory structure. (e.g., -dt render/multiLister/createNode/material)
        dgc: (create, edit) - Adds a callback that is called when the middle mouse button is pressed.  The MEL version of the callback is of the form:  global proc string[] callbackName(string $dragControl, int $x, int $y, int $mods)  The proc returns a string array that is transferred to the drop site. By convention the first string in the array describes the user settable message type.  Controls that are application defined drag sources may ignore the callback. $mods allows testing for the key modifiers CTRL and SHIFT. Possible values are 0 == No modifiers, 1 == SHIFT, 2 == CTRL, 3 == CTRL + SHIFT.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def callbackName( dragControl, x, y, modifiers ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "x", "y", "modifiers".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(x)d %(y)d %(modifiers)d'")
        dpc: (create, edit) - Adds a callback that is called when a drag and drop operation is released above the drop site.  The MEL version of the callback is of the form:  global proc callbackName(string $dragControl, string $dropControl, string $msgs[], int $x, int $y, int $type)  The proc receives a string array that is transferred from the drag source. The first string in the msgs array describes the user defined message type. Controls that are application defined drop sites may ignore the callback. $type can have values of 1 == Move, 2 == Copy, 3 == Link.  In Python, it is similar, but there are two ways to specify the callback.  The recommended way is to pass a Python function object as the argument.  In that case, the Python callback should have the form:  def pythonDropTest( dragControl, dropControl, messages, x, y, dragType ):  The values of these arguments are the same as those for the MEL version above.  The other way to specify the callback in Python is to specify a string to be executed.  In that case, the string will have the values substituted into it via the standard Python format operator.  The format values are passed in a dictionary with the keys "dragControl", "dropControl", "messages", "x", "y", "type".  The "dragControl" value is a string and the other values are integers (eg the callback string could be "print '%(dragControl)s %(dropControl)s %(messages)r %(x)d %(y)d %(type)d'")
        en: (create, edit, query) - The enable state of the control.  By default, this flag is set to true and the control is enabled.  Specify false and the control will appear dimmed or greyed-out indicating it is disabled.
        ebg: (create, edit, query) - Enables the background color of the control.
        ekf: (create, edit, query) - If enabled, the user can navigate to the control with the tab key and select values with the keyboard or mouse. This flag would typically be used to turn off focus support from controls that get it by default, like Edit and List controls. If disabled, text in text fields can still be selected with the mouse but cannot be copied (except on Linux when "Middle Click Paste" is enabled).
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        f: (create) - Find text in a page
        fwd: (create) - Go forward a page
        fpn: (query) - Return the full path name of the widget, which includes all the parents.
        h: (create, edit, query) - The height of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        hlc: (create, edit, query) - The highlight color of the control. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        hm: (create) - Go to the home page
        io: (query) - Return whether the control can actually be seen by the user. The control will be obscured if its state is invisible, if it is blocked (entirely or partially) by some other control, if it or a parent layout is unmanaged, or if the control's window is invisible or iconified.
        m: (create, edit, query) - Manage state of the control.  An unmanaged control is not visible, nor does it take up any screen real estate.  All controls are created managed by default.
        mc: (create) - True if the match should respect the case
        mww: (create) - True if the match should check the whole world
        nbg: (create, edit) - Clear/reset the control's background. Passing true means the background should not be drawn at all, false means the background should be drawn.  The state of this flag is inherited by children of this control.
        npm: (query) - Return the number of popup menus attached to this control.
        url: (create, edit, query) - Open the named URL
        p: (create, query) - The parent layout for this control.
        pma: (query) - Return the names of all the popup menus attached to this control.
        po: (create, edit, query) - If true, this flag prevents overriding the control's attribute via the control's right mouse button menu.
        rl: (create) - Reload the current page
        sf: (create) - True if search should be going forward from the current location
        sbm: (create, edit) - Extra string to display in the status bar when the mouse is over the control.
        st: (create) - Stop loading a page
        ucc: (create) - Command to call when the URL changes
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the control.  A control is created visible by default.  Note that a control's actual appearance is also dependent on the visible state of its parent layout(s).
        vcc: (create, edit, query) - Command that gets executed when visible state of the control changes.
        w: (create, edit, query) - The width of the control.  The control will attempt to be this size if it is not overruled by parent layout conditions.
        wr: (create) - Set to true if the page should wrap
    """
    ...


def window(*args, bgc: Optional[Union[Tuple[float, float, float], bool]] = ..., cc: Optional[Union[str, bool]] = ..., dt: Optional[Union[str, bool]] = ..., dtg: Optional[Union[str, bool]] = ..., dc: Optional[Union[Tuple[str, str], bool]] = ..., ds: bool = ..., dl: Optional[Union[str, bool]] = ..., ex: bool = ..., fw: bool = ..., h: Optional[Union[int, bool]] = ..., iconName: Optional[Union[str, bool]] = ..., i: bool = ..., ip: bool = ..., le: Optional[Union[int, bool]] = ..., mm: bool = ..., mw: bool = ..., mxb: bool = ..., ma: bool = ..., mb: bool = ..., mcw: Optional[Union[Tuple[str, str], bool]] = ..., mbr: bool = ..., mbv: bool = ..., mi: Tuple[str, int] = ..., mnb: bool = ..., mnc: Optional[Union[str, bool]] = ..., nde: bool = ..., nm: bool = ..., p: Optional[Union[str, bool]] = ..., rtf: bool = ..., rc: Optional[Union[str, bool]] = ..., ret: bool = ..., s: bool = ..., st: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., tb: bool = ..., tbm: bool = ..., tlb: bool = ..., te: Optional[Union[int, bool]] = ..., tlc: Optional[Union[Tuple[int, int], bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., w: Optional[Union[int, bool]] = ..., wh: Optional[Union[Tuple[int, int], bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    This command creates a new window but leaves it invisible. It is most
    efficient to add the window's elements and then make it visible with
    the showWindow command. The window can have an optional menu bar. Also,
    the title bar and minimize/maximize buttons can be turned on or off. If the
    title bar is off, then you cannot have minimize or maximize buttons.
    
    Note: The window will require a control layout of some kind
    to arrange the controls (buttons, sliders, fields, etc.).  Examples of
    control layouts are columnLayout, formLayout, rowLayout, etc.
    
    Note: This command will clear the uiTemplate stack.  Templates for
    a window need to be set after the window cmd.

    Args:
        bgc: (create, edit) - The background color of the window. The arguments correspond to the red, green, and blue color components. Each component ranges in value from 0.0 to 1.0.
        cc: (create, edit) - Script executed after the window is closed.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtg: (create, edit, query) - Attach a tag to the window.
        dc: (create, multiuse) - Specifies which docking areas occupied the four different corners of the window. By default docking windows on the bottom or top will span the whole window. Use multiple instances of this flag to allow the left and right docking areas to occupy the corners. This method has two arguments: docking corner and docking area. Possible values for docking corner are "topLeft", "topRight", bottomLeft", and "bottomRight". Possible values for docking area are "left", "right", "top", and "bottom".
        ds: (create) - When set this flag specifies that this window can contain other docked sub-windows.
        dl: (create, edit, query) - When queried this flag will return a string holding the docking layout information. This string can be set when creating or editing a docking station to restore the previous docking layout. This string is a hexadecimal representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to restore layouts across sessions of Maya.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fw: (query) - Return the name of the front window.  Note: you must supply the name of any window (the window does not need to exist). Returns "unknown" if the front window cannot be determined.
        h: (create, edit, query) - Height of the window excluding any window frame in pixels.
        iconName: (create, edit, query) - The window's icon title.  By default it is the same as the window's title.
        i: (create, edit, query) - Icon state of the window.
        ip: (create) - Deprecated flag. Recognized but not implemented. This flag will be removed in a future version of Maya.
        le: (create, edit, query) - Position of the left edge of the window.
        mm: (create, edit, query) - If this flag is used then the main menu bar will be enabled.
        mw: (create, edit, query) - Main window for the application.  The main window has an 'Exit' item in the Window Manager menu.  By default, the first created window becomes the main window.
        mxb: (create, edit, query) - Turns the window's maximize button on or off.
        ma: (query) - Return a string array containing the names of the menus in the window's menu bar.
        mb: (create, query) - Adds an empty menu bar to the window. The Qt name of the object will be m_menubar_nameOfTheWindow.
        mcw: (edit, query) - This flag specifies a widget to add to a corner of the parent window. The first argument corresponds to the widget name and the second to the position of the widget. Possible values for widget position are "topLeft", "topRight", "bottomLeft", "bottomRight". In query mode this flag returns all the corner widget names in the following order: topLeft, topRight, bottomLeft, bottomRight. Add the -mbr/-menuBarResize flag to the changeCommand of widget passed (first argument) so that it will always have an appropriate size.
        mbr: (edit) - This flag should be used with the -mcw/-menuBarCornerWidget flag. This is used to resize the menu bar so that the corner widgets are updated.
        mbv: (create, edit, query) - Visibility of the menu bar (if there is one).
        mi: (edit) - Sets the index of a specified menu.
        mnb: (create, edit, query) - Turns the window's minimize button on or off.
        mnc: (create, edit) - Script executed after the window is minimized (iconified).
        nde: (create) - Controls whether nested docking is enabled or not.  Nested docking allows for docking windows next to other docked windows for more possible arrangement styles.
        nm: (query) - Return the number of menus attached to the window's menu bar.
        p: (create) - Specifies a parent window or layout which the created window is always on top of. Note: If the parent is a window the created window is not modal, so events are still propagated to the parent window.
        rtf: (create, edit, query) - The window will always grow/shrink to just fit the controls it contains.
        rc: (create, edit) - Script executed after the window is restored from it's minimized (iconified) state.
        ret: (create) - Retains the window after it has been closed.  The default is to delete the window when it is closed.
        s: (create, edit, query) - Whether or not the window may be interactively resized.
        st: (create, edit, query) - When queried this flag will return a string holding the window state information. This string is a hexadecimal representation of a binary string and is not meant to be humanly readable, but can be saved and loaded using the optionVar command to restore window state across sessions of Maya.
        t: (create, edit, query) - The window's title.
        tb: (create, edit, query) - Turns the window's title bar on or off.
        tbm: (create, edit, query) - Controls whether the title bar menu exists in the window title bar. Only valid if -tb/titleBar is true. This Windows only flag is true by default.
        tlb: (create, edit, query) - Makes this a toolbox style window.  A Windows only flag that makes the title bar smaller and uses a slightly different display style.
        te: (create, edit, query) - Position of the top edge of the window.
        tlc: (create, edit, query) - Position of the window's top left corner.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The window's visibility.
        w: (create, edit, query) - Width of the window excluding any window frame in pixels.
        wh: (create, edit, query) - Window's width and height excluding any window frame in pixels.
    """
    ...


def windowPref(*args, ea: bool = ..., ex: bool = ..., h: Optional[Union[int, bool]] = ..., le: Optional[Union[int, bool]] = ..., la: bool = ..., max: bool = ..., pm: bool = ..., r: bool = ..., ra: bool = ..., rms: Optional[Union[str, bool]] = ..., sa: bool = ..., sms: Optional[Union[str, bool]] = ..., te: Optional[Union[int, bool]] = ..., tlc: Optional[Union[Tuple[int, int], bool]] = ..., w: Optional[Union[int, bool]] = ..., wh: Optional[Union[Tuple[int, int], bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create or modify preferred window attributes.  The size and position
    of a window is retained during and between application sessions.  A
    default window preference is created when a window is closed.  Window
    preferences must be named and, consequently, only affect the window
    with a matching name.
    
    Note that window preferences are not applied to the main Maya window
    nor the Command window.

    Args:
        ea: (create, query) - Enable/disable all window preferences.  Preferences are enabled by default.  Set this flag to false and window's will ignore all preference values.
        ex: (create) - Returns true|false depending upon whether the specified object exists. Other flags are ignored.
        h: (create, edit, query) - Height of the window.
        le: (create, edit, query) - Left edge position of the window.
        la: (create) - Reads in file with window attributes from disk.
        max: (create, edit, query) - Maximize the window.
        pm: (create, query) - Set whether window is parented to main application window. Windows only.
        r: (create) - Remove a window preference.
        ra: (create) - Remove all window preferences.
        rms: (create) - Reads in file with main window state (positions of toolbars and dock controls).
        sa: (create) - Writes out file with window attributes.
        sms: (create) - Writes out file with main window state (positions of toolbars and dock controls).
        te: (create, edit, query) - Top edge position of the window.
        tlc: (create, edit, query) - Top and left edge position of the window.
        w: (create, edit, query) - Width of the window.
        wh: (create, edit, query) - Width and height of the window.
    """
    ...


def workspaceControl(*args, alm: bool = ..., cp: bool = ..., cl: bool = ..., cc: Optional[Union[str, bool]] = ..., clp: bool = ..., dt: Optional[Union[str, bool]] = ..., dtc: Optional[Union[Tuple[str, str], bool]] = ..., dtm: Optional[Union[Tuple[str, bool], bool]] = ..., dtp: Optional[Union[Tuple[str, str, bool], bool]] = ..., dup: bool = ..., ex: bool = ..., fl: bool = ..., h: bool = ..., hp: Optional[Union[str, bool]] = ..., hr: bool = ..., ic: Optional[Union[str, bool]] = ..., ih: Optional[Union[int, bool]] = ..., iw: Optional[Union[int, bool]] = ..., l: Optional[Union[str, bool]] = ..., ldc: Optional[Union[str, bool]] = ..., li: bool = ..., mh: Optional[Union[int, bool]] = ..., mw: Optional[Union[int, bool]] = ..., r: bool = ..., rc: Optional[Union[str, bool]] = ..., rp: Optional[Union[str, bool]] = ..., rsh: int = ..., rsw: int = ..., rs: bool = ..., rt: bool = ..., ss: Optional[Union[str, bool]] = ..., tp: Optional[Union[Tuple[str, bool], bool]] = ..., ttc: Optional[Union[Tuple[str, int], bool]] = ..., ui: Optional[Union[str, bool]] = ..., ut: Optional[Union[str, bool]] = ..., vis: bool = ..., vcc: Optional[Union[str, bool]] = ..., w: bool = ..., wp: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Creates and manages the widget used to host windows in a layout that enables docking and stacking windows together.

    Args:
        alm: (create, edit, query) - Controls whether or not this workspace control acts like Maya UI Elements such as the Shelf and the Tool Box.  For example, this hides the tab bar and shows a toolbar grip on the end of the control to allow undocking.
        cp: (create, edit) - Sets whether the UI (as defined by the uiScript) checks the loaded state of one or more plug-ins in its code. The UI will not be loaded until the auto-loading of plug-ins is complete. Default value is false.
        cl: (edit) - Closes the workspace control.
        cc: (create, edit) - Command that gets executed when the workspace control is closed.
        clp: (create, edit, query) - Collapse or expand the tab widget parent of the workspace control.
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        dtc: (create, edit) - Dock this workspace control next to the given control. The first argument is the control name, the second is dock position relative to the control (valid values are: "left", "right", "top", "bottom").
        dtm: (create, edit) - Dock this workspace control into the main window. The first argument is the dock position along the sides of the main window (valid values are: "left", "right", "top", "bottom"), the second specifies whether the control should be tabbed into the first control found at the dock position.
        dtp: (create, edit) - Dock this workspace control into the workspace docking panel that the given workspace control is in. The first argument is the control name, the second is dock position along the sides of the panel (valid values are: "left", "right", "top", "bottom"), the third specifies whether the control should be tabbed into the first control found at the dock position.
        dup: (create, edit, query) - Controls whether or not this workspace control can be duplicated.  The default duplicate state is controlled by whether or not the panel is unique. Unique panels cannot be duplicated or copied. Workspace controls without a panel also cannot be duplicated, unless specifically set as such using this flag.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        fl: (create, edit, query) - Whether the workspace control is floating.
        h: (query) - Query only flag returning the current height of the control.
        hp: (create, edit, query) - Set height property of the workspace control. Valid values are:  fixed	  - Cannot be resized manually and will not be given any extra space while maximizing/dynamically resizing preferred - Can be resized manually but will not be given any extra space while maximizing/dynamically resizing free	  - Can be resized manually and will be given extra space while maximizing/dynamically resizing  Default: free  In query mode returns the current height property of the workspace control.
        hr: (create, edit, query) - Orientation of the control. This flag is true by default, which corresponds to a horizontally oriented widget.  Note: currently only "Toolbox" and "Shelf" support a vertical orientation.
        ic: (create, edit, query) - Adds a mel command to be executed when the control is added to the layout. The command should be a mel proc and it will be called with the workspaceControl name as parameter. The mel command should take the form:  global proc callbackName(string $workspaceControlName)  If "save" is appended to the command name, it will be called during the layout save.  global proc callbackNameSave(string $workspaceControlName)
        ih: (create, edit) - The initial height of the workspace control when first shown.
        iw: (create, edit) - The initial width of the workspace control when first shown.
        l: (create, edit, query) - The label text. The default label is the name of the workspace control.
        ldc: (create, edit, query) - Set a mel procedure to be called when the control changes orientation. The procedure is called with argument 1 for horizontal and 0 for vertical.
        li: (create, edit) - Sets whether the UI (as defined by the uiScript) will be built immediately on workspace control creation (true) or delayed until the control is actually shown (false). Default value is false.
        mh: (create, edit, query) - Sets the minimum height of control to the given value.  If given value is 0 (False), minimum height is set to 0. If given value is 1 (True), minimum height is set to initial height. If given value is greater than 1, minimum height is set to the given value.  In query mode returns current minimum height of the control.
        mw: (create, edit, query) - Sets the minimum width of control to the given value. This flag parameter was changed from bool to int in 2018 and old settings are still respected according to the following.  If given value is 0 (False), minimum width is set to 0. If given value is 1 (True), minimum width is set to initial width. If given value is greater than 1, minimum width is set to the given value.  In query mode returns current minimum width of the control.
        r: (edit, query) - Raises a workspace control to the top and makes it active. In Query mode, this flag will return whether the workspace control is active or not. Note that this flag won't raise a control if is minimized or collapsed. Use the flag -rs/restore instead.
        rc: (create, edit, multiuse) - The name of a workspace control that needs to be open in order for this workspace control to properly function. This workspace control will not be created if the required control is not open, and will be closed when the required control is closed.
        rp: (create, edit, multiuse) - The name of a plug-in that needs to be loaded in order to build the workspace control UI.
        rsh: (edit) - Resizes a floating workspace control's height to the given value.
        rsw: (edit) - Resizes a floating workspace control's width to the given value.
        rs: (create, edit) - Restores the control according to the following rules:  If collapsed then the control will be expanded If hidden then the control will be shown If minimized then the control will be restored If the control is an inactive tab into a tab group then it will become the active tab
        rt: (create) - Sets whether the workspace control is retained (i.e. only hidden) or deleted when closed. Default value is true.
        ss: (create, edit, query) - String containing the state of the control. Can be used with the initCallback flag.
        tp: (create, edit, query) - Changes the tab position. The possible values are: "north", "east" and "west". The boolean value, if set to true, changes the tab positions of all the controls in the parent widget. If it is not set, only the current control will get its position changed. A control can have a different orientation than the tab widget. If the control tab position is different from the tab widget's one, the tab position will be changed when the control becomes the only control in the tab widget. On query, only the control's tab position will be returned, not the tab widget's position. They may differ.
        ttc: (create, edit) - Tab this workspace control into the given control. The first argument is the control name, the second is the index position within the containing tab widget (invalid values mean append).
        ui: (create, edit) - The specified script will be invoked to build the UI of the workspaceControl.  This is a required flag.
        ut: (create) - Forces the command to use a command template other than the current one.
        vis: (create, edit, query) - The visible state of the workspace control. A control is created visible by default. If the control is created as not visible, the control will be created in a closed state. To make it appear, edit the control to set the flags floating or the flag visible to true. Use -r/raise flag to get the active status of a control as this flag will return true when the control is minimized or collapsed.
        vcc: (create, edit) - Command that gets executed when visible state of the workspace control changes.
        w: (query) - Query only flag returning the current width of the control.
        wp: (create, edit, query) - Set width property of the workspace control. Valid values are:  fixed	  - Cannot be resized manually and will not be given any extra space while maximizing/dynamically resizing preferred - Can be resized manually but will not be given any extra space while maximizing/dynamically resizing free	  - Can be resized manually and will be given extra space while maximizing/dynamically resizing  Default: free  In query mode returns the current width property of the workspace control.
    """
    ...


def workspaceControlState(*args, dc: Optional[Union[Tuple[int, int], bool]] = ..., dwh: Optional[Union[Tuple[int, int], bool]] = ..., ex: bool = ..., h: Optional[Union[int, bool]] = ..., le: Optional[Union[int, bool]] = ..., max: bool = ..., r: bool = ..., te: Optional[Union[int, bool]] = ..., tlc: Optional[Union[Tuple[int, int], bool]] = ..., w: Optional[Union[int, bool]] = ..., wh: Optional[Union[Tuple[int, int], bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Create or modify preferred window attributes for workspace controls.
    The size and position of a workspace control is retained during application
    sessions (although position only applies to workspace controls that are
    alone in a floating workspace docking panel). A default workspace control
    state is created when a workspace control is closed. Workspace control
    states must be named and, consequently, only affect the workspace control
    with a matching name.

    Args:
        dc: (create, edit, query) - Top and left edge position that the window will have when "Remember size and position" is off and when the panel is first opened. The values will be DPI scaled on edit and the value in query is returned unscaled. This value will only be used if the default width and height are also valid.
        dwh: (create, edit, query) - Width and height that the window will have when "Remember size and position" is off and when the panel is first opened. The values will be DPI scaled on edit and the value in query is returned unscaled. The position used in that case is defaultTopLeftCorner.
        ex: (create) - Returns true|false depending upon whether the specified object exists. Other flags are ignored.
        h: (create, edit, query) - Height of the window.
        le: (create, edit, query) - Left edge position of the window.
        max: (create, edit, query) - Maximize the window.
        r: (create) - Remove a window preference.
        te: (create, edit, query) - Top edge position of the window.
        tlc: (create, edit, query) - Top and left edge position of the window.
        w: (create, edit, query) - Width of the window.
        wh: (create, edit, query) - Width and height of the window.
    """
    ...


def workspaceLayoutManager(*args, cmw: Optional[Union[Tuple[str, bool], bool]] = ..., cu: bool = ..., d: Optional[Union[str, bool]] = ..., i: Optional[Union[str, bool]] = ..., ll: bool = ..., lml: bool = ..., lul: bool = ..., m: Optional[Union[str, bool]] = ..., pwc: Optional[Union[str, bool]] = ..., rs: bool = ..., rmw: bool = ..., s: bool = ..., sa: Optional[Union[str, bool]] = ..., sc: Optional[Union[str, bool]] = ..., scc: Optional[Union[str, bool]] = ..., smc: Optional[Union[str, bool]] = ..., t: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    The Workspace Layout Manager loads and saves the layout of the various toolbars and windows in the user interface.
    This command allows listing and managing their properties.

    Args:
        cmw: (create) - Saves main window layout and collapses all other controls in main window except the given one (first parameter) if it does not have any size constraint. Second parameter specifies if main window UI elements should be hidden or not.
        cu: (create, query) - Get the name of the current layout.
        d: (create) - Delete the given workspace. The string is the name of the layout, not the file name.
        i: (create) - Import the given workspace file to the workspaces directory. The string is an absolute path.
        ll: (create) - List the names of all registered layouts.
        lml: (create) - List the names of module layouts.
        lul: (create) - List the names of user layouts.
        m: (create) - Check whether or not the specified layout has been modified.
        pwc: (create) - Returns the parent workspace control of the given UI (panel) or an empty string if it does not exist.
        rs: (create) - Reset the current workspace to its original layout. Factory layouts will be reverted to default while user layouts will be reloaded from disk.
        rmw: (create) - Restores the main window layout to the one saved with the -cmw/-collapseMainWindowControls flag. The loaded workspace file will be deleted once it is restored.
        s: (create) - Save the current layout.
        sa: (create) - Save the current layout under the specified name.
        sc: (create) - Load the given workspace.  The string is the name of the layout, not the file name.
        scc: (create) - MEL only.  The string is interpreted as a MEL callback, which is called each time a layout is set as current (with -setCurrent flag). The callback is of the form:  global proc MySetCurrentCallback(string $layoutName)
        smc: (create) - MEL only.  The string is interpreted as a MEL callback, which is called each time a layout is modified or restored, that is, each time the -modified flag value changes. The callback is of the form:  global proc MySetModifiedCallback()
        t: (create) - Get the type of the specified layout: FACTORY, FACTORY_OVERRIDE, MODULE, MODULE_OVERRIDE or USER.
    """
    ...


def workspacePanel(*args, dt: Optional[Union[str, bool]] = ..., ex: bool = ..., mw: bool = ..., ut: Optional[Union[str, bool]] = ..., edit: bool = ..., query: bool = ...) -> Any:
    r"""
    Workspace panel.

    Args:
        dt: (create) - Puts the command in a mode where any other flags and arguments are parsed and added to the command template specified in the argument. They will be used as default arguments in any subsequent invocations of the command when templateName is set as the current template.
        ex: (create) - Returns whether the specified object exists or not. Other flags are ignored.
        mw: (create, edit, query) - Main window for the application.  The main window has an 'Exit' item in the Window Manager menu.  By default, the first created window becomes the main window.
        ut: (create) - Forces the command to use a command template other than the current one.
    """
    ...


